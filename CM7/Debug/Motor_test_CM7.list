
Motor_test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea5c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800ecfc  0800ecfc  0001ecfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800edd0  0800edd0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800edd0  0800edd0  0001edd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edd8  0800edd8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800edd8  0800edd8  0001edd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eddc  0800eddc  0001eddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  24000000  0800ede0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e24  24000090  0800ee70  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000eb4  0800ee70  00020eb4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023215  00000000  00000000  000200be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a40  00000000  00000000  000432d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f8  00000000  00000000  00046d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001670  00000000  00000000  00048510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e042  00000000  00000000  00049b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002211d  00000000  00000000  00087bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00193878  00000000  00000000  000a9cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0023d557  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069c0  00000000  00000000  0023d5a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000090 	.word	0x24000090
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ece4 	.word	0x0800ece4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000094 	.word	0x24000094
 80002dc:	0800ece4 	.word	0x0800ece4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <spiAbsoluteEncoderInitialize>:
spiAbsoluteEncoder absoluteEn_3;

int encoder_header_test = 0;

void spiAbsoluteEncoderInitialize(spiAbsoluteEncoder *dst)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b089      	sub	sp, #36	; 0x24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  dst->txData=nop_a5;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
  __HAL_SPI_ENABLE(&hspi1);
 80007ce:	4b48      	ldr	r3, [pc, #288]	; (80008f0 <spiAbsoluteEncoderInitialize+0x130>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b46      	ldr	r3, [pc, #280]	; (80008f0 <spiAbsoluteEncoderInitialize+0x130>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f042 0201 	orr.w	r2, r2, #1
 80007dc:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE(&hspi2);
 80007de:	4b45      	ldr	r3, [pc, #276]	; (80008f4 <spiAbsoluteEncoderInitialize+0x134>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4b43      	ldr	r3, [pc, #268]	; (80008f4 <spiAbsoluteEncoderInitialize+0x134>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f042 0201 	orr.w	r2, r2, #1
 80007ec:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE(&hspi3);
 80007ee:	4b42      	ldr	r3, [pc, #264]	; (80008f8 <spiAbsoluteEncoderInitialize+0x138>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b40      	ldr	r3, [pc, #256]	; (80008f8 <spiAbsoluteEncoderInitialize+0x138>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f042 0201 	orr.w	r2, r2, #1
 80007fc:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE(&hspi4);
 80007fe:	4b3f      	ldr	r3, [pc, #252]	; (80008fc <spiAbsoluteEncoderInitialize+0x13c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b3d      	ldr	r3, [pc, #244]	; (80008fc <spiAbsoluteEncoderInitialize+0x13c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f042 0201 	orr.w	r2, r2, #1
 800080c:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE(&hspi5);
 800080e:	4b3c      	ldr	r3, [pc, #240]	; (8000900 <spiAbsoluteEncoderInitialize+0x140>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b3a      	ldr	r3, [pc, #232]	; (8000900 <spiAbsoluteEncoderInitialize+0x140>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f042 0201 	orr.w	r2, r2, #1
 800081c:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE(&hspi6);
 800081e:	4b39      	ldr	r3, [pc, #228]	; (8000904 <spiAbsoluteEncoderInitialize+0x144>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b37      	ldr	r3, [pc, #220]	; (8000904 <spiAbsoluteEncoderInitialize+0x144>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f042 0201 	orr.w	r2, r2, #1
 800082c:	601a      	str	r2, [r3, #0]
  __HAL_RCC_SPI1_CLK_ENABLE();
 800082e:	4b36      	ldr	r3, [pc, #216]	; (8000908 <spiAbsoluteEncoderInitialize+0x148>)
 8000830:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000834:	4a34      	ldr	r2, [pc, #208]	; (8000908 <spiAbsoluteEncoderInitialize+0x148>)
 8000836:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800083a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800083e:	4b32      	ldr	r3, [pc, #200]	; (8000908 <spiAbsoluteEncoderInitialize+0x148>)
 8000840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000844:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000848:	61fb      	str	r3, [r7, #28]
 800084a:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_SPI2_CLK_ENABLE();
 800084c:	4b2e      	ldr	r3, [pc, #184]	; (8000908 <spiAbsoluteEncoderInitialize+0x148>)
 800084e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000852:	4a2d      	ldr	r2, [pc, #180]	; (8000908 <spiAbsoluteEncoderInitialize+0x148>)
 8000854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000858:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800085c:	4b2a      	ldr	r3, [pc, #168]	; (8000908 <spiAbsoluteEncoderInitialize+0x148>)
 800085e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000866:	61bb      	str	r3, [r7, #24]
 8000868:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_SPI3_CLK_ENABLE();
 800086a:	4b27      	ldr	r3, [pc, #156]	; (8000908 <spiAbsoluteEncoderInitialize+0x148>)
 800086c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000870:	4a25      	ldr	r2, [pc, #148]	; (8000908 <spiAbsoluteEncoderInitialize+0x148>)
 8000872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000876:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800087a:	4b23      	ldr	r3, [pc, #140]	; (8000908 <spiAbsoluteEncoderInitialize+0x148>)
 800087c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_SPI4_CLK_ENABLE();
 8000888:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <spiAbsoluteEncoderInitialize+0x148>)
 800088a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800088e:	4a1e      	ldr	r2, [pc, #120]	; (8000908 <spiAbsoluteEncoderInitialize+0x148>)
 8000890:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000894:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <spiAbsoluteEncoderInitialize+0x148>)
 800089a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800089e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_SPI5_CLK_ENABLE();
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <spiAbsoluteEncoderInitialize+0x148>)
 80008a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80008ac:	4a16      	ldr	r2, [pc, #88]	; (8000908 <spiAbsoluteEncoderInitialize+0x148>)
 80008ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <spiAbsoluteEncoderInitialize+0x148>)
 80008b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80008bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SPI6_CLK_ENABLE();
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <spiAbsoluteEncoderInitialize+0x148>)
 80008c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008ca:	4a0f      	ldr	r2, [pc, #60]	; (8000908 <spiAbsoluteEncoderInitialize+0x148>)
 80008cc:	f043 0320 	orr.w	r3, r3, #32
 80008d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <spiAbsoluteEncoderInitialize+0x148>)
 80008d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008da:	f003 0320 	and.w	r3, r3, #32
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
}
 80008e2:	bf00      	nop
 80008e4:	3724      	adds	r7, #36	; 0x24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	240007c8 	.word	0x240007c8
 80008f4:	24000850 	.word	0x24000850
 80008f8:	240008d8 	.word	0x240008d8
 80008fc:	24000960 	.word	0x24000960
 8000900:	240009e8 	.word	0x240009e8
 8000904:	24000a70 	.word	0x24000a70
 8000908:	58024400 	.word	0x58024400

0800090c <getPosSPI1>:

void getPosSPI1(spiAbsoluteEncoder *dst)  //Timer
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af02      	add	r7, sp, #8
 8000912:	6078      	str	r0, [r7, #4]
  SPI1_OPEN;
 8000914:	2200      	movs	r2, #0
 8000916:	2140      	movs	r1, #64	; 0x40
 8000918:	482e      	ldr	r0, [pc, #184]	; (80009d4 <getPosSPI1+0xc8>)
 800091a:	f007 fedd 	bl	80086d8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&(dst->txData),&(dst->rxBuffer),1,1); ////////////1바이트씩 주고 받음
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	1c5a      	adds	r2, r3, #1
 8000924:	2301      	movs	r3, #1
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	2301      	movs	r3, #1
 800092a:	482b      	ldr	r0, [pc, #172]	; (80009d8 <getPosSPI1+0xcc>)
 800092c:	f00a feac 	bl	800b688 <HAL_SPI_TransmitReceive>
  SPI1_CLOSE;
 8000930:	2201      	movs	r2, #1
 8000932:	2140      	movs	r1, #64	; 0x40
 8000934:	4827      	ldr	r0, [pc, #156]	; (80009d4 <getPosSPI1+0xc8>)
 8000936:	f007 fecf 	bl	80086d8 <HAL_GPIO_WritePin>
  //HAL_Delay(2);

  if(dst->rxBuffer==ready_op && dst->spiFlag==0)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	785b      	ldrb	r3, [r3, #1]
 800093e:	2ba5      	cmp	r3, #165	; 0xa5
 8000940:	d10b      	bne.n	800095a <getPosSPI1+0x4e>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d107      	bne.n	800095a <getPosSPI1+0x4e>
  {
	  encoder_header_test++;
 800094a:	4b24      	ldr	r3, [pc, #144]	; (80009dc <getPosSPI1+0xd0>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	3301      	adds	r3, #1
 8000950:	4a22      	ldr	r2, [pc, #136]	; (80009dc <getPosSPI1+0xd0>)
 8000952:	6013      	str	r3, [r2, #0]
    dst->txData=rd_pos;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2210      	movs	r2, #16
 8000958:	701a      	strb	r2, [r3, #0]
  }

  if(dst->rxBuffer==rd_pos)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	785b      	ldrb	r3, [r3, #1]
 800095e:	2b10      	cmp	r3, #16
 8000960:	d105      	bne.n	800096e <getPosSPI1+0x62>
  {
     dst->txData=nop_a5;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
     dst->spiFlag=1;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2201      	movs	r2, #1
 800096c:	605a      	str	r2, [r3, #4]
  }

 if(dst->spiFlag==2)        //LSB
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	2b02      	cmp	r3, #2
 8000974:	d113      	bne.n	800099e <getPosSPI1+0x92>
  {
    dst->spiFlag=0;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]

    dst->spiPosTemp+=dst->rxBuffer;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	7852      	ldrb	r2, [r2, #1]
 8000984:	441a      	add	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	60da      	str	r2, [r3, #12]

    if(dst->spiPosTemp<=4095)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000992:	da1a      	bge.n	80009ca <getPosSPI1+0xbe>
      dst->spiPos=dst->spiPosTemp;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	68da      	ldr	r2, [r3, #12]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	609a      	str	r2, [r3, #8]
    dst->spiPosTemp=0;
    dst->spiPosTemp+=dst->rxBuffer<<8;
  }


}
 800099c:	e015      	b.n	80009ca <getPosSPI1+0xbe>
  else if(dst->spiFlag==1&&dst->rxBuffer!=rd_pos) //MSB
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d111      	bne.n	80009ca <getPosSPI1+0xbe>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	785b      	ldrb	r3, [r3, #1]
 80009aa:	2b10      	cmp	r3, #16
 80009ac:	d00d      	beq.n	80009ca <getPosSPI1+0xbe>
    dst->spiFlag=2;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2202      	movs	r2, #2
 80009b2:	605a      	str	r2, [r3, #4]
    dst->spiPosTemp=0;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
    dst->spiPosTemp+=dst->rxBuffer<<8;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	68da      	ldr	r2, [r3, #12]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	785b      	ldrb	r3, [r3, #1]
 80009c2:	021b      	lsls	r3, r3, #8
 80009c4:	441a      	add	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	60da      	str	r2, [r3, #12]
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	58020c00 	.word	0x58020c00
 80009d8:	240007c8 	.word	0x240007c8
 80009dc:	240000dc 	.word	0x240000dc

080009e0 <getPosSPI3>:
  }


}
void getPosSPI3(spiAbsoluteEncoder *dst)  //Timer
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af02      	add	r7, sp, #8
 80009e6:	6078      	str	r0, [r7, #4]
  SPI3_OPEN;
 80009e8:	2200      	movs	r2, #0
 80009ea:	2110      	movs	r1, #16
 80009ec:	482e      	ldr	r0, [pc, #184]	; (8000aa8 <getPosSPI3+0xc8>)
 80009ee:	f007 fe73 	bl	80086d8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi3,&(dst->txData),&(dst->rxBuffer),1,1); ////////////1바이트씩 주고 받음
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	1c5a      	adds	r2, r3, #1
 80009f8:	2301      	movs	r3, #1
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2301      	movs	r3, #1
 80009fe:	482b      	ldr	r0, [pc, #172]	; (8000aac <getPosSPI3+0xcc>)
 8000a00:	f00a fe42 	bl	800b688 <HAL_SPI_TransmitReceive>
  SPI3_CLOSE;
 8000a04:	2201      	movs	r2, #1
 8000a06:	2110      	movs	r1, #16
 8000a08:	4827      	ldr	r0, [pc, #156]	; (8000aa8 <getPosSPI3+0xc8>)
 8000a0a:	f007 fe65 	bl	80086d8 <HAL_GPIO_WritePin>
  //HAL_Delay(2);

  if(dst->rxBuffer==ready_op && dst->spiFlag==0)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	785b      	ldrb	r3, [r3, #1]
 8000a12:	2ba5      	cmp	r3, #165	; 0xa5
 8000a14:	d10b      	bne.n	8000a2e <getPosSPI3+0x4e>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d107      	bne.n	8000a2e <getPosSPI3+0x4e>
  {
	  encoder_header_test++;
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <getPosSPI3+0xd0>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	3301      	adds	r3, #1
 8000a24:	4a22      	ldr	r2, [pc, #136]	; (8000ab0 <getPosSPI3+0xd0>)
 8000a26:	6013      	str	r3, [r2, #0]
    dst->txData=rd_pos;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2210      	movs	r2, #16
 8000a2c:	701a      	strb	r2, [r3, #0]
  }

  if(dst->rxBuffer==rd_pos)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	785b      	ldrb	r3, [r3, #1]
 8000a32:	2b10      	cmp	r3, #16
 8000a34:	d105      	bne.n	8000a42 <getPosSPI3+0x62>
  {
     dst->txData=nop_a5;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
     dst->spiFlag=1;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2201      	movs	r2, #1
 8000a40:	605a      	str	r2, [r3, #4]
  }

 if(dst->spiFlag==2)        //LSB
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d113      	bne.n	8000a72 <getPosSPI3+0x92>
  {
    dst->spiFlag=0;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	605a      	str	r2, [r3, #4]

    dst->spiPosTemp+=dst->rxBuffer;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	7852      	ldrb	r2, [r2, #1]
 8000a58:	441a      	add	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	60da      	str	r2, [r3, #12]

    if(dst->spiPosTemp<=4095)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a66:	da1a      	bge.n	8000a9e <getPosSPI3+0xbe>
      dst->spiPos=dst->spiPosTemp;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	68da      	ldr	r2, [r3, #12]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
    dst->spiPosTemp=0;
    dst->spiPosTemp+=dst->rxBuffer<<8;
  }


}
 8000a70:	e015      	b.n	8000a9e <getPosSPI3+0xbe>
  else if(dst->spiFlag==1&&dst->rxBuffer!=rd_pos) //MSB
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d111      	bne.n	8000a9e <getPosSPI3+0xbe>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	785b      	ldrb	r3, [r3, #1]
 8000a7e:	2b10      	cmp	r3, #16
 8000a80:	d00d      	beq.n	8000a9e <getPosSPI3+0xbe>
    dst->spiFlag=2;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2202      	movs	r2, #2
 8000a86:	605a      	str	r2, [r3, #4]
    dst->spiPosTemp=0;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
    dst->spiPosTemp+=dst->rxBuffer<<8;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	68da      	ldr	r2, [r3, #12]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	785b      	ldrb	r3, [r3, #1]
 8000a96:	021b      	lsls	r3, r3, #8
 8000a98:	441a      	add	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	60da      	str	r2, [r3, #12]
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	58020c00 	.word	0x58020c00
 8000aac:	240008d8 	.word	0x240008d8
 8000ab0:	240000dc 	.word	0x240000dc

08000ab4 <getPosSPI5>:
  }


}
void getPosSPI5(spiAbsoluteEncoder *dst)  //Timer
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af02      	add	r7, sp, #8
 8000aba:	6078      	str	r0, [r7, #4]
  SPI5_OPEN;
 8000abc:	2200      	movs	r2, #0
 8000abe:	2104      	movs	r1, #4
 8000ac0:	482e      	ldr	r0, [pc, #184]	; (8000b7c <getPosSPI5+0xc8>)
 8000ac2:	f007 fe09 	bl	80086d8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi5,&(dst->txData),&(dst->rxBuffer),1,1); ////////////1바이트씩 주고 받음
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	2301      	movs	r3, #1
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	482b      	ldr	r0, [pc, #172]	; (8000b80 <getPosSPI5+0xcc>)
 8000ad4:	f00a fdd8 	bl	800b688 <HAL_SPI_TransmitReceive>
  SPI5_CLOSE;
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2104      	movs	r1, #4
 8000adc:	4827      	ldr	r0, [pc, #156]	; (8000b7c <getPosSPI5+0xc8>)
 8000ade:	f007 fdfb 	bl	80086d8 <HAL_GPIO_WritePin>
  //HAL_Delay(2);

  if(dst->rxBuffer==ready_op && dst->spiFlag==0)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	785b      	ldrb	r3, [r3, #1]
 8000ae6:	2ba5      	cmp	r3, #165	; 0xa5
 8000ae8:	d10b      	bne.n	8000b02 <getPosSPI5+0x4e>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d107      	bne.n	8000b02 <getPosSPI5+0x4e>
  {
	  encoder_header_test++;
 8000af2:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <getPosSPI5+0xd0>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	3301      	adds	r3, #1
 8000af8:	4a22      	ldr	r2, [pc, #136]	; (8000b84 <getPosSPI5+0xd0>)
 8000afa:	6013      	str	r3, [r2, #0]
    dst->txData=rd_pos;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2210      	movs	r2, #16
 8000b00:	701a      	strb	r2, [r3, #0]
  }

  if(dst->rxBuffer==rd_pos)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	785b      	ldrb	r3, [r3, #1]
 8000b06:	2b10      	cmp	r3, #16
 8000b08:	d105      	bne.n	8000b16 <getPosSPI5+0x62>
  {
     dst->txData=nop_a5;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
     dst->spiFlag=1;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2201      	movs	r2, #1
 8000b14:	605a      	str	r2, [r3, #4]
  }

 if(dst->spiFlag==2)        //LSB
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d113      	bne.n	8000b46 <getPosSPI5+0x92>
  {
    dst->spiFlag=0;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]

    dst->spiPosTemp+=dst->rxBuffer;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	7852      	ldrb	r2, [r2, #1]
 8000b2c:	441a      	add	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	60da      	str	r2, [r3, #12]

    if(dst->spiPosTemp<=4095)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b3a:	da1a      	bge.n	8000b72 <getPosSPI5+0xbe>
      dst->spiPos=dst->spiPosTemp;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	68da      	ldr	r2, [r3, #12]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	609a      	str	r2, [r3, #8]
    dst->spiPosTemp=0;
    dst->spiPosTemp+=dst->rxBuffer<<8;
  }


}
 8000b44:	e015      	b.n	8000b72 <getPosSPI5+0xbe>
  else if(dst->spiFlag==1&&dst->rxBuffer!=rd_pos) //MSB
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d111      	bne.n	8000b72 <getPosSPI5+0xbe>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	785b      	ldrb	r3, [r3, #1]
 8000b52:	2b10      	cmp	r3, #16
 8000b54:	d00d      	beq.n	8000b72 <getPosSPI5+0xbe>
    dst->spiFlag=2;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2202      	movs	r2, #2
 8000b5a:	605a      	str	r2, [r3, #4]
    dst->spiPosTemp=0;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
    dst->spiPosTemp+=dst->rxBuffer<<8;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	68da      	ldr	r2, [r3, #12]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	785b      	ldrb	r3, [r3, #1]
 8000b6a:	021b      	lsls	r3, r3, #8
 8000b6c:	441a      	add	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	60da      	str	r2, [r3, #12]
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	58020c00 	.word	0x58020c00
 8000b80:	240009e8 	.word	0x240009e8
 8000b84:	240000dc 	.word	0x240000dc

08000b88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <MX_DMA_Init+0x6c>)
 8000b90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b94:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <MX_DMA_Init+0x6c>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_DMA_Init+0x6c>)
 8000ba0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	200b      	movs	r0, #11
 8000bb2:	f003 fb3c 	bl	800422e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bb6:	200b      	movs	r0, #11
 8000bb8:	f003 fb53 	bl	8004262 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	200c      	movs	r0, #12
 8000bc2:	f003 fb34 	bl	800422e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000bc6:	200c      	movs	r0, #12
 8000bc8:	f003 fb4b 	bl	8004262 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	200d      	movs	r0, #13
 8000bd2:	f003 fb2c 	bl	800422e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000bd6:	200d      	movs	r0, #13
 8000bd8:	f003 fb43 	bl	8004262 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2100      	movs	r1, #0
 8000be0:	200e      	movs	r0, #14
 8000be2:	f003 fb24 	bl	800422e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000be6:	200e      	movs	r0, #14
 8000be8:	f003 fb3b 	bl	8004262 <HAL_NVIC_EnableIRQ>

}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	58024400 	.word	0x58024400

08000bf8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000bfc:	4b2f      	ldr	r3, [pc, #188]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000bfe:	4a30      	ldr	r2, [pc, #192]	; (8000cc0 <MX_FDCAN1_Init+0xc8>)
 8000c00:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000c02:	4b2e      	ldr	r3, [pc, #184]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c04:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c08:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c0a:	4b2c      	ldr	r3, [pc, #176]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000c10:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c16:	4b29      	ldr	r3, [pc, #164]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000c1c:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 8000c28:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 20;
 8000c2e:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c30:	2214      	movs	r2, #20
 8000c32:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 8000c34:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c36:	2203      	movs	r2, #3
 8000c38:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000c3a:	4b20      	ldr	r3, [pc, #128]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000c40:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 6;
 8000c46:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c48:	2206      	movs	r2, #6
 8000c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000c52:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 20;
 8000c58:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c5a:	2214      	movs	r2, #20
 8000c5c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 8;
 8000c5e:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c60:	2208      	movs	r2, #8
 8000c62:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 4;
 8000c64:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c66:	2204      	movs	r2, #4
 8000c68:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 8000c6a:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c6c:	2212      	movs	r2, #18
 8000c6e:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 4;
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c72:	2204      	movs	r2, #4
 8000c74:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_64;
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c78:	2212      	movs	r2, #18
 8000c7a:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 4;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c7e:	2204      	movs	r2, #4
 8000c80:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_64;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c84:	2212      	movs	r2, #18
 8000c86:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 4;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c8a:	2204      	movs	r2, #4
 8000c8c:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 4;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c90:	2204      	movs	r2, #4
 8000c92:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 4;
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c96:	2204      	movs	r2, #4
 8000c98:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000ca2:	2212      	movs	r2, #18
 8000ca4:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_FDCAN1_Init+0xc4>)
 8000ca8:	f006 f932 	bl	8006f10 <HAL_FDCAN_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000cb2:	f000 ff35 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	240000e0 	.word	0x240000e0
 8000cc0:	4000a000 	.word	0x4000a000

08000cc4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b0ba      	sub	sp, #232	; 0xe8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	22c0      	movs	r2, #192	; 0xc0
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f00d fb95 	bl	800e414 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a33      	ldr	r2, [pc, #204]	; (8000dbc <HAL_FDCAN_MspInit+0xf8>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d15f      	bne.n	8000db4 <HAL_FDCAN_MspInit+0xf0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000cf4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000d00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f008 fd6b 	bl	80097e8 <HAL_RCCEx_PeriphCLKConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000d18:	f000 ff02 	bl	8001b20 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d1c:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <HAL_FDCAN_MspInit+0xfc>)
 8000d1e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000d22:	4a27      	ldr	r2, [pc, #156]	; (8000dc0 <HAL_FDCAN_MspInit+0xfc>)
 8000d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d28:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000d2c:	4b24      	ldr	r3, [pc, #144]	; (8000dc0 <HAL_FDCAN_MspInit+0xfc>)
 8000d2e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <HAL_FDCAN_MspInit+0xfc>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	4a1f      	ldr	r2, [pc, #124]	; (8000dc0 <HAL_FDCAN_MspInit+0xfc>)
 8000d42:	f043 0302 	orr.w	r3, r3, #2
 8000d46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4a:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <HAL_FDCAN_MspInit+0xfc>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d50:	f003 0302 	and.w	r3, r3, #2
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000d72:	2309      	movs	r3, #9
 8000d74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4811      	ldr	r0, [pc, #68]	; (8000dc4 <HAL_FDCAN_MspInit+0x100>)
 8000d80:	f007 fafa 	bl	8008378 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2100      	movs	r1, #0
 8000d88:	2013      	movs	r0, #19
 8000d8a:	f003 fa50 	bl	800422e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000d8e:	2013      	movs	r0, #19
 8000d90:	f003 fa67 	bl	8004262 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2100      	movs	r1, #0
 8000d98:	2015      	movs	r0, #21
 8000d9a:	f003 fa48 	bl	800422e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000d9e:	2015      	movs	r0, #21
 8000da0:	f003 fa5f 	bl	8004262 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN_CAL_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	203f      	movs	r0, #63	; 0x3f
 8000daa:	f003 fa40 	bl	800422e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN_CAL_IRQn);
 8000dae:	203f      	movs	r0, #63	; 0x3f
 8000db0:	f003 fa57 	bl	8004262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000db4:	bf00      	nop
 8000db6:	37e8      	adds	r7, #232	; 0xe8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	4000a000 	.word	0x4000a000
 8000dc0:	58024400 	.word	0x58024400
 8000dc4:	58020400 	.word	0x58020400

08000dc8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08e      	sub	sp, #56	; 0x38
 8000dcc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dce:	4bc1      	ldr	r3, [pc, #772]	; (80010d4 <MX_GPIO_Init+0x30c>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd4:	4abf      	ldr	r2, [pc, #764]	; (80010d4 <MX_GPIO_Init+0x30c>)
 8000dd6:	f043 0310 	orr.w	r3, r3, #16
 8000dda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dde:	4bbd      	ldr	r3, [pc, #756]	; (80010d4 <MX_GPIO_Init+0x30c>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de4:	f003 0310 	and.w	r3, r3, #16
 8000de8:	623b      	str	r3, [r7, #32]
 8000dea:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dec:	4bb9      	ldr	r3, [pc, #740]	; (80010d4 <MX_GPIO_Init+0x30c>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df2:	4ab8      	ldr	r2, [pc, #736]	; (80010d4 <MX_GPIO_Init+0x30c>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfc:	4bb5      	ldr	r3, [pc, #724]	; (80010d4 <MX_GPIO_Init+0x30c>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	61fb      	str	r3, [r7, #28]
 8000e08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e0a:	4bb2      	ldr	r3, [pc, #712]	; (80010d4 <MX_GPIO_Init+0x30c>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e10:	4ab0      	ldr	r2, [pc, #704]	; (80010d4 <MX_GPIO_Init+0x30c>)
 8000e12:	f043 0320 	orr.w	r3, r3, #32
 8000e16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1a:	4bae      	ldr	r3, [pc, #696]	; (80010d4 <MX_GPIO_Init+0x30c>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e20:	f003 0320 	and.w	r3, r3, #32
 8000e24:	61bb      	str	r3, [r7, #24]
 8000e26:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e28:	4baa      	ldr	r3, [pc, #680]	; (80010d4 <MX_GPIO_Init+0x30c>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2e:	4aa9      	ldr	r2, [pc, #676]	; (80010d4 <MX_GPIO_Init+0x30c>)
 8000e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e38:	4ba6      	ldr	r3, [pc, #664]	; (80010d4 <MX_GPIO_Init+0x30c>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4ba3      	ldr	r3, [pc, #652]	; (80010d4 <MX_GPIO_Init+0x30c>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4c:	4aa1      	ldr	r2, [pc, #644]	; (80010d4 <MX_GPIO_Init+0x30c>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e56:	4b9f      	ldr	r3, [pc, #636]	; (80010d4 <MX_GPIO_Init+0x30c>)
 8000e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e64:	4b9b      	ldr	r3, [pc, #620]	; (80010d4 <MX_GPIO_Init+0x30c>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6a:	4a9a      	ldr	r2, [pc, #616]	; (80010d4 <MX_GPIO_Init+0x30c>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e74:	4b97      	ldr	r3, [pc, #604]	; (80010d4 <MX_GPIO_Init+0x30c>)
 8000e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e82:	4b94      	ldr	r3, [pc, #592]	; (80010d4 <MX_GPIO_Init+0x30c>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e88:	4a92      	ldr	r2, [pc, #584]	; (80010d4 <MX_GPIO_Init+0x30c>)
 8000e8a:	f043 0308 	orr.w	r3, r3, #8
 8000e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e92:	4b90      	ldr	r3, [pc, #576]	; (80010d4 <MX_GPIO_Init+0x30c>)
 8000e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e98:	f003 0308 	and.w	r3, r3, #8
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ea0:	4b8c      	ldr	r3, [pc, #560]	; (80010d4 <MX_GPIO_Init+0x30c>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea6:	4a8b      	ldr	r2, [pc, #556]	; (80010d4 <MX_GPIO_Init+0x30c>)
 8000ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb0:	4b88      	ldr	r3, [pc, #544]	; (80010d4 <MX_GPIO_Init+0x30c>)
 8000eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]

    /////////////////////
    //SPI1 GPIO SETTING//
    /////////////////////
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2140      	movs	r1, #64	; 0x40
 8000ed2:	4881      	ldr	r0, [pc, #516]	; (80010d8 <MX_GPIO_Init+0x310>)
 8000ed4:	f007 fc00 	bl	80086d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000ede:	487f      	ldr	r0, [pc, #508]	; (80010dc <MX_GPIO_Init+0x314>)
 8000ee0:	f007 fbfa 	bl	80086d8 <HAL_GPIO_WritePin>


    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ee4:	2340      	movs	r3, #64	; 0x40
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4877      	ldr	r0, [pc, #476]	; (80010d8 <MX_GPIO_Init+0x310>)
 8000efc:	f007 fa3c 	bl	8008378 <HAL_GPIO_Init>


    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000f00:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f16:	4619      	mov	r1, r3
 8000f18:	4870      	ldr	r0, [pc, #448]	; (80010dc <MX_GPIO_Init+0x314>)
 8000f1a:	f007 fa2d 	bl	8008378 <HAL_GPIO_Init>

    /////////////////////
    //SPI2 GPIO SETTING//
    /////////////////////

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2120      	movs	r1, #32
 8000f22:	486d      	ldr	r0, [pc, #436]	; (80010d8 <MX_GPIO_Init+0x310>)
 8000f24:	f007 fbd8 	bl	80086d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000f2e:	486c      	ldr	r0, [pc, #432]	; (80010e0 <MX_GPIO_Init+0x318>)
 8000f30:	f007 fbd2 	bl	80086d8 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f34:	2320      	movs	r3, #32
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f40:	2302      	movs	r3, #2
 8000f42:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4863      	ldr	r0, [pc, #396]	; (80010d8 <MX_GPIO_Init+0x310>)
 8000f4c:	f007 fa14 	bl	8008378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000f50:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f66:	4619      	mov	r1, r3
 8000f68:	485d      	ldr	r0, [pc, #372]	; (80010e0 <MX_GPIO_Init+0x318>)
 8000f6a:	f007 fa05 	bl	8008378 <HAL_GPIO_Init>

    /////////////////////
    //SPI3 GPIO SETTING//
    /////////////////////
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2110      	movs	r1, #16
 8000f72:	4859      	ldr	r0, [pc, #356]	; (80010d8 <MX_GPIO_Init+0x310>)
 8000f74:	f007 fbb0 	bl	80086d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000f7e:	4858      	ldr	r0, [pc, #352]	; (80010e0 <MX_GPIO_Init+0x318>)
 8000f80:	f007 fbaa 	bl	80086d8 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f84:	2310      	movs	r3, #16
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f90:	2302      	movs	r3, #2
 8000f92:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f98:	4619      	mov	r1, r3
 8000f9a:	484f      	ldr	r0, [pc, #316]	; (80010d8 <MX_GPIO_Init+0x310>)
 8000f9c:	f007 f9ec 	bl	8008378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fa0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4849      	ldr	r0, [pc, #292]	; (80010e0 <MX_GPIO_Init+0x318>)
 8000fba:	f007 f9dd 	bl	8008378 <HAL_GPIO_Init>


    /////////////////////
    //SPI4 GPIO SETTING//
    /////////////////////
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2108      	movs	r1, #8
 8000fc2:	4845      	ldr	r0, [pc, #276]	; (80010d8 <MX_GPIO_Init+0x310>)
 8000fc4:	f007 fb88 	bl	80086d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000fce:	4844      	ldr	r0, [pc, #272]	; (80010e0 <MX_GPIO_Init+0x318>)
 8000fd0:	f007 fb82 	bl	80086d8 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fd4:	2308      	movs	r3, #8
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe8:	4619      	mov	r1, r3
 8000fea:	483b      	ldr	r0, [pc, #236]	; (80010d8 <MX_GPIO_Init+0x310>)
 8000fec:	f007 f9c4 	bl	8008378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ff0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001006:	4619      	mov	r1, r3
 8001008:	4835      	ldr	r0, [pc, #212]	; (80010e0 <MX_GPIO_Init+0x318>)
 800100a:	f007 f9b5 	bl	8008378 <HAL_GPIO_Init>

    /////////////////////
    //SPI5 GPIO SETTING//
    /////////////////////

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	2104      	movs	r1, #4
 8001012:	4831      	ldr	r0, [pc, #196]	; (80010d8 <MX_GPIO_Init+0x310>)
 8001014:	f007 fb60 	bl	80086d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800101e:	4830      	ldr	r0, [pc, #192]	; (80010e0 <MX_GPIO_Init+0x318>)
 8001020:	f007 fb5a 	bl	80086d8 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001024:	2304      	movs	r3, #4
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001028:	2301      	movs	r3, #1
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001030:	2302      	movs	r3, #2
 8001032:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001038:	4619      	mov	r1, r3
 800103a:	4827      	ldr	r0, [pc, #156]	; (80010d8 <MX_GPIO_Init+0x310>)
 800103c:	f007 f99c 	bl	8008378 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001040:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001046:	2301      	movs	r3, #1
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001056:	4619      	mov	r1, r3
 8001058:	4821      	ldr	r0, [pc, #132]	; (80010e0 <MX_GPIO_Init+0x318>)
 800105a:	f007 f98d 	bl	8008378 <HAL_GPIO_Init>

    /////////////////////
    //SPI6 GPIO SETTING//
    /////////////////////

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	2102      	movs	r1, #2
 8001062:	481d      	ldr	r0, [pc, #116]	; (80010d8 <MX_GPIO_Init+0x310>)
 8001064:	f007 fb38 	bl	80086d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800106e:	481c      	ldr	r0, [pc, #112]	; (80010e0 <MX_GPIO_Init+0x318>)
 8001070:	f007 fb32 	bl	80086d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800107a:	481a      	ldr	r0, [pc, #104]	; (80010e4 <MX_GPIO_Init+0x31c>)
 800107c:	f007 fb2c 	bl	80086d8 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001080:	2302      	movs	r3, #2
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800108c:	2302      	movs	r3, #2
 800108e:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001094:	4619      	mov	r1, r3
 8001096:	4810      	ldr	r0, [pc, #64]	; (80010d8 <MX_GPIO_Init+0x310>)
 8001098:	f007 f96e 	bl	8008378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800109c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b2:	4619      	mov	r1, r3
 80010b4:	480a      	ldr	r0, [pc, #40]	; (80010e0 <MX_GPIO_Init+0x318>)
 80010b6:	f007 f95f 	bl	8008378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d0:	4619      	mov	r1, r3
 80010d2:	e009      	b.n	80010e8 <MX_GPIO_Init+0x320>
 80010d4:	58024400 	.word	0x58024400
 80010d8:	58020c00 	.word	0x58020c00
 80010dc:	58021400 	.word	0x58021400
 80010e0:	58021000 	.word	0x58021000
 80010e4:	58020400 	.word	0x58020400
 80010e8:	4803      	ldr	r0, [pc, #12]	; (80010f8 <MX_GPIO_Init+0x330>)
 80010ea:	f007 f945 	bl	8008378 <HAL_GPIO_Init>


}
 80010ee:	bf00      	nop
 80010f0:	3738      	adds	r7, #56	; 0x38
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	58020400 	.word	0x58020400

080010fc <HAL_FDCAN_RxFifo0Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]

	if (HAL_OK
			== HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader,
 8001106:	4b3b      	ldr	r3, [pc, #236]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8001108:	4a3b      	ldr	r2, [pc, #236]	; (80011f8 <HAL_FDCAN_RxFifo0Callback+0xfc>)
 800110a:	2140      	movs	r1, #64	; 0x40
 800110c:	483b      	ldr	r0, [pc, #236]	; (80011fc <HAL_FDCAN_RxFifo0Callback+0x100>)
 800110e:	f006 fa07 	bl	8007520 <HAL_FDCAN_GetRxMessage>
 8001112:	4603      	mov	r3, r0
	if (HAL_OK
 8001114:	2b00      	cmp	r3, #0
 8001116:	f040 817f 	bne.w	8001418 <HAL_FDCAN_RxFifo0Callback+0x31c>
					RxData_From_Node2)) {
		if (RxHeader.Identifier == 385) {
 800111a:	4b37      	ldr	r3, [pc, #220]	; (80011f8 <HAL_FDCAN_RxFifo0Callback+0xfc>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f240 1281 	movw	r2, #385	; 0x181
 8001122:	4293      	cmp	r3, r2
 8001124:	d130      	bne.n	8001188 <HAL_FDCAN_RxFifo0Callback+0x8c>
			Motor1[0] = RxData_From_Node2[0];
 8001126:	4b33      	ldr	r3, [pc, #204]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8001128:	781a      	ldrb	r2, [r3, #0]
 800112a:	4b35      	ldr	r3, [pc, #212]	; (8001200 <HAL_FDCAN_RxFifo0Callback+0x104>)
 800112c:	701a      	strb	r2, [r3, #0]
			Motor1[1] = RxData_From_Node2[1];
 800112e:	4b31      	ldr	r3, [pc, #196]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8001130:	785a      	ldrb	r2, [r3, #1]
 8001132:	4b33      	ldr	r3, [pc, #204]	; (8001200 <HAL_FDCAN_RxFifo0Callback+0x104>)
 8001134:	705a      	strb	r2, [r3, #1]
			Motor1[2] = RxData_From_Node2[2];
 8001136:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8001138:	789a      	ldrb	r2, [r3, #2]
 800113a:	4b31      	ldr	r3, [pc, #196]	; (8001200 <HAL_FDCAN_RxFifo0Callback+0x104>)
 800113c:	709a      	strb	r2, [r3, #2]
			Motor1[3] = RxData_From_Node2[3];
 800113e:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8001140:	78da      	ldrb	r2, [r3, #3]
 8001142:	4b2f      	ldr	r3, [pc, #188]	; (8001200 <HAL_FDCAN_RxFifo0Callback+0x104>)
 8001144:	70da      	strb	r2, [r3, #3]
			Motor1[4] = RxData_From_Node2[4];
 8001146:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8001148:	791a      	ldrb	r2, [r3, #4]
 800114a:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <HAL_FDCAN_RxFifo0Callback+0x104>)
 800114c:	711a      	strb	r2, [r3, #4]
			Motor1[5] = RxData_From_Node2[5];
 800114e:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8001150:	795a      	ldrb	r2, [r3, #5]
 8001152:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <HAL_FDCAN_RxFifo0Callback+0x104>)
 8001154:	715a      	strb	r2, [r3, #5]
			Motor1[6] = RxData_From_Node2[6];
 8001156:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8001158:	799a      	ldrb	r2, [r3, #6]
 800115a:	4b29      	ldr	r3, [pc, #164]	; (8001200 <HAL_FDCAN_RxFifo0Callback+0x104>)
 800115c:	719a      	strb	r2, [r3, #6]
			Motor1[7] = RxData_From_Node2[7];
 800115e:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8001160:	79da      	ldrb	r2, [r3, #7]
 8001162:	4b27      	ldr	r3, [pc, #156]	; (8001200 <HAL_FDCAN_RxFifo0Callback+0x104>)
 8001164:	71da      	strb	r2, [r3, #7]
			Motor1[8] = RxData_From_Node2[8];
 8001166:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8001168:	7a1a      	ldrb	r2, [r3, #8]
 800116a:	4b25      	ldr	r3, [pc, #148]	; (8001200 <HAL_FDCAN_RxFifo0Callback+0x104>)
 800116c:	721a      	strb	r2, [r3, #8]
			Motor1[9] = RxData_From_Node2[9];
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8001170:	7a5a      	ldrb	r2, [r3, #9]
 8001172:	4b23      	ldr	r3, [pc, #140]	; (8001200 <HAL_FDCAN_RxFifo0Callback+0x104>)
 8001174:	725a      	strb	r2, [r3, #9]
			Motor1[10] = RxData_From_Node2[10];
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8001178:	7a9a      	ldrb	r2, [r3, #10]
 800117a:	4b21      	ldr	r3, [pc, #132]	; (8001200 <HAL_FDCAN_RxFifo0Callback+0x104>)
 800117c:	729a      	strb	r2, [r3, #10]
			Motor1[11] = RxData_From_Node2[11];
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8001180:	7ada      	ldrb	r2, [r3, #11]
 8001182:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <HAL_FDCAN_RxFifo0Callback+0x104>)
 8001184:	72da      	strb	r2, [r3, #11]
 8001186:	e075      	b.n	8001274 <HAL_FDCAN_RxFifo0Callback+0x178>

		} else if (RxHeader.Identifier == 386) {
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <HAL_FDCAN_RxFifo0Callback+0xfc>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8001190:	d13a      	bne.n	8001208 <HAL_FDCAN_RxFifo0Callback+0x10c>
			Motor2[0] = RxData_From_Node2[0];
 8001192:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <HAL_FDCAN_RxFifo0Callback+0x108>)
 8001198:	701a      	strb	r2, [r3, #0]
			Motor2[1] = RxData_From_Node2[1];
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 800119c:	785a      	ldrb	r2, [r3, #1]
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_FDCAN_RxFifo0Callback+0x108>)
 80011a0:	705a      	strb	r2, [r3, #1]
			Motor2[2] = RxData_From_Node2[2];
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 80011a4:	789a      	ldrb	r2, [r3, #2]
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_FDCAN_RxFifo0Callback+0x108>)
 80011a8:	709a      	strb	r2, [r3, #2]
			Motor2[3] = RxData_From_Node2[3];
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 80011ac:	78da      	ldrb	r2, [r3, #3]
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_FDCAN_RxFifo0Callback+0x108>)
 80011b0:	70da      	strb	r2, [r3, #3]
			Motor2[4] = RxData_From_Node2[4];
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 80011b4:	791a      	ldrb	r2, [r3, #4]
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <HAL_FDCAN_RxFifo0Callback+0x108>)
 80011b8:	711a      	strb	r2, [r3, #4]
			Motor2[5] = RxData_From_Node2[5];
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 80011bc:	795a      	ldrb	r2, [r3, #5]
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_FDCAN_RxFifo0Callback+0x108>)
 80011c0:	715a      	strb	r2, [r3, #5]
			Motor2[6] = RxData_From_Node2[6];
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 80011c4:	799a      	ldrb	r2, [r3, #6]
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <HAL_FDCAN_RxFifo0Callback+0x108>)
 80011c8:	719a      	strb	r2, [r3, #6]
			Motor2[7] = RxData_From_Node2[7];
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 80011cc:	79da      	ldrb	r2, [r3, #7]
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <HAL_FDCAN_RxFifo0Callback+0x108>)
 80011d0:	71da      	strb	r2, [r3, #7]
			Motor2[8] = RxData_From_Node2[8];
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 80011d4:	7a1a      	ldrb	r2, [r3, #8]
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_FDCAN_RxFifo0Callback+0x108>)
 80011d8:	721a      	strb	r2, [r3, #8]
			Motor2[9] = RxData_From_Node2[9];
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 80011dc:	7a5a      	ldrb	r2, [r3, #9]
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_FDCAN_RxFifo0Callback+0x108>)
 80011e0:	725a      	strb	r2, [r3, #9]
			Motor2[10] = RxData_From_Node2[10];
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 80011e4:	7a9a      	ldrb	r2, [r3, #10]
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <HAL_FDCAN_RxFifo0Callback+0x108>)
 80011e8:	729a      	strb	r2, [r3, #10]
			Motor2[11] = RxData_From_Node2[11];
 80011ea:	4b02      	ldr	r3, [pc, #8]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 80011ec:	7ada      	ldrb	r2, [r3, #11]
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_FDCAN_RxFifo0Callback+0x108>)
 80011f0:	72da      	strb	r2, [r3, #11]
 80011f2:	e03f      	b.n	8001274 <HAL_FDCAN_RxFifo0Callback+0x178>
 80011f4:	24000250 	.word	0x24000250
 80011f8:	240001c4 	.word	0x240001c4
 80011fc:	240000e0 	.word	0x240000e0
 8001200:	24000280 	.word	0x24000280
 8001204:	2400028c 	.word	0x2400028c

		} else if (RxHeader.Identifier == 387) {
 8001208:	4b85      	ldr	r3, [pc, #532]	; (8001420 <HAL_FDCAN_RxFifo0Callback+0x324>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f240 1283 	movw	r2, #387	; 0x183
 8001210:	4293      	cmp	r3, r2
 8001212:	d12f      	bne.n	8001274 <HAL_FDCAN_RxFifo0Callback+0x178>
			Motor3[0] = RxData_From_Node2[0];
 8001214:	4b83      	ldr	r3, [pc, #524]	; (8001424 <HAL_FDCAN_RxFifo0Callback+0x328>)
 8001216:	781a      	ldrb	r2, [r3, #0]
 8001218:	4b83      	ldr	r3, [pc, #524]	; (8001428 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 800121a:	701a      	strb	r2, [r3, #0]
			Motor3[1] = RxData_From_Node2[1];
 800121c:	4b81      	ldr	r3, [pc, #516]	; (8001424 <HAL_FDCAN_RxFifo0Callback+0x328>)
 800121e:	785a      	ldrb	r2, [r3, #1]
 8001220:	4b81      	ldr	r3, [pc, #516]	; (8001428 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 8001222:	705a      	strb	r2, [r3, #1]
			Motor3[2] = RxData_From_Node2[2];
 8001224:	4b7f      	ldr	r3, [pc, #508]	; (8001424 <HAL_FDCAN_RxFifo0Callback+0x328>)
 8001226:	789a      	ldrb	r2, [r3, #2]
 8001228:	4b7f      	ldr	r3, [pc, #508]	; (8001428 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 800122a:	709a      	strb	r2, [r3, #2]
			Motor3[3] = RxData_From_Node2[3];
 800122c:	4b7d      	ldr	r3, [pc, #500]	; (8001424 <HAL_FDCAN_RxFifo0Callback+0x328>)
 800122e:	78da      	ldrb	r2, [r3, #3]
 8001230:	4b7d      	ldr	r3, [pc, #500]	; (8001428 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 8001232:	70da      	strb	r2, [r3, #3]
			Motor3[4] = RxData_From_Node2[4];
 8001234:	4b7b      	ldr	r3, [pc, #492]	; (8001424 <HAL_FDCAN_RxFifo0Callback+0x328>)
 8001236:	791a      	ldrb	r2, [r3, #4]
 8001238:	4b7b      	ldr	r3, [pc, #492]	; (8001428 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 800123a:	711a      	strb	r2, [r3, #4]
			Motor3[5] = RxData_From_Node2[5];
 800123c:	4b79      	ldr	r3, [pc, #484]	; (8001424 <HAL_FDCAN_RxFifo0Callback+0x328>)
 800123e:	795a      	ldrb	r2, [r3, #5]
 8001240:	4b79      	ldr	r3, [pc, #484]	; (8001428 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 8001242:	715a      	strb	r2, [r3, #5]
			Motor3[6] = RxData_From_Node2[6];
 8001244:	4b77      	ldr	r3, [pc, #476]	; (8001424 <HAL_FDCAN_RxFifo0Callback+0x328>)
 8001246:	799a      	ldrb	r2, [r3, #6]
 8001248:	4b77      	ldr	r3, [pc, #476]	; (8001428 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 800124a:	719a      	strb	r2, [r3, #6]
			Motor3[7] = RxData_From_Node2[7];
 800124c:	4b75      	ldr	r3, [pc, #468]	; (8001424 <HAL_FDCAN_RxFifo0Callback+0x328>)
 800124e:	79da      	ldrb	r2, [r3, #7]
 8001250:	4b75      	ldr	r3, [pc, #468]	; (8001428 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 8001252:	71da      	strb	r2, [r3, #7]
			Motor3[8] = RxData_From_Node2[8];
 8001254:	4b73      	ldr	r3, [pc, #460]	; (8001424 <HAL_FDCAN_RxFifo0Callback+0x328>)
 8001256:	7a1a      	ldrb	r2, [r3, #8]
 8001258:	4b73      	ldr	r3, [pc, #460]	; (8001428 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 800125a:	721a      	strb	r2, [r3, #8]
			Motor3[9] = RxData_From_Node2[9];
 800125c:	4b71      	ldr	r3, [pc, #452]	; (8001424 <HAL_FDCAN_RxFifo0Callback+0x328>)
 800125e:	7a5a      	ldrb	r2, [r3, #9]
 8001260:	4b71      	ldr	r3, [pc, #452]	; (8001428 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 8001262:	725a      	strb	r2, [r3, #9]
			Motor3[10] = RxData_From_Node2[10];
 8001264:	4b6f      	ldr	r3, [pc, #444]	; (8001424 <HAL_FDCAN_RxFifo0Callback+0x328>)
 8001266:	7a9a      	ldrb	r2, [r3, #10]
 8001268:	4b6f      	ldr	r3, [pc, #444]	; (8001428 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 800126a:	729a      	strb	r2, [r3, #10]
			Motor3[11] = RxData_From_Node2[11];
 800126c:	4b6d      	ldr	r3, [pc, #436]	; (8001424 <HAL_FDCAN_RxFifo0Callback+0x328>)
 800126e:	7ada      	ldrb	r2, [r3, #11]
 8001270:	4b6d      	ldr	r3, [pc, #436]	; (8001428 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 8001272:	72da      	strb	r2, [r3, #11]
		}

		val_1[0] = (Motor1[0] << 0) | (Motor1[1] << 8) | (Motor1[2] << 16)
 8001274:	4b6d      	ldr	r3, [pc, #436]	; (800142c <HAL_FDCAN_RxFifo0Callback+0x330>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b6c      	ldr	r3, [pc, #432]	; (800142c <HAL_FDCAN_RxFifo0Callback+0x330>)
 800127c:	785b      	ldrb	r3, [r3, #1]
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	431a      	orrs	r2, r3
 8001282:	4b6a      	ldr	r3, [pc, #424]	; (800142c <HAL_FDCAN_RxFifo0Callback+0x330>)
 8001284:	789b      	ldrb	r3, [r3, #2]
 8001286:	041b      	lsls	r3, r3, #16
 8001288:	431a      	orrs	r2, r3
				| (Motor1[3] << 24);
 800128a:	4b68      	ldr	r3, [pc, #416]	; (800142c <HAL_FDCAN_RxFifo0Callback+0x330>)
 800128c:	78db      	ldrb	r3, [r3, #3]
 800128e:	061b      	lsls	r3, r3, #24
 8001290:	4313      	orrs	r3, r2
 8001292:	461a      	mov	r2, r3
		val_1[0] = (Motor1[0] << 0) | (Motor1[1] << 8) | (Motor1[2] << 16)
 8001294:	4b66      	ldr	r3, [pc, #408]	; (8001430 <HAL_FDCAN_RxFifo0Callback+0x334>)
 8001296:	601a      	str	r2, [r3, #0]
		val_1[1] = (Motor1[4] << 0) | (Motor1[5] << 8) | (Motor1[6] << 16)
 8001298:	4b64      	ldr	r3, [pc, #400]	; (800142c <HAL_FDCAN_RxFifo0Callback+0x330>)
 800129a:	791b      	ldrb	r3, [r3, #4]
 800129c:	461a      	mov	r2, r3
 800129e:	4b63      	ldr	r3, [pc, #396]	; (800142c <HAL_FDCAN_RxFifo0Callback+0x330>)
 80012a0:	795b      	ldrb	r3, [r3, #5]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	431a      	orrs	r2, r3
 80012a6:	4b61      	ldr	r3, [pc, #388]	; (800142c <HAL_FDCAN_RxFifo0Callback+0x330>)
 80012a8:	799b      	ldrb	r3, [r3, #6]
 80012aa:	041b      	lsls	r3, r3, #16
 80012ac:	431a      	orrs	r2, r3
				| (Motor1[7] << 24);
 80012ae:	4b5f      	ldr	r3, [pc, #380]	; (800142c <HAL_FDCAN_RxFifo0Callback+0x330>)
 80012b0:	79db      	ldrb	r3, [r3, #7]
 80012b2:	061b      	lsls	r3, r3, #24
 80012b4:	4313      	orrs	r3, r2
 80012b6:	461a      	mov	r2, r3
		val_1[1] = (Motor1[4] << 0) | (Motor1[5] << 8) | (Motor1[6] << 16)
 80012b8:	4b5d      	ldr	r3, [pc, #372]	; (8001430 <HAL_FDCAN_RxFifo0Callback+0x334>)
 80012ba:	605a      	str	r2, [r3, #4]
		val_1[2] = (Motor1[8] << 0) | (Motor1[9] << 8) | (Motor1[10] << 16)
 80012bc:	4b5b      	ldr	r3, [pc, #364]	; (800142c <HAL_FDCAN_RxFifo0Callback+0x330>)
 80012be:	7a1b      	ldrb	r3, [r3, #8]
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b5a      	ldr	r3, [pc, #360]	; (800142c <HAL_FDCAN_RxFifo0Callback+0x330>)
 80012c4:	7a5b      	ldrb	r3, [r3, #9]
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	431a      	orrs	r2, r3
 80012ca:	4b58      	ldr	r3, [pc, #352]	; (800142c <HAL_FDCAN_RxFifo0Callback+0x330>)
 80012cc:	7a9b      	ldrb	r3, [r3, #10]
 80012ce:	041b      	lsls	r3, r3, #16
 80012d0:	431a      	orrs	r2, r3
				| (Motor1[11] << 24);
 80012d2:	4b56      	ldr	r3, [pc, #344]	; (800142c <HAL_FDCAN_RxFifo0Callback+0x330>)
 80012d4:	7adb      	ldrb	r3, [r3, #11]
 80012d6:	061b      	lsls	r3, r3, #24
 80012d8:	4313      	orrs	r3, r2
 80012da:	461a      	mov	r2, r3
		val_1[2] = (Motor1[8] << 0) | (Motor1[9] << 8) | (Motor1[10] << 16)
 80012dc:	4b54      	ldr	r3, [pc, #336]	; (8001430 <HAL_FDCAN_RxFifo0Callback+0x334>)
 80012de:	609a      	str	r2, [r3, #8]

		val_2[0] = (Motor2[0] << 0) | (Motor2[1] << 8) | (Motor2[2] << 16)
 80012e0:	4b54      	ldr	r3, [pc, #336]	; (8001434 <HAL_FDCAN_RxFifo0Callback+0x338>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b53      	ldr	r3, [pc, #332]	; (8001434 <HAL_FDCAN_RxFifo0Callback+0x338>)
 80012e8:	785b      	ldrb	r3, [r3, #1]
 80012ea:	021b      	lsls	r3, r3, #8
 80012ec:	431a      	orrs	r2, r3
 80012ee:	4b51      	ldr	r3, [pc, #324]	; (8001434 <HAL_FDCAN_RxFifo0Callback+0x338>)
 80012f0:	789b      	ldrb	r3, [r3, #2]
 80012f2:	041b      	lsls	r3, r3, #16
 80012f4:	431a      	orrs	r2, r3
				| (Motor2[3] << 24);
 80012f6:	4b4f      	ldr	r3, [pc, #316]	; (8001434 <HAL_FDCAN_RxFifo0Callback+0x338>)
 80012f8:	78db      	ldrb	r3, [r3, #3]
 80012fa:	061b      	lsls	r3, r3, #24
 80012fc:	4313      	orrs	r3, r2
 80012fe:	461a      	mov	r2, r3
		val_2[0] = (Motor2[0] << 0) | (Motor2[1] << 8) | (Motor2[2] << 16)
 8001300:	4b4d      	ldr	r3, [pc, #308]	; (8001438 <HAL_FDCAN_RxFifo0Callback+0x33c>)
 8001302:	601a      	str	r2, [r3, #0]
		val_2[1] = (Motor2[4] << 0) | (Motor2[5] << 8) | (Motor2[6] << 16)
 8001304:	4b4b      	ldr	r3, [pc, #300]	; (8001434 <HAL_FDCAN_RxFifo0Callback+0x338>)
 8001306:	791b      	ldrb	r3, [r3, #4]
 8001308:	461a      	mov	r2, r3
 800130a:	4b4a      	ldr	r3, [pc, #296]	; (8001434 <HAL_FDCAN_RxFifo0Callback+0x338>)
 800130c:	795b      	ldrb	r3, [r3, #5]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	431a      	orrs	r2, r3
 8001312:	4b48      	ldr	r3, [pc, #288]	; (8001434 <HAL_FDCAN_RxFifo0Callback+0x338>)
 8001314:	799b      	ldrb	r3, [r3, #6]
 8001316:	041b      	lsls	r3, r3, #16
 8001318:	431a      	orrs	r2, r3
				| (Motor2[7] << 24);
 800131a:	4b46      	ldr	r3, [pc, #280]	; (8001434 <HAL_FDCAN_RxFifo0Callback+0x338>)
 800131c:	79db      	ldrb	r3, [r3, #7]
 800131e:	061b      	lsls	r3, r3, #24
 8001320:	4313      	orrs	r3, r2
 8001322:	461a      	mov	r2, r3
		val_2[1] = (Motor2[4] << 0) | (Motor2[5] << 8) | (Motor2[6] << 16)
 8001324:	4b44      	ldr	r3, [pc, #272]	; (8001438 <HAL_FDCAN_RxFifo0Callback+0x33c>)
 8001326:	605a      	str	r2, [r3, #4]
		val_2[2] = (Motor2[8] << 0) | (Motor2[9] << 8) | (Motor2[10] << 16)
 8001328:	4b42      	ldr	r3, [pc, #264]	; (8001434 <HAL_FDCAN_RxFifo0Callback+0x338>)
 800132a:	7a1b      	ldrb	r3, [r3, #8]
 800132c:	461a      	mov	r2, r3
 800132e:	4b41      	ldr	r3, [pc, #260]	; (8001434 <HAL_FDCAN_RxFifo0Callback+0x338>)
 8001330:	7a5b      	ldrb	r3, [r3, #9]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	431a      	orrs	r2, r3
 8001336:	4b3f      	ldr	r3, [pc, #252]	; (8001434 <HAL_FDCAN_RxFifo0Callback+0x338>)
 8001338:	7a9b      	ldrb	r3, [r3, #10]
 800133a:	041b      	lsls	r3, r3, #16
 800133c:	431a      	orrs	r2, r3
				| (Motor2[11] << 24);
 800133e:	4b3d      	ldr	r3, [pc, #244]	; (8001434 <HAL_FDCAN_RxFifo0Callback+0x338>)
 8001340:	7adb      	ldrb	r3, [r3, #11]
 8001342:	061b      	lsls	r3, r3, #24
 8001344:	4313      	orrs	r3, r2
 8001346:	461a      	mov	r2, r3
		val_2[2] = (Motor2[8] << 0) | (Motor2[9] << 8) | (Motor2[10] << 16)
 8001348:	4b3b      	ldr	r3, [pc, #236]	; (8001438 <HAL_FDCAN_RxFifo0Callback+0x33c>)
 800134a:	609a      	str	r2, [r3, #8]

		val_3[0] = (Motor3[0] << 0) | (Motor3[1] << 8) | (Motor3[2] << 16)
 800134c:	4b36      	ldr	r3, [pc, #216]	; (8001428 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b35      	ldr	r3, [pc, #212]	; (8001428 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 8001354:	785b      	ldrb	r3, [r3, #1]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	431a      	orrs	r2, r3
 800135a:	4b33      	ldr	r3, [pc, #204]	; (8001428 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 800135c:	789b      	ldrb	r3, [r3, #2]
 800135e:	041b      	lsls	r3, r3, #16
 8001360:	431a      	orrs	r2, r3
				| (Motor3[3] << 24);
 8001362:	4b31      	ldr	r3, [pc, #196]	; (8001428 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 8001364:	78db      	ldrb	r3, [r3, #3]
 8001366:	061b      	lsls	r3, r3, #24
 8001368:	4313      	orrs	r3, r2
 800136a:	461a      	mov	r2, r3
		val_3[0] = (Motor3[0] << 0) | (Motor3[1] << 8) | (Motor3[2] << 16)
 800136c:	4b33      	ldr	r3, [pc, #204]	; (800143c <HAL_FDCAN_RxFifo0Callback+0x340>)
 800136e:	601a      	str	r2, [r3, #0]
		val_3[1] = (Motor3[4] << 0) | (Motor3[5] << 8) | (Motor3[6] << 16)
 8001370:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 8001372:	791b      	ldrb	r3, [r3, #4]
 8001374:	461a      	mov	r2, r3
 8001376:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 8001378:	795b      	ldrb	r3, [r3, #5]
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	431a      	orrs	r2, r3
 800137e:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 8001380:	799b      	ldrb	r3, [r3, #6]
 8001382:	041b      	lsls	r3, r3, #16
 8001384:	431a      	orrs	r2, r3
				| (Motor3[7] << 24);
 8001386:	4b28      	ldr	r3, [pc, #160]	; (8001428 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 8001388:	79db      	ldrb	r3, [r3, #7]
 800138a:	061b      	lsls	r3, r3, #24
 800138c:	4313      	orrs	r3, r2
 800138e:	461a      	mov	r2, r3
		val_3[1] = (Motor3[4] << 0) | (Motor3[5] << 8) | (Motor3[6] << 16)
 8001390:	4b2a      	ldr	r3, [pc, #168]	; (800143c <HAL_FDCAN_RxFifo0Callback+0x340>)
 8001392:	605a      	str	r2, [r3, #4]
		val_3[2] = (Motor3[8] << 0) | (Motor3[9] << 8) | (Motor3[10] << 16)
 8001394:	4b24      	ldr	r3, [pc, #144]	; (8001428 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 8001396:	7a1b      	ldrb	r3, [r3, #8]
 8001398:	461a      	mov	r2, r3
 800139a:	4b23      	ldr	r3, [pc, #140]	; (8001428 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 800139c:	7a5b      	ldrb	r3, [r3, #9]
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	431a      	orrs	r2, r3
 80013a2:	4b21      	ldr	r3, [pc, #132]	; (8001428 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 80013a4:	7a9b      	ldrb	r3, [r3, #10]
 80013a6:	041b      	lsls	r3, r3, #16
 80013a8:	431a      	orrs	r2, r3
				| (Motor3[11] << 24);
 80013aa:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 80013ac:	7adb      	ldrb	r3, [r3, #11]
 80013ae:	061b      	lsls	r3, r3, #24
 80013b0:	4313      	orrs	r3, r2
 80013b2:	461a      	mov	r2, r3
		val_3[2] = (Motor3[8] << 0) | (Motor3[9] << 8) | (Motor3[10] << 16)
 80013b4:	4b21      	ldr	r3, [pc, #132]	; (800143c <HAL_FDCAN_RxFifo0Callback+0x340>)
 80013b6:	609a      	str	r2, [r3, #8]

		//m_state_1.angle = (*(float*) &val_1[0]) * (180.0f / M_PI); //* 180 / PI;
		m_state_1.velocity = *(float*) &val_1[1];
 80013b8:	4b21      	ldr	r3, [pc, #132]	; (8001440 <HAL_FDCAN_RxFifo0Callback+0x344>)
 80013ba:	edd3 7a00 	vldr	s15, [r3]
 80013be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <HAL_FDCAN_RxFifo0Callback+0x348>)
 80013c4:	ed83 7b02 	vstr	d7, [r3, #8]
		m_state_1.torque = *(float*) &val_1[2];
 80013c8:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <HAL_FDCAN_RxFifo0Callback+0x34c>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <HAL_FDCAN_RxFifo0Callback+0x348>)
 80013d4:	ed83 7b04 	vstr	d7, [r3, #16]

		//m_state_2.angle = (*(float*) &val_2[0]) * (180.0f / M_PI); //* 180 / PI;
		m_state_2.velocity = *(float*) &val_2[1];
 80013d8:	4b1c      	ldr	r3, [pc, #112]	; (800144c <HAL_FDCAN_RxFifo0Callback+0x350>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <HAL_FDCAN_RxFifo0Callback+0x354>)
 80013e4:	ed83 7b02 	vstr	d7, [r3, #8]
		m_state_2.torque = *(float*) &val_2[2];
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <HAL_FDCAN_RxFifo0Callback+0x358>)
 80013ea:	edd3 7a00 	vldr	s15, [r3]
 80013ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013f2:	4b17      	ldr	r3, [pc, #92]	; (8001450 <HAL_FDCAN_RxFifo0Callback+0x354>)
 80013f4:	ed83 7b04 	vstr	d7, [r3, #16]

		//m_state_3.angle = (*(float*) &val_3[0]) * (180.0f / M_PI); //* 180 / PI;
		m_state_3.velocity = *(float*) &val_3[1];
 80013f8:	4b17      	ldr	r3, [pc, #92]	; (8001458 <HAL_FDCAN_RxFifo0Callback+0x35c>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001402:	4b16      	ldr	r3, [pc, #88]	; (800145c <HAL_FDCAN_RxFifo0Callback+0x360>)
 8001404:	ed83 7b02 	vstr	d7, [r3, #8]
		m_state_3.torque = *(float*) &val_3[2];
 8001408:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_FDCAN_RxFifo0Callback+0x364>)
 800140a:	edd3 7a00 	vldr	s15, [r3]
 800140e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_FDCAN_RxFifo0Callback+0x360>)
 8001414:	ed83 7b04 	vstr	d7, [r3, #16]

	}

}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	240001c4 	.word	0x240001c4
 8001424:	24000250 	.word	0x24000250
 8001428:	24000298 	.word	0x24000298
 800142c:	24000280 	.word	0x24000280
 8001430:	2400025c 	.word	0x2400025c
 8001434:	2400028c 	.word	0x2400028c
 8001438:	24000268 	.word	0x24000268
 800143c:	24000274 	.word	0x24000274
 8001440:	24000260 	.word	0x24000260
 8001444:	24000700 	.word	0x24000700
 8001448:	24000264 	.word	0x24000264
 800144c:	2400026c 	.word	0x2400026c
 8001450:	24000728 	.word	0x24000728
 8001454:	24000270 	.word	0x24000270
 8001458:	24000278 	.word	0x24000278
 800145c:	24000750 	.word	0x24000750
 8001460:	2400027c 	.word	0x2400027c

08001464 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */

//	for(int i = 0; i < 24 < i==)
	Init_PID();
 800146a:	f000 fce5 	bl	8001e38 <Init_PID>
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800146e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001472:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8001474:	bf00      	nop
 8001476:	4b9c      	ldr	r3, [pc, #624]	; (80016e8 <main+0x284>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d004      	beq.n	800148c <main+0x28>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	1e5a      	subs	r2, r3, #1
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	dcf4      	bgt.n	8001476 <main+0x12>
		;
	if (timeout < 0) {
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	da01      	bge.n	8001496 <main+0x32>
		Error_Handler();
 8001492:	f000 fb45 	bl	8001b20 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001496:	f002 fd51 	bl	8003f3c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800149a:	f000 f979 	bl	8001790 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800149e:	4b92      	ldr	r3, [pc, #584]	; (80016e8 <main+0x284>)
 80014a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a4:	4a90      	ldr	r2, [pc, #576]	; (80016e8 <main+0x284>)
 80014a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ae:	4b8e      	ldr	r3, [pc, #568]	; (80016e8 <main+0x284>)
 80014b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80014bc:	2000      	movs	r0, #0
 80014be:	f007 f925 	bl	800870c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 80014c2:	2100      	movs	r1, #0
 80014c4:	2000      	movs	r0, #0
 80014c6:	f007 f93b 	bl	8008740 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */

	timeout = 0xFFFF;
 80014ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ce:	607b      	str	r3, [r7, #4]

	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 80014d0:	bf00      	nop
 80014d2:	4b85      	ldr	r3, [pc, #532]	; (80016e8 <main+0x284>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d104      	bne.n	80014e8 <main+0x84>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	1e5a      	subs	r2, r3, #1
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	dcf4      	bgt.n	80014d2 <main+0x6e>
		;
	if (timeout < 0) {
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	da01      	bge.n	80014f2 <main+0x8e>
		Error_Handler();
 80014ee:	f000 fb17 	bl	8001b20 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80014f2:	f7ff fc69 	bl	8000dc8 <MX_GPIO_Init>
	MX_DMA_Init();
 80014f6:	f7ff fb47 	bl	8000b88 <MX_DMA_Init>
	MX_SPI1_Init();
 80014fa:	f000 fe19 	bl	8002130 <MX_SPI1_Init>
	MX_SPI2_Init();
 80014fe:	f000 fe6f 	bl	80021e0 <MX_SPI2_Init>
	MX_SPI3_Init();
 8001502:	f000 fec5 	bl	8002290 <MX_SPI3_Init>
	MX_SPI4_Init();
 8001506:	f000 ff1b 	bl	8002340 <MX_SPI4_Init>
	MX_SPI5_Init();
 800150a:	f000 ff71 	bl	80023f0 <MX_SPI5_Init>
	MX_SPI6_Init();
 800150e:	f000 ffc7 	bl	80024a0 <MX_SPI6_Init>
	MX_USART1_UART_Init();
 8001512:	f002 faa3 	bl	8003a5c <MX_USART1_UART_Init>
	MX_TIM7_Init();
 8001516:	f002 fa43 	bl	80039a0 <MX_TIM7_Init>
	MX_FDCAN1_Init();
 800151a:	f7ff fb6d 	bl	8000bf8 <MX_FDCAN1_Init>
	MX_USART6_UART_Init();
 800151e:	f002 faed 	bl	8003afc <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim7);
 8001522:	4872      	ldr	r0, [pc, #456]	; (80016ec <main+0x288>)
 8001524:	f00a fc0c 	bl	800bd40 <HAL_TIM_Base_Start_IT>

	spiAbsoluteEncoderInitialize(&absoluteEn_1);
 8001528:	4871      	ldr	r0, [pc, #452]	; (80016f0 <main+0x28c>)
 800152a:	f7ff f949 	bl	80007c0 <spiAbsoluteEncoderInitialize>
	spiAbsoluteEncoderInitialize(&absoluteEn_2);
 800152e:	4871      	ldr	r0, [pc, #452]	; (80016f4 <main+0x290>)
 8001530:	f7ff f946 	bl	80007c0 <spiAbsoluteEncoderInitialize>
	spiAbsoluteEncoderInitialize(&absoluteEn_3);
 8001534:	4870      	ldr	r0, [pc, #448]	; (80016f8 <main+0x294>)
 8001536:	f7ff f943 	bl	80007c0 <spiAbsoluteEncoderInitialize>

	/* Configure standard ID reception filter to Rx Tx_buffer 0 */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800153a:	4b70      	ldr	r3, [pc, #448]	; (80016fc <main+0x298>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 0;
 8001540:	4b6e      	ldr	r3, [pc, #440]	; (80016fc <main+0x298>)
 8001542:	2200      	movs	r2, #0
 8001544:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001546:	4b6d      	ldr	r3, [pc, #436]	; (80016fc <main+0x298>)
 8001548:	2201      	movs	r2, #1
 800154a:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800154c:	4b6b      	ldr	r3, [pc, #428]	; (80016fc <main+0x298>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterID1 = 0x000; //
 8001552:	4b6a      	ldr	r3, [pc, #424]	; (80016fc <main+0x298>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterID2 = 0xFFF; //
 8001558:	4b68      	ldr	r3, [pc, #416]	; (80016fc <main+0x298>)
 800155a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800155e:	615a      	str	r2, [r3, #20]

#if 0
  sFilterConfig.FilterID2 = 0x0; // Ignore because FDCAN_FILTER_TO_RXTx_buffer
#endif
	sFilterConfig.RxBufferIndex = 0;
 8001560:	4b66      	ldr	r3, [pc, #408]	; (80016fc <main+0x298>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8001566:	4965      	ldr	r1, [pc, #404]	; (80016fc <main+0x298>)
 8001568:	4865      	ldr	r0, [pc, #404]	; (8001700 <main+0x29c>)
 800156a:	f005 feaf 	bl	80072cc <HAL_FDCAN_ConfigFilter>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <main+0x114>
		Error_Handler();
 8001574:	f000 fad4 	bl	8001b20 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_ACCEPT_IN_RX_FIFO0,
 8001578:	2301      	movs	r3, #1
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	2301      	movs	r3, #1
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	485f      	ldr	r0, [pc, #380]	; (8001700 <main+0x29c>)
 8001584:	f005 ff18 	bl	80073b8 <HAL_FDCAN_ConfigGlobalFilter>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <main+0x12e>
	FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE)
			== HAL_OK) {
		Error_Handler();
 800158e:	f000 fac7 	bl	8001b20 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigInterruptLines(&hfdcan1,
 8001592:	2201      	movs	r2, #1
 8001594:	2101      	movs	r1, #1
 8001596:	485a      	ldr	r0, [pc, #360]	; (8001700 <main+0x29c>)
 8001598:	f006 f930 	bl	80077fc <HAL_FDCAN_ConfigInterruptLines>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <main+0x142>
	FDCAN_FLAG_RX_FIFO0_NEW_MESSAGE, FDCAN_INTERRUPT_LINE0) != HAL_OK) {
		Error_Handler();
 80015a2:	f000 fabd 	bl	8001b20 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1,
 80015a6:	2200      	movs	r2, #0
 80015a8:	2101      	movs	r1, #1
 80015aa:	4855      	ldr	r0, [pc, #340]	; (8001700 <main+0x29c>)
 80015ac:	f006 f95c 	bl	8007868 <HAL_FDCAN_ActivateNotification>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <main+0x156>
	FDCAN_FLAG_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
		Error_Handler();
 80015b6:	f000 fab3 	bl	8001b20 <Error_Handler>
	}

	/* Send Tx Tx_buffer message */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80015ba:	4851      	ldr	r0, [pc, #324]	; (8001700 <main+0x29c>)
 80015bc:	f005 ff29 	bl	8007412 <HAL_FDCAN_Start>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <main+0x166>
		Error_Handler();
 80015c6:	f000 faab 	bl	8001b20 <Error_Handler>
	/* USER CODE BEGIN WHILE */

	while (1) {
		/* USER CODE END WHILE */

		pos_ctl_1.Kp = pos_test_pid.Kp;
 80015ca:	4b4e      	ldr	r3, [pc, #312]	; (8001704 <main+0x2a0>)
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	494d      	ldr	r1, [pc, #308]	; (8001708 <main+0x2a4>)
 80015d2:	e9c1 2302 	strd	r2, r3, [r1, #8]
		pos_ctl_1.Ki = pos_test_pid.Ki;
 80015d6:	4b4b      	ldr	r3, [pc, #300]	; (8001704 <main+0x2a0>)
 80015d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015dc:	494a      	ldr	r1, [pc, #296]	; (8001708 <main+0x2a4>)
 80015de:	e9c1 2304 	strd	r2, r3, [r1, #16]
		pos_ctl_1.Kd = pos_test_pid.Kd;
 80015e2:	4b48      	ldr	r3, [pc, #288]	; (8001704 <main+0x2a0>)
 80015e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80015e8:	4947      	ldr	r1, [pc, #284]	; (8001708 <main+0x2a4>)
 80015ea:	e9c1 2306 	strd	r2, r3, [r1, #24]
		pos_ctl_1.output_limit = pos_test_pid.output_limit;
 80015ee:	4b45      	ldr	r3, [pc, #276]	; (8001704 <main+0x2a0>)
 80015f0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015f4:	4944      	ldr	r1, [pc, #272]	; (8001708 <main+0x2a4>)
 80015f6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		pos_ctl_1.error_sum_limit = pos_test_pid.error_sum_limit;
 80015fa:	4b42      	ldr	r3, [pc, #264]	; (8001704 <main+0x2a0>)
 80015fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001600:	4941      	ldr	r1, [pc, #260]	; (8001708 <main+0x2a4>)
 8001602:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

		pos_ctl_2.Kp = pos_test_pid.Kp;
 8001606:	4b3f      	ldr	r3, [pc, #252]	; (8001704 <main+0x2a0>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	493f      	ldr	r1, [pc, #252]	; (800170c <main+0x2a8>)
 800160e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		pos_ctl_2.Ki = pos_test_pid.Ki;
 8001612:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <main+0x2a0>)
 8001614:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001618:	493c      	ldr	r1, [pc, #240]	; (800170c <main+0x2a8>)
 800161a:	e9c1 2304 	strd	r2, r3, [r1, #16]
		pos_ctl_2.Kd = pos_test_pid.Kd;
 800161e:	4b39      	ldr	r3, [pc, #228]	; (8001704 <main+0x2a0>)
 8001620:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001624:	4939      	ldr	r1, [pc, #228]	; (800170c <main+0x2a8>)
 8001626:	e9c1 2306 	strd	r2, r3, [r1, #24]
		pos_ctl_2.output_limit = pos_test_pid.output_limit;
 800162a:	4b36      	ldr	r3, [pc, #216]	; (8001704 <main+0x2a0>)
 800162c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001630:	4936      	ldr	r1, [pc, #216]	; (800170c <main+0x2a8>)
 8001632:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		pos_ctl_2.error_sum_limit = pos_test_pid.error_sum_limit;
 8001636:	4b33      	ldr	r3, [pc, #204]	; (8001704 <main+0x2a0>)
 8001638:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800163c:	4933      	ldr	r1, [pc, #204]	; (800170c <main+0x2a8>)
 800163e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

		pos_ctl_3.Kp = pos_test_pid.Kp;
 8001642:	4b30      	ldr	r3, [pc, #192]	; (8001704 <main+0x2a0>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	4931      	ldr	r1, [pc, #196]	; (8001710 <main+0x2ac>)
 800164a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		pos_ctl_3.Ki = pos_test_pid.Ki;
 800164e:	4b2d      	ldr	r3, [pc, #180]	; (8001704 <main+0x2a0>)
 8001650:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001654:	492e      	ldr	r1, [pc, #184]	; (8001710 <main+0x2ac>)
 8001656:	e9c1 2304 	strd	r2, r3, [r1, #16]
		pos_ctl_3.Kd = pos_test_pid.Kd;
 800165a:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <main+0x2a0>)
 800165c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001660:	492b      	ldr	r1, [pc, #172]	; (8001710 <main+0x2ac>)
 8001662:	e9c1 2306 	strd	r2, r3, [r1, #24]
		pos_ctl_3.output_limit = pos_test_pid.output_limit;
 8001666:	4b27      	ldr	r3, [pc, #156]	; (8001704 <main+0x2a0>)
 8001668:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800166c:	4928      	ldr	r1, [pc, #160]	; (8001710 <main+0x2ac>)
 800166e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		pos_ctl_3.error_sum_limit = pos_test_pid.error_sum_limit;
 8001672:	4b24      	ldr	r3, [pc, #144]	; (8001704 <main+0x2a0>)
 8001674:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001678:	4925      	ldr	r1, [pc, #148]	; (8001710 <main+0x2ac>)
 800167a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

		vel_ctl_1.Kp = vel_test_pid.Kp;
 800167e:	4b25      	ldr	r3, [pc, #148]	; (8001714 <main+0x2b0>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	4924      	ldr	r1, [pc, #144]	; (8001718 <main+0x2b4>)
 8001686:	e9c1 2302 	strd	r2, r3, [r1, #8]
		vel_ctl_1.Ki = vel_test_pid.Ki;
 800168a:	4b22      	ldr	r3, [pc, #136]	; (8001714 <main+0x2b0>)
 800168c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001690:	4921      	ldr	r1, [pc, #132]	; (8001718 <main+0x2b4>)
 8001692:	e9c1 2304 	strd	r2, r3, [r1, #16]
		vel_ctl_1.Kd = vel_test_pid.Kd;
 8001696:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <main+0x2b0>)
 8001698:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800169c:	491e      	ldr	r1, [pc, #120]	; (8001718 <main+0x2b4>)
 800169e:	e9c1 2306 	strd	r2, r3, [r1, #24]
		vel_ctl_1.output_limit = vel_test_pid.output_limit;
 80016a2:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <main+0x2b0>)
 80016a4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80016a8:	491b      	ldr	r1, [pc, #108]	; (8001718 <main+0x2b4>)
 80016aa:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		vel_ctl_1.error_sum_limit = vel_test_pid.error_sum_limit;
 80016ae:	4b19      	ldr	r3, [pc, #100]	; (8001714 <main+0x2b0>)
 80016b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80016b4:	4918      	ldr	r1, [pc, #96]	; (8001718 <main+0x2b4>)
 80016b6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

		vel_ctl_2.Kp = vel_test_pid.Kp + vel_ctl_2_kp_tuning;
 80016ba:	4b16      	ldr	r3, [pc, #88]	; (8001714 <main+0x2b0>)
 80016bc:	ed93 6b00 	vldr	d6, [r3]
 80016c0:	4b16      	ldr	r3, [pc, #88]	; (800171c <main+0x2b8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	ee07 3a90 	vmov	s15, r3
 80016c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80016cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <main+0x2bc>)
 80016d2:	ed83 7b02 	vstr	d7, [r3, #8]
		vel_ctl_2.Ki = vel_test_pid.Ki;
 80016d6:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <main+0x2b0>)
 80016d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80016dc:	4910      	ldr	r1, [pc, #64]	; (8001720 <main+0x2bc>)
 80016de:	e9c1 2304 	strd	r2, r3, [r1, #16]
		vel_ctl_2.Kd = vel_test_pid.Kd;
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <main+0x2b0>)
 80016e4:	e01e      	b.n	8001724 <main+0x2c0>
 80016e6:	bf00      	nop
 80016e8:	58024400 	.word	0x58024400
 80016ec:	24000b4c 	.word	0x24000b4c
 80016f0:	240000ac 	.word	0x240000ac
 80016f4:	240000bc 	.word	0x240000bc
 80016f8:	240000cc 	.word	0x240000cc
 80016fc:	24000180 	.word	0x24000180
 8001700:	240000e0 	.word	0x240000e0
 8001704:	24000778 	.word	0x24000778
 8001708:	24000568 	.word	0x24000568
 800170c:	240005f0 	.word	0x240005f0
 8001710:	24000678 	.word	0x24000678
 8001714:	240007a0 	.word	0x240007a0
 8001718:	240003d0 	.word	0x240003d0
 800171c:	2400033c 	.word	0x2400033c
 8001720:	24000458 	.word	0x24000458
 8001724:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001728:	4916      	ldr	r1, [pc, #88]	; (8001784 <main+0x320>)
 800172a:	e9c1 2306 	strd	r2, r3, [r1, #24]
		vel_ctl_2.output_limit = vel_test_pid.output_limit;
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <main+0x324>)
 8001730:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001734:	4913      	ldr	r1, [pc, #76]	; (8001784 <main+0x320>)
 8001736:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		vel_ctl_2.error_sum_limit = vel_test_pid.error_sum_limit;
 800173a:	4b13      	ldr	r3, [pc, #76]	; (8001788 <main+0x324>)
 800173c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001740:	4910      	ldr	r1, [pc, #64]	; (8001784 <main+0x320>)
 8001742:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

		vel_ctl_3.Kp = vel_test_pid.Kp;
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <main+0x324>)
 8001748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174c:	490f      	ldr	r1, [pc, #60]	; (800178c <main+0x328>)
 800174e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		vel_ctl_3.Ki = vel_test_pid.Ki;
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <main+0x324>)
 8001754:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001758:	490c      	ldr	r1, [pc, #48]	; (800178c <main+0x328>)
 800175a:	e9c1 2304 	strd	r2, r3, [r1, #16]
		vel_ctl_3.Kd = vel_test_pid.Kd;
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <main+0x324>)
 8001760:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001764:	4909      	ldr	r1, [pc, #36]	; (800178c <main+0x328>)
 8001766:	e9c1 2306 	strd	r2, r3, [r1, #24]
		vel_ctl_3.output_limit = vel_test_pid.output_limit;
 800176a:	4b07      	ldr	r3, [pc, #28]	; (8001788 <main+0x324>)
 800176c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001770:	4906      	ldr	r1, [pc, #24]	; (800178c <main+0x328>)
 8001772:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		vel_ctl_3.error_sum_limit = vel_test_pid.error_sum_limit;
 8001776:	4b04      	ldr	r3, [pc, #16]	; (8001788 <main+0x324>)
 8001778:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800177c:	4903      	ldr	r1, [pc, #12]	; (800178c <main+0x328>)
 800177e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		pos_ctl_1.Kp = pos_test_pid.Kp;
 8001782:	e722      	b.n	80015ca <main+0x166>
 8001784:	24000458 	.word	0x24000458
 8001788:	240007a0 	.word	0x240007a0
 800178c:	240004e0 	.word	0x240004e0

08001790 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b09c      	sub	sp, #112	; 0x70
 8001794:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179a:	224c      	movs	r2, #76	; 0x4c
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f00c fe38 	bl	800e414 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	2220      	movs	r2, #32
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f00c fe32 	bl	800e414 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80017b0:	2004      	movs	r0, #4
 80017b2:	f006 ffd9 	bl	8008768 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017b6:	2300      	movs	r3, #0
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	4b33      	ldr	r3, [pc, #204]	; (8001888 <SystemClock_Config+0xf8>)
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	4a32      	ldr	r2, [pc, #200]	; (8001888 <SystemClock_Config+0xf8>)
 80017c0:	f023 0301 	bic.w	r3, r3, #1
 80017c4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80017c6:	4b30      	ldr	r3, [pc, #192]	; (8001888 <SystemClock_Config+0xf8>)
 80017c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	4b2e      	ldr	r3, [pc, #184]	; (800188c <SystemClock_Config+0xfc>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017d8:	4a2c      	ldr	r2, [pc, #176]	; (800188c <SystemClock_Config+0xfc>)
 80017da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b2a      	ldr	r3, [pc, #168]	; (800188c <SystemClock_Config+0xfc>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017e8:	603b      	str	r3, [r7, #0]
 80017ea:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80017ec:	bf00      	nop
 80017ee:	4b27      	ldr	r3, [pc, #156]	; (800188c <SystemClock_Config+0xfc>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017fa:	d1f8      	bne.n	80017ee <SystemClock_Config+0x5e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80017fc:	2303      	movs	r3, #3
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001800:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001806:	2309      	movs	r3, #9
 8001808:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800180a:	2340      	movs	r3, #64	; 0x40
 800180c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800180e:	2302      	movs	r3, #2
 8001810:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001812:	2302      	movs	r3, #2
 8001814:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001816:	2301      	movs	r3, #1
 8001818:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 42;
 800181a:	232a      	movs	r3, #42	; 0x2a
 800181c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 800181e:	2302      	movs	r3, #2
 8001820:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 14;
 8001822:	230e      	movs	r3, #14
 8001824:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001826:	2302      	movs	r3, #2
 8001828:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800182a:	230c      	movs	r3, #12
 800182c:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800182e:	2300      	movs	r3, #0
 8001830:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183a:	4618      	mov	r0, r3
 800183c:	f006 ffee 	bl	800881c <HAL_RCC_OscConfig>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <SystemClock_Config+0xba>
		Error_Handler();
 8001846:	f000 f96b 	bl	8001b20 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800184a:	233f      	movs	r3, #63	; 0x3f
 800184c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800184e:	2303      	movs	r3, #3
 8001850:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001856:	2308      	movs	r3, #8
 8001858:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800185e:	2340      	movs	r3, #64	; 0x40
 8001860:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001866:	2300      	movs	r3, #0
 8001868:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2101      	movs	r1, #1
 800186e:	4618      	mov	r0, r3
 8001870:	f007 fc2e 	bl	80090d0 <HAL_RCC_ClockConfig>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <SystemClock_Config+0xee>
		Error_Handler();
 800187a:	f000 f951 	bl	8001b20 <Error_Handler>
	}
}
 800187e:	bf00      	nop
 8001880:	3770      	adds	r7, #112	; 0x70
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	58000400 	.word	0x58000400
 800188c:	58024800 	.word	0x58024800

08001890 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < sizeof(Rx_buffer); i++) {
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	e00e      	b.n	80018bc <HAL_UART_RxCpltCallback+0x2c>
		if (Rx_buffer[i] == 65) {
 800189e:	4a98      	ldr	r2, [pc, #608]	; (8001b00 <HAL_UART_RxCpltCallback+0x270>)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	4413      	add	r3, r2
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b41      	cmp	r3, #65	; 0x41
 80018a8:	d105      	bne.n	80018b6 <HAL_UART_RxCpltCallback+0x26>
			A_flag = 1;
 80018aa:	4b96      	ldr	r3, [pc, #600]	; (8001b04 <HAL_UART_RxCpltCallback+0x274>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	601a      	str	r2, [r3, #0]
			A_buffer = i;
 80018b0:	4a95      	ldr	r2, [pc, #596]	; (8001b08 <HAL_UART_RxCpltCallback+0x278>)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < sizeof(Rx_buffer); i++) {
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3301      	adds	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	2b17      	cmp	r3, #23
 80018c0:	d9ed      	bls.n	800189e <HAL_UART_RxCpltCallback+0xe>
		}
	}

	if (A_flag == 1) {
 80018c2:	4b90      	ldr	r3, [pc, #576]	; (8001b04 <HAL_UART_RxCpltCallback+0x274>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	f040 810f 	bne.w	8001aea <HAL_UART_RxCpltCallback+0x25a>
		for (int j = 0; j < 24; j++) {
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	e024      	b.n	800191c <HAL_UART_RxCpltCallback+0x8c>
			if (A_buffer + j > 23) {
 80018d2:	4b8d      	ldr	r3, [pc, #564]	; (8001b08 <HAL_UART_RxCpltCallback+0x278>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4413      	add	r3, r2
 80018da:	2b17      	cmp	r3, #23
 80018dc:	dd0e      	ble.n	80018fc <HAL_UART_RxCpltCallback+0x6c>
				Rx_imp_data[j] = (int) (int8_t) Rx_buffer[(A_buffer + j) - 24]
 80018de:	4b8a      	ldr	r3, [pc, #552]	; (8001b08 <HAL_UART_RxCpltCallback+0x278>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4413      	add	r3, r2
 80018e6:	3b18      	subs	r3, #24
 80018e8:	4a85      	ldr	r2, [pc, #532]	; (8001b00 <HAL_UART_RxCpltCallback+0x270>)
 80018ea:	5cd3      	ldrb	r3, [r2, r3]
 80018ec:	b25b      	sxtb	r3, r3
						- 48;
 80018ee:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
				Rx_imp_data[j] = (int) (int8_t) Rx_buffer[(A_buffer + j) - 24]
 80018f2:	4986      	ldr	r1, [pc, #536]	; (8001b0c <HAL_UART_RxCpltCallback+0x27c>)
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80018fa:	e00c      	b.n	8001916 <HAL_UART_RxCpltCallback+0x86>
			} else {
				Rx_imp_data[j] = (int) (int8_t) Rx_buffer[A_buffer + j] - 48;
 80018fc:	4b82      	ldr	r3, [pc, #520]	; (8001b08 <HAL_UART_RxCpltCallback+0x278>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4413      	add	r3, r2
 8001904:	4a7e      	ldr	r2, [pc, #504]	; (8001b00 <HAL_UART_RxCpltCallback+0x270>)
 8001906:	5cd3      	ldrb	r3, [r2, r3]
 8001908:	b25b      	sxtb	r3, r3
 800190a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800190e:	497f      	ldr	r1, [pc, #508]	; (8001b0c <HAL_UART_RxCpltCallback+0x27c>)
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int j = 0; j < 24; j++) {
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	3301      	adds	r3, #1
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	2b17      	cmp	r3, #23
 8001920:	ddd7      	ble.n	80018d2 <HAL_UART_RxCpltCallback+0x42>
			}
		}

		//	// A 65, a 97
		for (int k = 1; k < 2; k++) {
 8001922:	2301      	movs	r3, #1
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	e0d9      	b.n	8001adc <HAL_UART_RxCpltCallback+0x24c>
			if (Rx_imp_data[0] == 17) {
 8001928:	4b78      	ldr	r3, [pc, #480]	; (8001b0c <HAL_UART_RxCpltCallback+0x27c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b11      	cmp	r3, #17
 800192e:	f040 80d2 	bne.w	8001ad6 <HAL_UART_RxCpltCallback+0x246>
				imp_1.theta = Rx_imp_data[k] * (10000)
 8001932:	4a76      	ldr	r2, [pc, #472]	; (8001b0c <HAL_UART_RxCpltCallback+0x27c>)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193a:	f242 7210 	movw	r2, #10000	; 0x2710
 800193e:	fb03 f202 	mul.w	r2, r3, r2
						+ Rx_imp_data[k + 1] * (1000)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	3301      	adds	r3, #1
 8001946:	4971      	ldr	r1, [pc, #452]	; (8001b0c <HAL_UART_RxCpltCallback+0x27c>)
 8001948:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800194c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001950:	fb01 f303 	mul.w	r3, r1, r3
 8001954:	441a      	add	r2, r3
						+ Rx_imp_data[k + 2] * (100) + Rx_imp_data[k + 3] * (10)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	3302      	adds	r3, #2
 800195a:	496c      	ldr	r1, [pc, #432]	; (8001b0c <HAL_UART_RxCpltCallback+0x27c>)
 800195c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001960:	2164      	movs	r1, #100	; 0x64
 8001962:	fb01 f303 	mul.w	r3, r1, r3
 8001966:	18d1      	adds	r1, r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3303      	adds	r3, #3
 800196c:	4a67      	ldr	r2, [pc, #412]	; (8001b0c <HAL_UART_RxCpltCallback+0x27c>)
 800196e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	18ca      	adds	r2, r1, r3
						+ Rx_imp_data[k + 4];
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	3304      	adds	r3, #4
 8001980:	4962      	ldr	r1, [pc, #392]	; (8001b0c <HAL_UART_RxCpltCallback+0x27c>)
 8001982:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001986:	4413      	add	r3, r2
				imp_1.theta = Rx_imp_data[k] * (10000)
 8001988:	ee07 3a90 	vmov	s15, r3
 800198c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001990:	4b5f      	ldr	r3, [pc, #380]	; (8001b10 <HAL_UART_RxCpltCallback+0x280>)
 8001992:	ed83 7b02 	vstr	d7, [r3, #8]

				imp_2.theta = Rx_imp_data[k + 6] * (10000)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	3306      	adds	r3, #6
 800199a:	4a5c      	ldr	r2, [pc, #368]	; (8001b0c <HAL_UART_RxCpltCallback+0x27c>)
 800199c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80019a4:	fb03 f202 	mul.w	r2, r3, r2
						+ Rx_imp_data[k + 7] * (1000)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	3307      	adds	r3, #7
 80019ac:	4957      	ldr	r1, [pc, #348]	; (8001b0c <HAL_UART_RxCpltCallback+0x27c>)
 80019ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019b6:	fb01 f303 	mul.w	r3, r1, r3
 80019ba:	441a      	add	r2, r3
						+ Rx_imp_data[k + 8] * (100) + Rx_imp_data[k + 9] * (10)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3308      	adds	r3, #8
 80019c0:	4952      	ldr	r1, [pc, #328]	; (8001b0c <HAL_UART_RxCpltCallback+0x27c>)
 80019c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019c6:	2164      	movs	r1, #100	; 0x64
 80019c8:	fb01 f303 	mul.w	r3, r1, r3
 80019cc:	18d1      	adds	r1, r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3309      	adds	r3, #9
 80019d2:	4a4e      	ldr	r2, [pc, #312]	; (8001b0c <HAL_UART_RxCpltCallback+0x27c>)
 80019d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	18ca      	adds	r2, r1, r3
						+ Rx_imp_data[k + 10];
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	330a      	adds	r3, #10
 80019e6:	4949      	ldr	r1, [pc, #292]	; (8001b0c <HAL_UART_RxCpltCallback+0x27c>)
 80019e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019ec:	4413      	add	r3, r2
				imp_2.theta = Rx_imp_data[k + 6] * (10000)
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80019f6:	4b47      	ldr	r3, [pc, #284]	; (8001b14 <HAL_UART_RxCpltCallback+0x284>)
 80019f8:	ed83 7b02 	vstr	d7, [r3, #8]

				imp_3.theta = Rx_imp_data[k + 12] * (10000)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	330c      	adds	r3, #12
 8001a00:	4a42      	ldr	r2, [pc, #264]	; (8001b0c <HAL_UART_RxCpltCallback+0x27c>)
 8001a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a06:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a0a:	fb03 f202 	mul.w	r2, r3, r2
						+ Rx_imp_data[k + 13] * (1000)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	330d      	adds	r3, #13
 8001a12:	493e      	ldr	r1, [pc, #248]	; (8001b0c <HAL_UART_RxCpltCallback+0x27c>)
 8001a14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a1c:	fb01 f303 	mul.w	r3, r1, r3
 8001a20:	441a      	add	r2, r3
						+ Rx_imp_data[k + 14] * (100)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	330e      	adds	r3, #14
 8001a26:	4939      	ldr	r1, [pc, #228]	; (8001b0c <HAL_UART_RxCpltCallback+0x27c>)
 8001a28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a2c:	2164      	movs	r1, #100	; 0x64
 8001a2e:	fb01 f303 	mul.w	r3, r1, r3
 8001a32:	18d1      	adds	r1, r2, r3
						+ Rx_imp_data[k + 15] * (10) + Rx_imp_data[k + 16];
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	330f      	adds	r3, #15
 8001a38:	4a34      	ldr	r2, [pc, #208]	; (8001b0c <HAL_UART_RxCpltCallback+0x27c>)
 8001a3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	18ca      	adds	r2, r1, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	3310      	adds	r3, #16
 8001a4c:	492f      	ldr	r1, [pc, #188]	; (8001b0c <HAL_UART_RxCpltCallback+0x27c>)
 8001a4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a52:	4413      	add	r3, r2
				imp_3.theta = Rx_imp_data[k + 12] * (10000)
 8001a54:	ee07 3a90 	vmov	s15, r3
 8001a58:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001a5c:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <HAL_UART_RxCpltCallback+0x288>)
 8001a5e:	ed83 7b02 	vstr	d7, [r3, #8]

				imp_1.F_flag = Rx_imp_data[k + 18];
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3312      	adds	r3, #18
 8001a66:	4a29      	ldr	r2, [pc, #164]	; (8001b0c <HAL_UART_RxCpltCallback+0x27c>)
 8001a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6c:	4a28      	ldr	r2, [pc, #160]	; (8001b10 <HAL_UART_RxCpltCallback+0x280>)
 8001a6e:	6193      	str	r3, [r2, #24]
				imp_2.F_flag = Rx_imp_data[k + 19];
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	3313      	adds	r3, #19
 8001a74:	4a25      	ldr	r2, [pc, #148]	; (8001b0c <HAL_UART_RxCpltCallback+0x27c>)
 8001a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7a:	4a26      	ldr	r2, [pc, #152]	; (8001b14 <HAL_UART_RxCpltCallback+0x284>)
 8001a7c:	6193      	str	r3, [r2, #24]
				imp_3.F_flag = Rx_imp_data[k + 20];
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	3314      	adds	r3, #20
 8001a82:	4a22      	ldr	r2, [pc, #136]	; (8001b0c <HAL_UART_RxCpltCallback+0x27c>)
 8001a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a88:	4a23      	ldr	r2, [pc, #140]	; (8001b18 <HAL_UART_RxCpltCallback+0x288>)
 8001a8a:	6193      	str	r3, [r2, #24]

				mode_switch = Rx_imp_data[k + 22];
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3316      	adds	r3, #22
 8001a90:	4a1e      	ldr	r2, [pc, #120]	; (8001b0c <HAL_UART_RxCpltCallback+0x27c>)
 8001a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a96:	4a21      	ldr	r2, [pc, #132]	; (8001b1c <HAL_UART_RxCpltCallback+0x28c>)
 8001a98:	6013      	str	r3, [r2, #0]

				imp_1.theta = imp_1.theta / 100;
 8001a9a:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <HAL_UART_RxCpltCallback+0x280>)
 8001a9c:	ed93 6b02 	vldr	d6, [r3, #8]
 8001aa0:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8001af8 <HAL_UART_RxCpltCallback+0x268>
 8001aa4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <HAL_UART_RxCpltCallback+0x280>)
 8001aaa:	ed83 7b02 	vstr	d7, [r3, #8]
				imp_2.theta = imp_2.theta / 100;
 8001aae:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <HAL_UART_RxCpltCallback+0x284>)
 8001ab0:	ed93 6b02 	vldr	d6, [r3, #8]
 8001ab4:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8001af8 <HAL_UART_RxCpltCallback+0x268>
 8001ab8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <HAL_UART_RxCpltCallback+0x284>)
 8001abe:	ed83 7b02 	vstr	d7, [r3, #8]
				imp_3.theta = imp_3.theta / 100;
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <HAL_UART_RxCpltCallback+0x288>)
 8001ac4:	ed93 6b02 	vldr	d6, [r3, #8]
 8001ac8:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8001af8 <HAL_UART_RxCpltCallback+0x268>
 8001acc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <HAL_UART_RxCpltCallback+0x288>)
 8001ad2:	ed83 7b02 	vstr	d7, [r3, #8]
		for (int k = 1; k < 2; k++) {
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	f77f af22 	ble.w	8001928 <HAL_UART_RxCpltCallback+0x98>
			} else {

			}
		}
		A_flag = 0;
 8001ae4:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <HAL_UART_RxCpltCallback+0x274>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
	} else if (A_flag == 0) {
	}

}
 8001aea:	bf00      	nop
 8001aec:	371c      	adds	r7, #28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	00000000 	.word	0x00000000
 8001afc:	40590000 	.word	0x40590000
 8001b00:	240002a4 	.word	0x240002a4
 8001b04:	24000334 	.word	0x24000334
 8001b08:	24000330 	.word	0x24000330
 8001b0c:	240002bc 	.word	0x240002bc
 8001b10:	240001f0 	.word	0x240001f0
 8001b14:	24000210 	.word	0x24000210
 8001b18:	24000230 	.word	0x24000230
 8001b1c:	24000338 	.word	0x24000338

08001b20 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
//  __disable_irq();
//  while (1)
//  {
//  }
	/* USER CODE END Error_Handler_Debug */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <Position_Controller>:

	return p->current;
}

double Position_Controller(Controller_Var *pos, Motor_State *m_state,
		Profile_value *profile) {
 8001b2e:	b480      	push	{r7}
 8001b30:	b085      	sub	sp, #20
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]

	pos->current = m_state->angle;
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	68f9      	ldr	r1, [r7, #12]
 8001b42:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	pos->input = pos->current;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001b4c:	68f9      	ldr	r1, [r7, #12]
 8001b4e:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	pos->error = pos->goal - pos->input;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 8001b5e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	pos->error_sum += pos->error;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001b74:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	pos->error_diff = pos->error - pos->error_before;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8001b8a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60

	if (pos->error_sum != 0) {
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8001b9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba2:	d026      	beq.n	8001bf2 <Position_Controller+0xc4>
		if (pos->error_sum > pos->error_sum_limit)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8001bb0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb8:	dd06      	ble.n	8001bc8 <Position_Controller+0x9a>
			pos->error_sum = pos->error_sum_limit;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001bc0:	68f9      	ldr	r1, [r7, #12]
 8001bc2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001bc6:	e014      	b.n	8001bf2 <Position_Controller+0xc4>
		else if (pos->error_sum < -pos->error_sum_limit)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8001bd4:	eeb1 7b47 	vneg.f64	d7, d7
 8001bd8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be0:	d507      	bpl.n	8001bf2 <Position_Controller+0xc4>
			pos->error_sum = -pos->error_sum_limit;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8001be8:	eeb1 7b47 	vneg.f64	d7, d7
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	}

	pos->output = pos->Kp * pos->error + pos->Ki * pos->error_sum
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	ed93 6b02 	vldr	d6, [r3, #8]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001bfe:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	ed93 5b04 	vldr	d5, [r3, #16]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8001c0e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001c12:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ pos->Kd * pos->error_diff;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	ed93 5b06 	vldr	d5, [r3, #24]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8001c22:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001c26:	ee36 7b07 	vadd.f64	d7, d6, d7
	pos->output = pos->Kp * pos->error + pos->Ki * pos->error_sum
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	pos->error_before = pos->error;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001c36:	68f9      	ldr	r1, [r7, #12]
 8001c38:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	//Anti-Windup
	if (pos->output_limit != 0) {
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001c42:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4a:	d026      	beq.n	8001c9a <Position_Controller+0x16c>
		if (pos->output > pos->output_limit)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001c58:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c60:	dd06      	ble.n	8001c70 <Position_Controller+0x142>
			pos->output = pos->output_limit;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001c68:	68f9      	ldr	r1, [r7, #12]
 8001c6a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8001c6e:	e014      	b.n	8001c9a <Position_Controller+0x16c>
		else if (pos->output < -pos->output_limit)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001c7c:	eeb1 7b47 	vneg.f64	d7, d7
 8001c80:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c88:	d507      	bpl.n	8001c9a <Position_Controller+0x16c>
			pos->output = -pos->output_limit;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001c90:	eeb1 7b47 	vneg.f64	d7, d7
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	}

	return pos->output;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001ca0:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ca4:	eeb0 0b47 	vmov.f64	d0, d7
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <Velocity_Controller>:

double Velocity_Controller(Controller_Var *vel, Controller_Var *pos,
		Motor_State *m_state, Profile_value *profile, Impedance *imp) {
 8001cb2:	b480      	push	{r7}
 8001cb4:	b085      	sub	sp, #20
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	603b      	str	r3, [r7, #0]

	vel->current = m_state->velocity; //현재 모터 속도
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cc6:	68f9      	ldr	r1, [r7, #12]
 8001cc8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	vel->input = vel->current;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001cd2:	68f9      	ldr	r1, [r7, #12]
 8001cd4:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	vel->error = vel->goal - vel->input;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 8001ce4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	vel->error_sum += vel->error;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001cfa:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	vel->error_diff = vel->error - vel->error_before;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8001d10:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60

	if (vel->error_sum_limit != 0) {
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8001d20:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d28:	d026      	beq.n	8001d78 <Velocity_Controller+0xc6>
		if (vel->error_sum > vel->error_sum_limit)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8001d36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3e:	dd06      	ble.n	8001d4e <Velocity_Controller+0x9c>
			vel->error_sum = vel->error_sum_limit;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001d46:	68f9      	ldr	r1, [r7, #12]
 8001d48:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001d4c:	e014      	b.n	8001d78 <Velocity_Controller+0xc6>
		else if (vel->error_sum < -vel->error_sum_limit)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8001d5a:	eeb1 7b47 	vneg.f64	d7, d7
 8001d5e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d66:	d507      	bpl.n	8001d78 <Velocity_Controller+0xc6>
			vel->error_sum = -vel->error_sum_limit;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8001d6e:	eeb1 7b47 	vneg.f64	d7, d7
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	}

	vel->output = vel->Kp * vel->error + vel->Ki * vel->error_sum
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	ed93 6b02 	vldr	d6, [r3, #8]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001d84:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	ed93 5b04 	vldr	d5, [r3, #16]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8001d94:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001d98:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ vel->Kd * vel->error_diff;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	ed93 5b06 	vldr	d5, [r3, #24]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8001da8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001dac:	ee36 7b07 	vadd.f64	d7, d6, d7
	vel->output = vel->Kp * vel->error + vel->Ki * vel->error_sum
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

	vel->error_before = vel->error;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001dbc:	68f9      	ldr	r1, [r7, #12]
 8001dbe:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

//Anti-Windup
	if (vel->output_limit != 0) {
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001dc8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd0:	d026      	beq.n	8001e20 <Velocity_Controller+0x16e>
		if (vel->output > vel->output_limit)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001dde:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de6:	dd06      	ble.n	8001df6 <Velocity_Controller+0x144>
			vel->output = vel->output_limit;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001dee:	68f9      	ldr	r1, [r7, #12]
 8001df0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8001df4:	e014      	b.n	8001e20 <Velocity_Controller+0x16e>
		else if (vel->output < -(vel->output_limit))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001e02:	eeb1 7b47 	vneg.f64	d7, d7
 8001e06:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0e:	d507      	bpl.n	8001e20 <Velocity_Controller+0x16e>
			vel->output = -(vel->output_limit);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001e16:	eeb1 7b47 	vneg.f64	d7, d7
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	}

	return vel->output;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001e26:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e2a:	eeb0 0b47 	vmov.f64	d0, d7
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <Init_PID>:

void Init_PID() {
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0

	//0505-2354
	//pos : Kp 0.1, Ki 0, Kd 0, output_limt 2;
	//vel : Kp 1700, Ki 0.5, Kd 0;

	pos_test_pid.Kp = 0.1;
 8001e3c:	49a6      	ldr	r1, [pc, #664]	; (80020d8 <Init_PID+0x2a0>)
 8001e3e:	a39e      	add	r3, pc, #632	; (adr r3, 80020b8 <Init_PID+0x280>)
 8001e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e44:	e9c1 2300 	strd	r2, r3, [r1]
	pos_test_pid.Ki = 0.00;
 8001e48:	49a3      	ldr	r1, [pc, #652]	; (80020d8 <Init_PID+0x2a0>)
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pos_test_pid.Kd = 0.00;
 8001e56:	49a0      	ldr	r1, [pc, #640]	; (80020d8 <Init_PID+0x2a0>)
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pos_test_pid.error_sum_limit = 1000;
 8001e64:	499c      	ldr	r1, [pc, #624]	; (80020d8 <Init_PID+0x2a0>)
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	4b9c      	ldr	r3, [pc, #624]	; (80020dc <Init_PID+0x2a4>)
 8001e6c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pos_test_pid.output_limit = 2;
 8001e70:	4999      	ldr	r1, [pc, #612]	; (80020d8 <Init_PID+0x2a0>)
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e7a:	e9c1 2306 	strd	r2, r3, [r1, #24]

	pos_ctl_1.Kp = 0.1;
 8001e7e:	4998      	ldr	r1, [pc, #608]	; (80020e0 <Init_PID+0x2a8>)
 8001e80:	a38d      	add	r3, pc, #564	; (adr r3, 80020b8 <Init_PID+0x280>)
 8001e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e86:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pos_ctl_1.Ki = 0.00;
 8001e8a:	4995      	ldr	r1, [pc, #596]	; (80020e0 <Init_PID+0x2a8>)
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pos_ctl_1.Kd = 0.00;
 8001e98:	4991      	ldr	r1, [pc, #580]	; (80020e0 <Init_PID+0x2a8>)
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	e9c1 2306 	strd	r2, r3, [r1, #24]

	pos_ctl_2.Kp = 0.1;
 8001ea6:	498f      	ldr	r1, [pc, #572]	; (80020e4 <Init_PID+0x2ac>)
 8001ea8:	a383      	add	r3, pc, #524	; (adr r3, 80020b8 <Init_PID+0x280>)
 8001eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eae:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pos_ctl_2.Ki = 0.00;
 8001eb2:	498c      	ldr	r1, [pc, #560]	; (80020e4 <Init_PID+0x2ac>)
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pos_ctl_2.Kd = 0.00;
 8001ec0:	4988      	ldr	r1, [pc, #544]	; (80020e4 <Init_PID+0x2ac>)
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	e9c1 2306 	strd	r2, r3, [r1, #24]

	pos_ctl_3.Kp = 0.1;
 8001ece:	4986      	ldr	r1, [pc, #536]	; (80020e8 <Init_PID+0x2b0>)
 8001ed0:	a379      	add	r3, pc, #484	; (adr r3, 80020b8 <Init_PID+0x280>)
 8001ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pos_ctl_3.Ki = 0.00;
 8001eda:	4983      	ldr	r1, [pc, #524]	; (80020e8 <Init_PID+0x2b0>)
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pos_ctl_3.Kd = 0.00;
 8001ee8:	497f      	ldr	r1, [pc, #508]	; (80020e8 <Init_PID+0x2b0>)
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	e9c1 2306 	strd	r2, r3, [r1, #24]

	pos_ctl_1.error_sum_limit = 1000;
 8001ef6:	497a      	ldr	r1, [pc, #488]	; (80020e0 <Init_PID+0x2a8>)
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	4b77      	ldr	r3, [pc, #476]	; (80020dc <Init_PID+0x2a4>)
 8001efe:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	pos_ctl_1.output_limit = 2;
 8001f02:	4977      	ldr	r1, [pc, #476]	; (80020e0 <Init_PID+0x2a8>)
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f0c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	pos_ctl_2.error_sum_limit = 1000;
 8001f10:	4974      	ldr	r1, [pc, #464]	; (80020e4 <Init_PID+0x2ac>)
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	4b71      	ldr	r3, [pc, #452]	; (80020dc <Init_PID+0x2a4>)
 8001f18:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	pos_ctl_2.output_limit = 2;
 8001f1c:	4971      	ldr	r1, [pc, #452]	; (80020e4 <Init_PID+0x2ac>)
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f26:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	pos_ctl_3.error_sum_limit = 1000;
 8001f2a:	496f      	ldr	r1, [pc, #444]	; (80020e8 <Init_PID+0x2b0>)
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	4b6a      	ldr	r3, [pc, #424]	; (80020dc <Init_PID+0x2a4>)
 8001f32:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	pos_ctl_3.output_limit = 2;
 8001f36:	496c      	ldr	r1, [pc, #432]	; (80020e8 <Init_PID+0x2b0>)
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f40:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

//Velocivy_Control

	vel_test_pid.Kp = 2500;  //2800
 8001f44:	4969      	ldr	r1, [pc, #420]	; (80020ec <Init_PID+0x2b4>)
 8001f46:	a35e      	add	r3, pc, #376	; (adr r3, 80020c0 <Init_PID+0x288>)
 8001f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4c:	e9c1 2300 	strd	r2, r3, [r1]
	vel_test_pid.Ki = 0.5;   //2
 8001f50:	4966      	ldr	r1, [pc, #408]	; (80020ec <Init_PID+0x2b4>)
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	4b66      	ldr	r3, [pc, #408]	; (80020f0 <Init_PID+0x2b8>)
 8001f58:	e9c1 2302 	strd	r2, r3, [r1, #8]
	vel_test_pid.Kd = 0.0;
 8001f5c:	4963      	ldr	r1, [pc, #396]	; (80020ec <Init_PID+0x2b4>)
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	e9c1 2304 	strd	r2, r3, [r1, #16]
	vel_test_pid.error_sum_limit = 3000;
 8001f6a:	4960      	ldr	r1, [pc, #384]	; (80020ec <Init_PID+0x2b4>)
 8001f6c:	a356      	add	r3, pc, #344	; (adr r3, 80020c8 <Init_PID+0x290>)
 8001f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f72:	e9c1 2308 	strd	r2, r3, [r1, #32]
	vel_test_pid.output_limit = 9000;
 8001f76:	495d      	ldr	r1, [pc, #372]	; (80020ec <Init_PID+0x2b4>)
 8001f78:	a355      	add	r3, pc, #340	; (adr r3, 80020d0 <Init_PID+0x298>)
 8001f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7e:	e9c1 2306 	strd	r2, r3, [r1, #24]


	vel_ctl_1.Kp = 2500;
 8001f82:	495c      	ldr	r1, [pc, #368]	; (80020f4 <Init_PID+0x2bc>)
 8001f84:	a34e      	add	r3, pc, #312	; (adr r3, 80020c0 <Init_PID+0x288>)
 8001f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	vel_ctl_1.Ki = 0.5;
 8001f8e:	4959      	ldr	r1, [pc, #356]	; (80020f4 <Init_PID+0x2bc>)
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	4b56      	ldr	r3, [pc, #344]	; (80020f0 <Init_PID+0x2b8>)
 8001f96:	e9c1 2304 	strd	r2, r3, [r1, #16]
	vel_ctl_1.Kd = 0;
 8001f9a:	4956      	ldr	r1, [pc, #344]	; (80020f4 <Init_PID+0x2bc>)
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	e9c1 2306 	strd	r2, r3, [r1, #24]

	vel_ctl_2.Kp = 2500;
 8001fa8:	4953      	ldr	r1, [pc, #332]	; (80020f8 <Init_PID+0x2c0>)
 8001faa:	a345      	add	r3, pc, #276	; (adr r3, 80020c0 <Init_PID+0x288>)
 8001fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	vel_ctl_2.Ki = 0.5;
 8001fb4:	4950      	ldr	r1, [pc, #320]	; (80020f8 <Init_PID+0x2c0>)
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	4b4d      	ldr	r3, [pc, #308]	; (80020f0 <Init_PID+0x2b8>)
 8001fbc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	vel_ctl_2.Kd = 0;
 8001fc0:	494d      	ldr	r1, [pc, #308]	; (80020f8 <Init_PID+0x2c0>)
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	f04f 0300 	mov.w	r3, #0
 8001fca:	e9c1 2306 	strd	r2, r3, [r1, #24]

	vel_ctl_3.Kp = 2500;
 8001fce:	494b      	ldr	r1, [pc, #300]	; (80020fc <Init_PID+0x2c4>)
 8001fd0:	a33b      	add	r3, pc, #236	; (adr r3, 80020c0 <Init_PID+0x288>)
 8001fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	vel_ctl_3.Ki = 0.5;
 8001fda:	4948      	ldr	r1, [pc, #288]	; (80020fc <Init_PID+0x2c4>)
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	4b43      	ldr	r3, [pc, #268]	; (80020f0 <Init_PID+0x2b8>)
 8001fe2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	vel_ctl_3.Kd = 0;
 8001fe6:	4945      	ldr	r1, [pc, #276]	; (80020fc <Init_PID+0x2c4>)
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	e9c1 2306 	strd	r2, r3, [r1, #24]

	vel_ctl_1.error_sum_limit = 3000;
 8001ff4:	493f      	ldr	r1, [pc, #252]	; (80020f4 <Init_PID+0x2bc>)
 8001ff6:	a334      	add	r3, pc, #208	; (adr r3, 80020c8 <Init_PID+0x290>)
 8001ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffc:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	vel_ctl_1.output_limit = 9000;
 8002000:	493c      	ldr	r1, [pc, #240]	; (80020f4 <Init_PID+0x2bc>)
 8002002:	a333      	add	r3, pc, #204	; (adr r3, 80020d0 <Init_PID+0x298>)
 8002004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002008:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	vel_ctl_2.error_sum_limit = 3000;
 800200c:	493a      	ldr	r1, [pc, #232]	; (80020f8 <Init_PID+0x2c0>)
 800200e:	a32e      	add	r3, pc, #184	; (adr r3, 80020c8 <Init_PID+0x290>)
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	vel_ctl_2.output_limit = 9000;
 8002018:	4937      	ldr	r1, [pc, #220]	; (80020f8 <Init_PID+0x2c0>)
 800201a:	a32d      	add	r3, pc, #180	; (adr r3, 80020d0 <Init_PID+0x298>)
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	vel_ctl_3.error_sum_limit = 3000;
 8002024:	4935      	ldr	r1, [pc, #212]	; (80020fc <Init_PID+0x2c4>)
 8002026:	a328      	add	r3, pc, #160	; (adr r3, 80020c8 <Init_PID+0x290>)
 8002028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	vel_ctl_3.output_limit = 9000;
 8002030:	4932      	ldr	r1, [pc, #200]	; (80020fc <Init_PID+0x2c4>)
 8002032:	a327      	add	r3, pc, #156	; (adr r3, 80020d0 <Init_PID+0x298>)
 8002034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002038:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

//Profile_value
	profile_1.flag = 0;
 800203c:	4b30      	ldr	r3, [pc, #192]	; (8002100 <Init_PID+0x2c8>)
 800203e:	2200      	movs	r2, #0
 8002040:	629a      	str	r2, [r3, #40]	; 0x28
	profile_2.flag = 0;
 8002042:	4b30      	ldr	r3, [pc, #192]	; (8002104 <Init_PID+0x2cc>)
 8002044:	2200      	movs	r2, #0
 8002046:	629a      	str	r2, [r3, #40]	; 0x28
	profile_3.flag = 0;
 8002048:	4b2f      	ldr	r3, [pc, #188]	; (8002108 <Init_PID+0x2d0>)
 800204a:	2200      	movs	r2, #0
 800204c:	629a      	str	r2, [r3, #40]	; 0x28

	profile_1.ramp = 1000;
 800204e:	492c      	ldr	r1, [pc, #176]	; (8002100 <Init_PID+0x2c8>)
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	4b21      	ldr	r3, [pc, #132]	; (80020dc <Init_PID+0x2a4>)
 8002056:	e9c1 2306 	strd	r2, r3, [r1, #24]
	profile_2.ramp = 1000;
 800205a:	492a      	ldr	r1, [pc, #168]	; (8002104 <Init_PID+0x2cc>)
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	4b1e      	ldr	r3, [pc, #120]	; (80020dc <Init_PID+0x2a4>)
 8002062:	e9c1 2306 	strd	r2, r3, [r1, #24]
	profile_3.ramp = 1000;
 8002066:	4928      	ldr	r1, [pc, #160]	; (8002108 <Init_PID+0x2d0>)
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <Init_PID+0x2a4>)
 800206e:	e9c1 2306 	strd	r2, r3, [r1, #24]

//Angle_Init
	m_state_1.Init_angle = 225;
 8002072:	4b26      	ldr	r3, [pc, #152]	; (800210c <Init_PID+0x2d4>)
 8002074:	22e1      	movs	r2, #225	; 0xe1
 8002076:	621a      	str	r2, [r3, #32]
	m_state_2.Init_angle = 225;
 8002078:	4b25      	ldr	r3, [pc, #148]	; (8002110 <Init_PID+0x2d8>)
 800207a:	22e1      	movs	r2, #225	; 0xe1
 800207c:	621a      	str	r2, [r3, #32]
	m_state_3.Init_angle = 225;
 800207e:	4b25      	ldr	r3, [pc, #148]	; (8002114 <Init_PID+0x2dc>)
 8002080:	22e1      	movs	r2, #225	; 0xe1
 8002082:	621a      	str	r2, [r3, #32]

	pos_ctl_1.goal = m_state_1.Init_angle;
 8002084:	4b21      	ldr	r3, [pc, #132]	; (800210c <Init_PID+0x2d4>)
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	ee07 3a90 	vmov	s15, r3
 800208c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002090:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <Init_PID+0x2a8>)
 8002092:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
	pos_ctl_2.goal = m_state_2.Init_angle;
 8002096:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <Init_PID+0x2d8>)
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	ee07 3a90 	vmov	s15, r3
 800209e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <Init_PID+0x2ac>)
 80020a4:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
	pos_ctl_3.goal = m_state_3.Init_angle;
 80020a8:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <Init_PID+0x2dc>)
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	ee07 3a90 	vmov	s15, r3
 80020b0:	e032      	b.n	8002118 <Init_PID+0x2e0>
 80020b2:	bf00      	nop
 80020b4:	f3af 8000 	nop.w
 80020b8:	9999999a 	.word	0x9999999a
 80020bc:	3fb99999 	.word	0x3fb99999
 80020c0:	00000000 	.word	0x00000000
 80020c4:	40a38800 	.word	0x40a38800
 80020c8:	00000000 	.word	0x00000000
 80020cc:	40a77000 	.word	0x40a77000
 80020d0:	00000000 	.word	0x00000000
 80020d4:	40c19400 	.word	0x40c19400
 80020d8:	24000778 	.word	0x24000778
 80020dc:	408f4000 	.word	0x408f4000
 80020e0:	24000568 	.word	0x24000568
 80020e4:	240005f0 	.word	0x240005f0
 80020e8:	24000678 	.word	0x24000678
 80020ec:	240007a0 	.word	0x240007a0
 80020f0:	3fe00000 	.word	0x3fe00000
 80020f4:	240003d0 	.word	0x240003d0
 80020f8:	24000458 	.word	0x24000458
 80020fc:	240004e0 	.word	0x240004e0
 8002100:	24000340 	.word	0x24000340
 8002104:	24000370 	.word	0x24000370
 8002108:	240003a0 	.word	0x240003a0
 800210c:	24000700 	.word	0x24000700
 8002110:	24000728 	.word	0x24000728
 8002114:	24000750 	.word	0x24000750
 8002118:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800211c:	4b03      	ldr	r3, [pc, #12]	; (800212c <Init_PID+0x2f4>)
 800211e:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78

}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	24000678 	.word	0x24000678

08002130 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi5;
SPI_HandleTypeDef hspi6;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002134:	4b28      	ldr	r3, [pc, #160]	; (80021d8 <MX_SPI1_Init+0xa8>)
 8002136:	4a29      	ldr	r2, [pc, #164]	; (80021dc <MX_SPI1_Init+0xac>)
 8002138:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800213a:	4b27      	ldr	r3, [pc, #156]	; (80021d8 <MX_SPI1_Init+0xa8>)
 800213c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002140:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002142:	4b25      	ldr	r3, [pc, #148]	; (80021d8 <MX_SPI1_Init+0xa8>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002148:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <MX_SPI1_Init+0xa8>)
 800214a:	2207      	movs	r2, #7
 800214c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800214e:	4b22      	ldr	r3, [pc, #136]	; (80021d8 <MX_SPI1_Init+0xa8>)
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002154:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <MX_SPI1_Init+0xa8>)
 8002156:	2200      	movs	r2, #0
 8002158:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800215a:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <MX_SPI1_Init+0xa8>)
 800215c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002160:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002162:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <MX_SPI1_Init+0xa8>)
 8002164:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002168:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800216a:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <MX_SPI1_Init+0xa8>)
 800216c:	2200      	movs	r2, #0
 800216e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002170:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <MX_SPI1_Init+0xa8>)
 8002172:	2200      	movs	r2, #0
 8002174:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002176:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <MX_SPI1_Init+0xa8>)
 8002178:	2200      	movs	r2, #0
 800217a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800217c:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <MX_SPI1_Init+0xa8>)
 800217e:	2200      	movs	r2, #0
 8002180:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <MX_SPI1_Init+0xa8>)
 8002184:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002188:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800218a:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <MX_SPI1_Init+0xa8>)
 800218c:	2200      	movs	r2, #0
 800218e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <MX_SPI1_Init+0xa8>)
 8002192:	2200      	movs	r2, #0
 8002194:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <MX_SPI1_Init+0xa8>)
 8002198:	2200      	movs	r2, #0
 800219a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800219c:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <MX_SPI1_Init+0xa8>)
 800219e:	2200      	movs	r2, #0
 80021a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80021a2:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <MX_SPI1_Init+0xa8>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <MX_SPI1_Init+0xa8>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80021ae:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <MX_SPI1_Init+0xa8>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <MX_SPI1_Init+0xa8>)
 80021b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80021ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <MX_SPI1_Init+0xa8>)
 80021be:	2200      	movs	r2, #0
 80021c0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021c2:	4805      	ldr	r0, [pc, #20]	; (80021d8 <MX_SPI1_Init+0xa8>)
 80021c4:	f009 f93c 	bl	800b440 <HAL_SPI_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80021ce:	f7ff fca7 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	240007c8 	.word	0x240007c8
 80021dc:	40013000 	.word	0x40013000

080021e0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80021e4:	4b28      	ldr	r3, [pc, #160]	; (8002288 <MX_SPI2_Init+0xa8>)
 80021e6:	4a29      	ldr	r2, [pc, #164]	; (800228c <MX_SPI2_Init+0xac>)
 80021e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021ea:	4b27      	ldr	r3, [pc, #156]	; (8002288 <MX_SPI2_Init+0xa8>)
 80021ec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80021f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021f2:	4b25      	ldr	r3, [pc, #148]	; (8002288 <MX_SPI2_Init+0xa8>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80021f8:	4b23      	ldr	r3, [pc, #140]	; (8002288 <MX_SPI2_Init+0xa8>)
 80021fa:	2207      	movs	r2, #7
 80021fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021fe:	4b22      	ldr	r3, [pc, #136]	; (8002288 <MX_SPI2_Init+0xa8>)
 8002200:	2200      	movs	r2, #0
 8002202:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002204:	4b20      	ldr	r3, [pc, #128]	; (8002288 <MX_SPI2_Init+0xa8>)
 8002206:	2200      	movs	r2, #0
 8002208:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800220a:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <MX_SPI2_Init+0xa8>)
 800220c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002210:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002212:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <MX_SPI2_Init+0xa8>)
 8002214:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002218:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800221a:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <MX_SPI2_Init+0xa8>)
 800221c:	2200      	movs	r2, #0
 800221e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002220:	4b19      	ldr	r3, [pc, #100]	; (8002288 <MX_SPI2_Init+0xa8>)
 8002222:	2200      	movs	r2, #0
 8002224:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002226:	4b18      	ldr	r3, [pc, #96]	; (8002288 <MX_SPI2_Init+0xa8>)
 8002228:	2200      	movs	r2, #0
 800222a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800222c:	4b16      	ldr	r3, [pc, #88]	; (8002288 <MX_SPI2_Init+0xa8>)
 800222e:	2200      	movs	r2, #0
 8002230:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <MX_SPI2_Init+0xa8>)
 8002234:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002238:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800223a:	4b13      	ldr	r3, [pc, #76]	; (8002288 <MX_SPI2_Init+0xa8>)
 800223c:	2200      	movs	r2, #0
 800223e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002240:	4b11      	ldr	r3, [pc, #68]	; (8002288 <MX_SPI2_Init+0xa8>)
 8002242:	2200      	movs	r2, #0
 8002244:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <MX_SPI2_Init+0xa8>)
 8002248:	2200      	movs	r2, #0
 800224a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800224c:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <MX_SPI2_Init+0xa8>)
 800224e:	2200      	movs	r2, #0
 8002250:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <MX_SPI2_Init+0xa8>)
 8002254:	2200      	movs	r2, #0
 8002256:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <MX_SPI2_Init+0xa8>)
 800225a:	2200      	movs	r2, #0
 800225c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800225e:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <MX_SPI2_Init+0xa8>)
 8002260:	2200      	movs	r2, #0
 8002262:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <MX_SPI2_Init+0xa8>)
 8002266:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800226a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <MX_SPI2_Init+0xa8>)
 800226e:	2200      	movs	r2, #0
 8002270:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002272:	4805      	ldr	r0, [pc, #20]	; (8002288 <MX_SPI2_Init+0xa8>)
 8002274:	f009 f8e4 	bl	800b440 <HAL_SPI_Init>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800227e:	f7ff fc4f 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	24000850 	.word	0x24000850
 800228c:	40003800 	.word	0x40003800

08002290 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002294:	4b28      	ldr	r3, [pc, #160]	; (8002338 <MX_SPI3_Init+0xa8>)
 8002296:	4a29      	ldr	r2, [pc, #164]	; (800233c <MX_SPI3_Init+0xac>)
 8002298:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800229a:	4b27      	ldr	r3, [pc, #156]	; (8002338 <MX_SPI3_Init+0xa8>)
 800229c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80022a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80022a2:	4b25      	ldr	r3, [pc, #148]	; (8002338 <MX_SPI3_Init+0xa8>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80022a8:	4b23      	ldr	r3, [pc, #140]	; (8002338 <MX_SPI3_Init+0xa8>)
 80022aa:	2207      	movs	r2, #7
 80022ac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022ae:	4b22      	ldr	r3, [pc, #136]	; (8002338 <MX_SPI3_Init+0xa8>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022b4:	4b20      	ldr	r3, [pc, #128]	; (8002338 <MX_SPI3_Init+0xa8>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80022ba:	4b1f      	ldr	r3, [pc, #124]	; (8002338 <MX_SPI3_Init+0xa8>)
 80022bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022c0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <MX_SPI3_Init+0xa8>)
 80022c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022c8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022ca:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <MX_SPI3_Init+0xa8>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <MX_SPI3_Init+0xa8>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d6:	4b18      	ldr	r3, [pc, #96]	; (8002338 <MX_SPI3_Init+0xa8>)
 80022d8:	2200      	movs	r2, #0
 80022da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80022dc:	4b16      	ldr	r3, [pc, #88]	; (8002338 <MX_SPI3_Init+0xa8>)
 80022de:	2200      	movs	r2, #0
 80022e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <MX_SPI3_Init+0xa8>)
 80022e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022e8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80022ea:	4b13      	ldr	r3, [pc, #76]	; (8002338 <MX_SPI3_Init+0xa8>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <MX_SPI3_Init+0xa8>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80022f6:	4b10      	ldr	r3, [pc, #64]	; (8002338 <MX_SPI3_Init+0xa8>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80022fc:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <MX_SPI3_Init+0xa8>)
 80022fe:	2200      	movs	r2, #0
 8002300:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002302:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <MX_SPI3_Init+0xa8>)
 8002304:	2200      	movs	r2, #0
 8002306:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <MX_SPI3_Init+0xa8>)
 800230a:	2200      	movs	r2, #0
 800230c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <MX_SPI3_Init+0xa8>)
 8002310:	2200      	movs	r2, #0
 8002312:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <MX_SPI3_Init+0xa8>)
 8002316:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800231a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <MX_SPI3_Init+0xa8>)
 800231e:	2200      	movs	r2, #0
 8002320:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002322:	4805      	ldr	r0, [pc, #20]	; (8002338 <MX_SPI3_Init+0xa8>)
 8002324:	f009 f88c 	bl	800b440 <HAL_SPI_Init>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 800232e:	f7ff fbf7 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	240008d8 	.word	0x240008d8
 800233c:	40003c00 	.word	0x40003c00

08002340 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002344:	4b28      	ldr	r3, [pc, #160]	; (80023e8 <MX_SPI4_Init+0xa8>)
 8002346:	4a29      	ldr	r2, [pc, #164]	; (80023ec <MX_SPI4_Init+0xac>)
 8002348:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800234a:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <MX_SPI4_Init+0xa8>)
 800234c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002350:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002352:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <MX_SPI4_Init+0xa8>)
 8002354:	2200      	movs	r2, #0
 8002356:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002358:	4b23      	ldr	r3, [pc, #140]	; (80023e8 <MX_SPI4_Init+0xa8>)
 800235a:	2207      	movs	r2, #7
 800235c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800235e:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <MX_SPI4_Init+0xa8>)
 8002360:	2200      	movs	r2, #0
 8002362:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002364:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <MX_SPI4_Init+0xa8>)
 8002366:	2200      	movs	r2, #0
 8002368:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800236a:	4b1f      	ldr	r3, [pc, #124]	; (80023e8 <MX_SPI4_Init+0xa8>)
 800236c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002370:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002372:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <MX_SPI4_Init+0xa8>)
 8002374:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002378:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800237a:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <MX_SPI4_Init+0xa8>)
 800237c:	2200      	movs	r2, #0
 800237e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002380:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <MX_SPI4_Init+0xa8>)
 8002382:	2200      	movs	r2, #0
 8002384:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002386:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <MX_SPI4_Init+0xa8>)
 8002388:	2200      	movs	r2, #0
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <MX_SPI4_Init+0xa8>)
 800238e:	2200      	movs	r2, #0
 8002390:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <MX_SPI4_Init+0xa8>)
 8002394:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002398:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800239a:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <MX_SPI4_Init+0xa8>)
 800239c:	2200      	movs	r2, #0
 800239e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <MX_SPI4_Init+0xa8>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <MX_SPI4_Init+0xa8>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80023ac:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <MX_SPI4_Init+0xa8>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <MX_SPI4_Init+0xa8>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <MX_SPI4_Init+0xa8>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80023be:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <MX_SPI4_Init+0xa8>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <MX_SPI4_Init+0xa8>)
 80023c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80023ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <MX_SPI4_Init+0xa8>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80023d2:	4805      	ldr	r0, [pc, #20]	; (80023e8 <MX_SPI4_Init+0xa8>)
 80023d4:	f009 f834 	bl	800b440 <HAL_SPI_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 80023de:	f7ff fb9f 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	24000960 	.word	0x24000960
 80023ec:	40013400 	.word	0x40013400

080023f0 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80023f4:	4b28      	ldr	r3, [pc, #160]	; (8002498 <MX_SPI5_Init+0xa8>)
 80023f6:	4a29      	ldr	r2, [pc, #164]	; (800249c <MX_SPI5_Init+0xac>)
 80023f8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80023fa:	4b27      	ldr	r3, [pc, #156]	; (8002498 <MX_SPI5_Init+0xa8>)
 80023fc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002400:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002402:	4b25      	ldr	r3, [pc, #148]	; (8002498 <MX_SPI5_Init+0xa8>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002408:	4b23      	ldr	r3, [pc, #140]	; (8002498 <MX_SPI5_Init+0xa8>)
 800240a:	2207      	movs	r2, #7
 800240c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800240e:	4b22      	ldr	r3, [pc, #136]	; (8002498 <MX_SPI5_Init+0xa8>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002414:	4b20      	ldr	r3, [pc, #128]	; (8002498 <MX_SPI5_Init+0xa8>)
 8002416:	2200      	movs	r2, #0
 8002418:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800241a:	4b1f      	ldr	r3, [pc, #124]	; (8002498 <MX_SPI5_Init+0xa8>)
 800241c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002420:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002422:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <MX_SPI5_Init+0xa8>)
 8002424:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002428:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800242a:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <MX_SPI5_Init+0xa8>)
 800242c:	2200      	movs	r2, #0
 800242e:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <MX_SPI5_Init+0xa8>)
 8002432:	2200      	movs	r2, #0
 8002434:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002436:	4b18      	ldr	r3, [pc, #96]	; (8002498 <MX_SPI5_Init+0xa8>)
 8002438:	2200      	movs	r2, #0
 800243a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 800243c:	4b16      	ldr	r3, [pc, #88]	; (8002498 <MX_SPI5_Init+0xa8>)
 800243e:	2200      	movs	r2, #0
 8002440:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002442:	4b15      	ldr	r3, [pc, #84]	; (8002498 <MX_SPI5_Init+0xa8>)
 8002444:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002448:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800244a:	4b13      	ldr	r3, [pc, #76]	; (8002498 <MX_SPI5_Init+0xa8>)
 800244c:	2200      	movs	r2, #0
 800244e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <MX_SPI5_Init+0xa8>)
 8002452:	2200      	movs	r2, #0
 8002454:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <MX_SPI5_Init+0xa8>)
 8002458:	2200      	movs	r2, #0
 800245a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800245c:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <MX_SPI5_Init+0xa8>)
 800245e:	2200      	movs	r2, #0
 8002460:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002462:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <MX_SPI5_Init+0xa8>)
 8002464:	2200      	movs	r2, #0
 8002466:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <MX_SPI5_Init+0xa8>)
 800246a:	2200      	movs	r2, #0
 800246c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <MX_SPI5_Init+0xa8>)
 8002470:	2200      	movs	r2, #0
 8002472:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <MX_SPI5_Init+0xa8>)
 8002476:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800247a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <MX_SPI5_Init+0xa8>)
 800247e:	2200      	movs	r2, #0
 8002480:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002482:	4805      	ldr	r0, [pc, #20]	; (8002498 <MX_SPI5_Init+0xa8>)
 8002484:	f008 ffdc 	bl	800b440 <HAL_SPI_Init>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_SPI5_Init+0xa2>
  {
    Error_Handler();
 800248e:	f7ff fb47 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	240009e8 	.word	0x240009e8
 800249c:	40015000 	.word	0x40015000

080024a0 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 80024a4:	4b28      	ldr	r3, [pc, #160]	; (8002548 <MX_SPI6_Init+0xa8>)
 80024a6:	4a29      	ldr	r2, [pc, #164]	; (800254c <MX_SPI6_Init+0xac>)
 80024a8:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 80024aa:	4b27      	ldr	r3, [pc, #156]	; (8002548 <MX_SPI6_Init+0xa8>)
 80024ac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80024b0:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 80024b2:	4b25      	ldr	r3, [pc, #148]	; (8002548 <MX_SPI6_Init+0xa8>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 80024b8:	4b23      	ldr	r3, [pc, #140]	; (8002548 <MX_SPI6_Init+0xa8>)
 80024ba:	2207      	movs	r2, #7
 80024bc:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024be:	4b22      	ldr	r3, [pc, #136]	; (8002548 <MX_SPI6_Init+0xa8>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024c4:	4b20      	ldr	r3, [pc, #128]	; (8002548 <MX_SPI6_Init+0xa8>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 80024ca:	4b1f      	ldr	r3, [pc, #124]	; (8002548 <MX_SPI6_Init+0xa8>)
 80024cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024d0:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80024d2:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <MX_SPI6_Init+0xa8>)
 80024d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80024d8:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024da:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <MX_SPI6_Init+0xa8>)
 80024dc:	2200      	movs	r2, #0
 80024de:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <MX_SPI6_Init+0xa8>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024e6:	4b18      	ldr	r3, [pc, #96]	; (8002548 <MX_SPI6_Init+0xa8>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 80024ec:	4b16      	ldr	r3, [pc, #88]	; (8002548 <MX_SPI6_Init+0xa8>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <MX_SPI6_Init+0xa8>)
 80024f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024f8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80024fa:	4b13      	ldr	r3, [pc, #76]	; (8002548 <MX_SPI6_Init+0xa8>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002500:	4b11      	ldr	r3, [pc, #68]	; (8002548 <MX_SPI6_Init+0xa8>)
 8002502:	2200      	movs	r2, #0
 8002504:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <MX_SPI6_Init+0xa8>)
 8002508:	2200      	movs	r2, #0
 800250a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800250c:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <MX_SPI6_Init+0xa8>)
 800250e:	2200      	movs	r2, #0
 8002510:	645a      	str	r2, [r3, #68]	; 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <MX_SPI6_Init+0xa8>)
 8002514:	2200      	movs	r2, #0
 8002516:	649a      	str	r2, [r3, #72]	; 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <MX_SPI6_Init+0xa8>)
 800251a:	2200      	movs	r2, #0
 800251c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800251e:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <MX_SPI6_Init+0xa8>)
 8002520:	2200      	movs	r2, #0
 8002522:	651a      	str	r2, [r3, #80]	; 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <MX_SPI6_Init+0xa8>)
 8002526:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800252a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800252c:	4b06      	ldr	r3, [pc, #24]	; (8002548 <MX_SPI6_Init+0xa8>)
 800252e:	2200      	movs	r2, #0
 8002530:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8002532:	4805      	ldr	r0, [pc, #20]	; (8002548 <MX_SPI6_Init+0xa8>)
 8002534:	f008 ff84 	bl	800b440 <HAL_SPI_Init>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_SPI6_Init+0xa2>
  {
    Error_Handler();
 800253e:	f7ff faef 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	24000a70 	.word	0x24000a70
 800254c:	58001400 	.word	0x58001400

08002550 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b0c8      	sub	sp, #288	; 0x120
 8002554:	af00      	add	r7, sp, #0
 8002556:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800255a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800255e:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002570:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002574:	22c0      	movs	r2, #192	; 0xc0
 8002576:	2100      	movs	r1, #0
 8002578:	4618      	mov	r0, r3
 800257a:	f00b ff4b 	bl	800e414 <memset>
  if(spiHandle->Instance==SPI1)
 800257e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002582:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4aac      	ldr	r2, [pc, #688]	; (800283c <HAL_SPI_MspInit+0x2ec>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d16a      	bne.n	8002666 <HAL_SPI_MspInit+0x116>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800259c:	2300      	movs	r3, #0
 800259e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025a6:	4618      	mov	r0, r3
 80025a8:	f007 f91e 	bl	80097e8 <HAL_RCCEx_PeriphCLKConfig>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_SPI_MspInit+0x66>
    {
      Error_Handler();
 80025b2:	f7ff fab5 	bl	8001b20 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025b6:	4ba2      	ldr	r3, [pc, #648]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 80025b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025bc:	4aa0      	ldr	r2, [pc, #640]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 80025be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80025c6:	4b9e      	ldr	r3, [pc, #632]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 80025c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d0:	647b      	str	r3, [r7, #68]	; 0x44
 80025d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d4:	4b9a      	ldr	r3, [pc, #616]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 80025d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025da:	4a99      	ldr	r2, [pc, #612]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025e4:	4b96      	ldr	r3, [pc, #600]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 80025e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	643b      	str	r3, [r7, #64]	; 0x40
 80025f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025f2:	4b93      	ldr	r3, [pc, #588]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 80025f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025f8:	4a91      	ldr	r2, [pc, #580]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 80025fa:	f043 0308 	orr.w	r3, r3, #8
 80025fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002602:	4b8f      	ldr	r3, [pc, #572]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 8002604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800260e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002610:	2360      	movs	r3, #96	; 0x60
 8002612:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	2300      	movs	r3, #0
 8002624:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002628:	2305      	movs	r3, #5
 800262a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002632:	4619      	mov	r1, r3
 8002634:	4883      	ldr	r0, [pc, #524]	; (8002844 <HAL_SPI_MspInit+0x2f4>)
 8002636:	f005 fe9f 	bl	8008378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002640:	2302      	movs	r3, #2
 8002642:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264c:	2300      	movs	r3, #0
 800264e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002652:	2305      	movs	r3, #5
 8002654:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002658:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800265c:	4619      	mov	r1, r3
 800265e:	487a      	ldr	r0, [pc, #488]	; (8002848 <HAL_SPI_MspInit+0x2f8>)
 8002660:	f005 fe8a 	bl	8008378 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8002664:	e24b      	b.n	8002afe <HAL_SPI_MspInit+0x5ae>
  else if(spiHandle->Instance==SPI2)
 8002666:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800266a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a76      	ldr	r2, [pc, #472]	; (800284c <HAL_SPI_MspInit+0x2fc>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d16b      	bne.n	8002750 <HAL_SPI_MspInit+0x200>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002678:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002684:	2300      	movs	r3, #0
 8002686:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800268a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800268e:	4618      	mov	r0, r3
 8002690:	f007 f8aa 	bl	80097e8 <HAL_RCCEx_PeriphCLKConfig>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_SPI_MspInit+0x14e>
      Error_Handler();
 800269a:	f7ff fa41 	bl	8001b20 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800269e:	4b68      	ldr	r3, [pc, #416]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 80026a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026a4:	4a66      	ldr	r2, [pc, #408]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 80026a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026ae:	4b64      	ldr	r3, [pc, #400]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 80026b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80026ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026bc:	4b60      	ldr	r3, [pc, #384]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 80026be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c2:	4a5f      	ldr	r2, [pc, #380]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 80026c4:	f043 0304 	orr.w	r3, r3, #4
 80026c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026cc:	4b5c      	ldr	r3, [pc, #368]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 80026ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	637b      	str	r3, [r7, #52]	; 0x34
 80026d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026da:	4b59      	ldr	r3, [pc, #356]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 80026dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026e0:	4a57      	ldr	r2, [pc, #348]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 80026e2:	f043 0302 	orr.w	r3, r3, #2
 80026e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026ea:	4b55      	ldr	r3, [pc, #340]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 80026ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	633b      	str	r3, [r7, #48]	; 0x30
 80026f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026f8:	230c      	movs	r3, #12
 80026fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fe:	2302      	movs	r3, #2
 8002700:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270a:	2300      	movs	r3, #0
 800270c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002710:	2305      	movs	r3, #5
 8002712:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002716:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800271a:	4619      	mov	r1, r3
 800271c:	484c      	ldr	r0, [pc, #304]	; (8002850 <HAL_SPI_MspInit+0x300>)
 800271e:	f005 fe2b 	bl	8008378 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002726:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272a:	2302      	movs	r3, #2
 800272c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002736:	2300      	movs	r3, #0
 8002738:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800273c:	2305      	movs	r3, #5
 800273e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002742:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002746:	4619      	mov	r1, r3
 8002748:	4842      	ldr	r0, [pc, #264]	; (8002854 <HAL_SPI_MspInit+0x304>)
 800274a:	f005 fe15 	bl	8008378 <HAL_GPIO_Init>
}
 800274e:	e1d6      	b.n	8002afe <HAL_SPI_MspInit+0x5ae>
  else if(spiHandle->Instance==SPI3)
 8002750:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002754:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a3e      	ldr	r2, [pc, #248]	; (8002858 <HAL_SPI_MspInit+0x308>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d17c      	bne.n	800285c <HAL_SPI_MspInit+0x30c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002762:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002766:	f04f 0300 	mov.w	r3, #0
 800276a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800276e:	2300      	movs	r3, #0
 8002770:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002774:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002778:	4618      	mov	r0, r3
 800277a:	f007 f835 	bl	80097e8 <HAL_RCCEx_PeriphCLKConfig>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <HAL_SPI_MspInit+0x238>
      Error_Handler();
 8002784:	f7ff f9cc 	bl	8001b20 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002788:	4b2d      	ldr	r3, [pc, #180]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 800278a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800278e:	4a2c      	ldr	r2, [pc, #176]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 8002790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002794:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002798:	4b29      	ldr	r3, [pc, #164]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 800279a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800279e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a6:	4b26      	ldr	r3, [pc, #152]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 80027a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ac:	4a24      	ldr	r2, [pc, #144]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 80027ae:	f043 0302 	orr.w	r3, r3, #2
 80027b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027b6:	4b22      	ldr	r3, [pc, #136]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 80027b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027c4:	4b1e      	ldr	r3, [pc, #120]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 80027c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ca:	4a1d      	ldr	r2, [pc, #116]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 80027cc:	f043 0304 	orr.w	r3, r3, #4
 80027d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027d4:	4b1a      	ldr	r3, [pc, #104]	; (8002840 <HAL_SPI_MspInit+0x2f0>)
 80027d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027e2:	2304      	movs	r3, #4
 80027e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e8:	2302      	movs	r3, #2
 80027ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80027fa:	2307      	movs	r3, #7
 80027fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002800:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002804:	4619      	mov	r1, r3
 8002806:	4813      	ldr	r0, [pc, #76]	; (8002854 <HAL_SPI_MspInit+0x304>)
 8002808:	f005 fdb6 	bl	8008378 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800280c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002810:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002814:	2302      	movs	r3, #2
 8002816:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002820:	2300      	movs	r3, #0
 8002822:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002826:	2306      	movs	r3, #6
 8002828:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800282c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002830:	4619      	mov	r1, r3
 8002832:	4807      	ldr	r0, [pc, #28]	; (8002850 <HAL_SPI_MspInit+0x300>)
 8002834:	f005 fda0 	bl	8008378 <HAL_GPIO_Init>
}
 8002838:	e161      	b.n	8002afe <HAL_SPI_MspInit+0x5ae>
 800283a:	bf00      	nop
 800283c:	40013000 	.word	0x40013000
 8002840:	58024400 	.word	0x58024400
 8002844:	58020000 	.word	0x58020000
 8002848:	58020c00 	.word	0x58020c00
 800284c:	40003800 	.word	0x40003800
 8002850:	58020800 	.word	0x58020800
 8002854:	58020400 	.word	0x58020400
 8002858:	40003c00 	.word	0x40003c00
  else if(spiHandle->Instance==SPI4)
 800285c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002860:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4aa7      	ldr	r2, [pc, #668]	; (8002b08 <HAL_SPI_MspInit+0x5b8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d157      	bne.n	800291e <HAL_SPI_MspInit+0x3ce>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800286e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSE;
 800287a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800287e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002882:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002886:	4618      	mov	r0, r3
 8002888:	f006 ffae 	bl	80097e8 <HAL_RCCEx_PeriphCLKConfig>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_SPI_MspInit+0x346>
      Error_Handler();
 8002892:	f7ff f945 	bl	8001b20 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002896:	4b9d      	ldr	r3, [pc, #628]	; (8002b0c <HAL_SPI_MspInit+0x5bc>)
 8002898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800289c:	4a9b      	ldr	r2, [pc, #620]	; (8002b0c <HAL_SPI_MspInit+0x5bc>)
 800289e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028a6:	4b99      	ldr	r3, [pc, #612]	; (8002b0c <HAL_SPI_MspInit+0x5bc>)
 80028a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80028b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80028b4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80028be:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80028c2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028c4:	4b91      	ldr	r3, [pc, #580]	; (8002b0c <HAL_SPI_MspInit+0x5bc>)
 80028c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ca:	4a90      	ldr	r2, [pc, #576]	; (8002b0c <HAL_SPI_MspInit+0x5bc>)
 80028cc:	f043 0310 	orr.w	r3, r3, #16
 80028d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028d4:	4b8d      	ldr	r3, [pc, #564]	; (8002b0c <HAL_SPI_MspInit+0x5bc>)
 80028d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028da:	f003 0210 	and.w	r2, r3, #16
 80028de:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80028e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80028ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80028f0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80028f2:	2364      	movs	r3, #100	; 0x64
 80028f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f8:	2302      	movs	r3, #2
 80028fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002904:	2300      	movs	r3, #0
 8002906:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800290a:	2305      	movs	r3, #5
 800290c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002910:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002914:	4619      	mov	r1, r3
 8002916:	487e      	ldr	r0, [pc, #504]	; (8002b10 <HAL_SPI_MspInit+0x5c0>)
 8002918:	f005 fd2e 	bl	8008378 <HAL_GPIO_Init>
}
 800291c:	e0ef      	b.n	8002afe <HAL_SPI_MspInit+0x5ae>
  else if(spiHandle->Instance==SPI5)
 800291e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002922:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a7a      	ldr	r2, [pc, #488]	; (8002b14 <HAL_SPI_MspInit+0x5c4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d158      	bne.n	80029e2 <HAL_SPI_MspInit+0x492>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8002930:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSE;
 800293c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002940:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002944:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002948:	4618      	mov	r0, r3
 800294a:	f006 ff4d 	bl	80097e8 <HAL_RCCEx_PeriphCLKConfig>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_SPI_MspInit+0x408>
      Error_Handler();
 8002954:	f7ff f8e4 	bl	8001b20 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002958:	4b6c      	ldr	r3, [pc, #432]	; (8002b0c <HAL_SPI_MspInit+0x5bc>)
 800295a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800295e:	4a6b      	ldr	r2, [pc, #428]	; (8002b0c <HAL_SPI_MspInit+0x5bc>)
 8002960:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002964:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002968:	4b68      	ldr	r3, [pc, #416]	; (8002b0c <HAL_SPI_MspInit+0x5bc>)
 800296a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800296e:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8002972:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002984:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002986:	4b61      	ldr	r3, [pc, #388]	; (8002b0c <HAL_SPI_MspInit+0x5bc>)
 8002988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800298c:	4a5f      	ldr	r2, [pc, #380]	; (8002b0c <HAL_SPI_MspInit+0x5bc>)
 800298e:	f043 0320 	orr.w	r3, r3, #32
 8002992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002996:	4b5d      	ldr	r3, [pc, #372]	; (8002b0c <HAL_SPI_MspInit+0x5bc>)
 8002998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800299c:	f003 0220 	and.w	r2, r3, #32
 80029a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80029a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80029ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029b2:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80029b4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80029b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029bc:	2302      	movs	r3, #2
 80029be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c8:	2300      	movs	r3, #0
 80029ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80029ce:	2305      	movs	r3, #5
 80029d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029d4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80029d8:	4619      	mov	r1, r3
 80029da:	484f      	ldr	r0, [pc, #316]	; (8002b18 <HAL_SPI_MspInit+0x5c8>)
 80029dc:	f005 fccc 	bl	8008378 <HAL_GPIO_Init>
}
 80029e0:	e08d      	b.n	8002afe <HAL_SPI_MspInit+0x5ae>
  else if(spiHandle->Instance==SPI6)
 80029e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80029e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a4b      	ldr	r2, [pc, #300]	; (8002b1c <HAL_SPI_MspInit+0x5cc>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	f040 8084 	bne.w	8002afe <HAL_SPI_MspInit+0x5ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 80029f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_HSE;
 8002a02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a06:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f006 feea 	bl	80097e8 <HAL_RCCEx_PeriphCLKConfig>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_SPI_MspInit+0x4ce>
      Error_Handler();
 8002a1a:	f7ff f881 	bl	8001b20 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8002a1e:	4b3b      	ldr	r3, [pc, #236]	; (8002b0c <HAL_SPI_MspInit+0x5bc>)
 8002a20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a24:	4a39      	ldr	r2, [pc, #228]	; (8002b0c <HAL_SPI_MspInit+0x5bc>)
 8002a26:	f043 0320 	orr.w	r3, r3, #32
 8002a2a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a2e:	4b37      	ldr	r3, [pc, #220]	; (8002b0c <HAL_SPI_MspInit+0x5bc>)
 8002a30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a34:	f003 0220 	and.w	r2, r3, #32
 8002a38:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002a3c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002a46:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a4a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a4c:	4b2f      	ldr	r3, [pc, #188]	; (8002b0c <HAL_SPI_MspInit+0x5bc>)
 8002a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a52:	4a2e      	ldr	r2, [pc, #184]	; (8002b0c <HAL_SPI_MspInit+0x5bc>)
 8002a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a5c:	4b2b      	ldr	r3, [pc, #172]	; (8002b0c <HAL_SPI_MspInit+0x5bc>)
 8002a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a62:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002a66:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002a6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002a74:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a78:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7a:	4b24      	ldr	r3, [pc, #144]	; (8002b0c <HAL_SPI_MspInit+0x5bc>)
 8002a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a80:	4a22      	ldr	r2, [pc, #136]	; (8002b0c <HAL_SPI_MspInit+0x5bc>)
 8002a82:	f043 0302 	orr.w	r3, r3, #2
 8002a86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a8a:	4b20      	ldr	r3, [pc, #128]	; (8002b0c <HAL_SPI_MspInit+0x5bc>)
 8002a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a90:	f003 0202 	and.w	r2, r3, #2
 8002a94:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002a98:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002aa2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002aa6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8002aa8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002aac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abc:	2300      	movs	r3, #0
 8002abe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8002ac2:	2305      	movs	r3, #5
 8002ac4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ac8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002acc:	4619      	mov	r1, r3
 8002ace:	4814      	ldr	r0, [pc, #80]	; (8002b20 <HAL_SPI_MspInit+0x5d0>)
 8002ad0:	f005 fc52 	bl	8008378 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ad4:	2308      	movs	r3, #8
 8002ad6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	2302      	movs	r3, #2
 8002adc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8002aec:	2308      	movs	r3, #8
 8002aee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002af6:	4619      	mov	r1, r3
 8002af8:	480a      	ldr	r0, [pc, #40]	; (8002b24 <HAL_SPI_MspInit+0x5d4>)
 8002afa:	f005 fc3d 	bl	8008378 <HAL_GPIO_Init>
}
 8002afe:	bf00      	nop
 8002b00:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40013400 	.word	0x40013400
 8002b0c:	58024400 	.word	0x58024400
 8002b10:	58021000 	.word	0x58021000
 8002b14:	40015000 	.word	0x40015000
 8002b18:	58021400 	.word	0x58021400
 8002b1c:	58001400 	.word	0x58001400
 8002b20:	58021800 	.word	0x58021800
 8002b24:	58020400 	.word	0x58020400

08002b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <HAL_MspInit+0x30>)
 8002b30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b34:	4a08      	ldr	r2, [pc, #32]	; (8002b58 <HAL_MspInit+0x30>)
 8002b36:	f043 0302 	orr.w	r3, r3, #2
 8002b3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_MspInit+0x30>)
 8002b40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	607b      	str	r3, [r7, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	58024400 	.word	0x58024400

08002b5c <NMI_Handler>:
/*           Cortex Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002b60:	e7fe      	b.n	8002b60 <NMI_Handler+0x4>

08002b62 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8002b66:	e7fe      	b.n	8002b66 <HardFault_Handler+0x4>

08002b68 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8002b6c:	e7fe      	b.n	8002b6c <MemManage_Handler+0x4>

08002b6e <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8002b72:	e7fe      	b.n	8002b72 <BusFault_Handler+0x4>

08002b74 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8002b78:	e7fe      	b.n	8002b78 <UsageFault_Handler+0x4>

08002b7a <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8002b7a:	b480      	push	{r7}
 8002b7c:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8002b96:	b480      	push	{r7}
 8002b98:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8002ba8:	f001 fa3a 	bl	8004020 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8002bac:	bf00      	nop
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <DMA1_Stream0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 stream0 global interrupt.
 */
void DMA1_Stream0_IRQHandler(void) {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

	/* USER CODE END DMA1_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002bb4:	4802      	ldr	r0, [pc, #8]	; (8002bc0 <DMA1_Stream0_IRQHandler+0x10>)
 8002bb6:	f002 fe99 	bl	80058ec <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

	/* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	24000cc0 	.word	0x24000cc0

08002bc4 <DMA1_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA1 stream1 global interrupt.
 */
void DMA1_Stream1_IRQHandler(void) {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

	/* USER CODE END DMA1_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002bc8:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <DMA1_Stream1_IRQHandler+0x10>)
 8002bca:	f002 fe8f 	bl	80058ec <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

	/* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	24000d38 	.word	0x24000d38

08002bd8 <DMA1_Stream2_IRQHandler>:

/**
 * @brief This function handles DMA1 stream2 global interrupt.
 */
void DMA1_Stream2_IRQHandler(void) {
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

	/* USER CODE END DMA1_Stream2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002bdc:	4802      	ldr	r0, [pc, #8]	; (8002be8 <DMA1_Stream2_IRQHandler+0x10>)
 8002bde:	f002 fe85 	bl	80058ec <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

	/* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	24000db0 	.word	0x24000db0

08002bec <DMA1_Stream3_IRQHandler>:

/**
 * @brief This function handles DMA1 stream3 global interrupt.
 */
void DMA1_Stream3_IRQHandler(void) {
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

	/* USER CODE END DMA1_Stream3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002bf0:	4802      	ldr	r0, [pc, #8]	; (8002bfc <DMA1_Stream3_IRQHandler+0x10>)
 8002bf2:	f002 fe7b 	bl	80058ec <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

	/* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	24000e28 	.word	0x24000e28

08002c00 <FDCAN1_IT0_IRQHandler>:

/**
 * @brief This function handles FDCAN1 interrupt 0.
 */
void FDCAN1_IT0_IRQHandler(void) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

	IRQ_flag++;
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <FDCAN1_IT0_IRQHandler+0x20>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	4a05      	ldr	r2, [pc, #20]	; (8002c20 <FDCAN1_IT0_IRQHandler+0x20>)
 8002c0c:	6013      	str	r3, [r2, #0]

	/* USER CODE END FDCAN1_IT0_IRQn 0 */
	HAL_FDCAN_IRQHandler(&hfdcan1);
 8002c0e:	4805      	ldr	r0, [pc, #20]	; (8002c24 <FDCAN1_IT0_IRQHandler+0x24>)
 8002c10:	f004 fea4 	bl	800795c <HAL_FDCAN_IRQHandler>
	/* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

	HAL_FDCAN_IRQHandler(&hfdcan1);
 8002c14:	4803      	ldr	r0, [pc, #12]	; (8002c24 <FDCAN1_IT0_IRQHandler+0x24>)
 8002c16:	f004 fea1 	bl	800795c <HAL_FDCAN_IRQHandler>
//			RxData_From_Node2) != HAL_OK) {
//
//	}

	/* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	24000b00 	.word	0x24000b00
 8002c24:	240000e0 	.word	0x240000e0

08002c28 <FDCAN1_IT1_IRQHandler>:

/**
 * @brief This function handles FDCAN1 interrupt 1.
 */
void FDCAN1_IT1_IRQHandler(void) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */
	IRQ_flag++;
 8002c2c:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <FDCAN1_IT1_IRQHandler+0x18>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	3301      	adds	r3, #1
 8002c32:	4a03      	ldr	r2, [pc, #12]	; (8002c40 <FDCAN1_IT1_IRQHandler+0x18>)
 8002c34:	6013      	str	r3, [r2, #0]

	/* USER CODE END FDCAN1_IT1_IRQn 0 */
	HAL_FDCAN_IRQHandler(&hfdcan1);
 8002c36:	4803      	ldr	r0, [pc, #12]	; (8002c44 <FDCAN1_IT1_IRQHandler+0x1c>)
 8002c38:	f004 fe90 	bl	800795c <HAL_FDCAN_IRQHandler>
	/* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

	/* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	24000b00 	.word	0x24000b00
 8002c44:	240000e0 	.word	0x240000e0

08002c48 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8002c4c:	4802      	ldr	r0, [pc, #8]	; (8002c58 <USART1_IRQHandler+0x10>)
 8002c4e:	f009 fca3 	bl	800c598 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	24000b98 	.word	0x24000b98
 8002c5c:	00000000 	.word	0x00000000

08002c60 <TIM7_IRQHandler>:

/**
 * @brief This function handles TIM7 global interrupt.
 */
void TIM7_IRQHandler(void) {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN TIM7_IRQn 0 */
	// motor control period 0.04ms
	// timer period 0.0001s (0.1ms)
	HAL_TIM_IRQHandler(&htim7);
 8002c66:	48a6      	ldr	r0, [pc, #664]	; (8002f00 <TIM7_IRQHandler+0x2a0>)
 8002c68:	f009 f8e2 	bl	800be30 <HAL_TIM_IRQHandler>

	ctl_timer++;
 8002c6c:	4ba5      	ldr	r3, [pc, #660]	; (8002f04 <TIM7_IRQHandler+0x2a4>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	3301      	adds	r3, #1
 8002c72:	4aa4      	ldr	r2, [pc, #656]	; (8002f04 <TIM7_IRQHandler+0x2a4>)
 8002c74:	6013      	str	r3, [r2, #0]
	Tx_start_timer++;
 8002c76:	4ba4      	ldr	r3, [pc, #656]	; (8002f08 <TIM7_IRQHandler+0x2a8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	4aa2      	ldr	r2, [pc, #648]	; (8002f08 <TIM7_IRQHandler+0x2a8>)
 8002c7e:	6013      	str	r3, [r2, #0]
	Actuator_flag++;
 8002c80:	4ba2      	ldr	r3, [pc, #648]	; (8002f0c <TIM7_IRQHandler+0x2ac>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	3301      	adds	r3, #1
 8002c86:	4aa1      	ldr	r2, [pc, #644]	; (8002f0c <TIM7_IRQHandler+0x2ac>)
 8002c88:	6013      	str	r3, [r2, #0]

	if ((Tx_start_timer % 100) == 0) {
 8002c8a:	4b9f      	ldr	r3, [pc, #636]	; (8002f08 <TIM7_IRQHandler+0x2a8>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	4ba0      	ldr	r3, [pc, #640]	; (8002f10 <TIM7_IRQHandler+0x2b0>)
 8002c90:	fb83 1302 	smull	r1, r3, r3, r2
 8002c94:	1159      	asrs	r1, r3, #5
 8002c96:	17d3      	asrs	r3, r2, #31
 8002c98:	1acb      	subs	r3, r1, r3
 8002c9a:	2164      	movs	r1, #100	; 0x64
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d16f      	bne.n	8002d86 <TIM7_IRQHandler+0x126>

		getPosSPI1(&absoluteEn_1);
 8002ca6:	489b      	ldr	r0, [pc, #620]	; (8002f14 <TIM7_IRQHandler+0x2b4>)
 8002ca8:	f7fd fe30 	bl	800090c <getPosSPI1>
		m_state_1.angle = absoluteEn_1.spiPos * (360.0 / 4096.0);
 8002cac:	4b99      	ldr	r3, [pc, #612]	; (8002f14 <TIM7_IRQHandler+0x2b4>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	ee07 3a90 	vmov	s15, r3
 8002cb4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002cb8:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8002ef0 <TIM7_IRQHandler+0x290>
 8002cbc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002cc0:	4b95      	ldr	r3, [pc, #596]	; (8002f18 <TIM7_IRQHandler+0x2b8>)
 8002cc2:	ed83 7b00 	vstr	d7, [r3]
		getPosSPI3(&absoluteEn_2);
 8002cc6:	4895      	ldr	r0, [pc, #596]	; (8002f1c <TIM7_IRQHandler+0x2bc>)
 8002cc8:	f7fd fe8a 	bl	80009e0 <getPosSPI3>
		m_state_2.angle = absoluteEn_2.spiPos * (360.0 / 4096.0);
 8002ccc:	4b93      	ldr	r3, [pc, #588]	; (8002f1c <TIM7_IRQHandler+0x2bc>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	ee07 3a90 	vmov	s15, r3
 8002cd4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002cd8:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8002ef0 <TIM7_IRQHandler+0x290>
 8002cdc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002ce0:	4b8f      	ldr	r3, [pc, #572]	; (8002f20 <TIM7_IRQHandler+0x2c0>)
 8002ce2:	ed83 7b00 	vstr	d7, [r3]
		getPosSPI5(&absoluteEn_3);
 8002ce6:	488f      	ldr	r0, [pc, #572]	; (8002f24 <TIM7_IRQHandler+0x2c4>)
 8002ce8:	f7fd fee4 	bl	8000ab4 <getPosSPI5>
		m_state_3.angle = absoluteEn_3.spiPos * (360.0 / 4096.0);
 8002cec:	4b8d      	ldr	r3, [pc, #564]	; (8002f24 <TIM7_IRQHandler+0x2c4>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	ee07 3a90 	vmov	s15, r3
 8002cf4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002cf8:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8002ef0 <TIM7_IRQHandler+0x290>
 8002cfc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d00:	4b89      	ldr	r3, [pc, #548]	; (8002f28 <TIM7_IRQHandler+0x2c8>)
 8002d02:	ed83 7b00 	vstr	d7, [r3]

		Tx_buffer[0] = 97;
 8002d06:	4b89      	ldr	r3, [pc, #548]	; (8002f2c <TIM7_IRQHandler+0x2cc>)
 8002d08:	2261      	movs	r2, #97	; 0x61
 8002d0a:	701a      	strb	r2, [r3, #0]
		sprintf(&Tx_buffer[1], "%d", (int) (m_state_1.angle * 100));
 8002d0c:	4b82      	ldr	r3, [pc, #520]	; (8002f18 <TIM7_IRQHandler+0x2b8>)
 8002d0e:	ed93 7b00 	vldr	d7, [r3]
 8002d12:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8002ef8 <TIM7_IRQHandler+0x298>
 8002d16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d1a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002d1e:	ee17 2a90 	vmov	r2, s15
 8002d22:	4983      	ldr	r1, [pc, #524]	; (8002f30 <TIM7_IRQHandler+0x2d0>)
 8002d24:	4883      	ldr	r0, [pc, #524]	; (8002f34 <TIM7_IRQHandler+0x2d4>)
 8002d26:	f00b fb7d 	bl	800e424 <siprintf>
		Tx_buffer[6] = 98;
 8002d2a:	4b80      	ldr	r3, [pc, #512]	; (8002f2c <TIM7_IRQHandler+0x2cc>)
 8002d2c:	2262      	movs	r2, #98	; 0x62
 8002d2e:	719a      	strb	r2, [r3, #6]
		sprintf(&Tx_buffer[7], "%d", (int) (m_state_2.angle * 100));
 8002d30:	4b7b      	ldr	r3, [pc, #492]	; (8002f20 <TIM7_IRQHandler+0x2c0>)
 8002d32:	ed93 7b00 	vldr	d7, [r3]
 8002d36:	ed9f 6b70 	vldr	d6, [pc, #448]	; 8002ef8 <TIM7_IRQHandler+0x298>
 8002d3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d3e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002d42:	ee17 2a90 	vmov	r2, s15
 8002d46:	497a      	ldr	r1, [pc, #488]	; (8002f30 <TIM7_IRQHandler+0x2d0>)
 8002d48:	487b      	ldr	r0, [pc, #492]	; (8002f38 <TIM7_IRQHandler+0x2d8>)
 8002d4a:	f00b fb6b 	bl	800e424 <siprintf>
		Tx_buffer[12] = 99;
 8002d4e:	4b77      	ldr	r3, [pc, #476]	; (8002f2c <TIM7_IRQHandler+0x2cc>)
 8002d50:	2263      	movs	r2, #99	; 0x63
 8002d52:	731a      	strb	r2, [r3, #12]
		sprintf(&Tx_buffer[13], "%d", (int) (m_state_3.angle * 100));
 8002d54:	4b74      	ldr	r3, [pc, #464]	; (8002f28 <TIM7_IRQHandler+0x2c8>)
 8002d56:	ed93 7b00 	vldr	d7, [r3]
 8002d5a:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8002ef8 <TIM7_IRQHandler+0x298>
 8002d5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d62:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002d66:	ee17 2a90 	vmov	r2, s15
 8002d6a:	4971      	ldr	r1, [pc, #452]	; (8002f30 <TIM7_IRQHandler+0x2d0>)
 8002d6c:	4873      	ldr	r0, [pc, #460]	; (8002f3c <TIM7_IRQHandler+0x2dc>)
 8002d6e:	f00b fb59 	bl	800e424 <siprintf>

		HAL_UART_Transmit_DMA(&huart6, Tx_buffer, strlen(Tx_buffer));
 8002d72:	486e      	ldr	r0, [pc, #440]	; (8002f2c <TIM7_IRQHandler+0x2cc>)
 8002d74:	f7fd fab4 	bl	80002e0 <strlen>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	496b      	ldr	r1, [pc, #428]	; (8002f2c <TIM7_IRQHandler+0x2cc>)
 8002d80:	486f      	ldr	r0, [pc, #444]	; (8002f40 <TIM7_IRQHandler+0x2e0>)
 8002d82:	f009 fb3d 	bl	800c400 <HAL_UART_Transmit_DMA>
	}

	if (mode_switch == 1) {
 8002d86:	4b6f      	ldr	r3, [pc, #444]	; (8002f44 <TIM7_IRQHandler+0x2e4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	f040 8309 	bne.w	80033a2 <TIM7_IRQHandler+0x742>
		if ((ctl_timer % 40) == 0) {
 8002d90:	4b5c      	ldr	r3, [pc, #368]	; (8002f04 <TIM7_IRQHandler+0x2a4>)
 8002d92:	6819      	ldr	r1, [r3, #0]
 8002d94:	4b6c      	ldr	r3, [pc, #432]	; (8002f48 <TIM7_IRQHandler+0x2e8>)
 8002d96:	fb83 2301 	smull	r2, r3, r3, r1
 8002d9a:	111a      	asrs	r2, r3, #4
 8002d9c:	17cb      	asrs	r3, r1, #31
 8002d9e:	1ad2      	subs	r2, r2, r3
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	1aca      	subs	r2, r1, r3
 8002daa:	2a00      	cmp	r2, #0
 8002dac:	f040 8173 	bne.w	8003096 <TIM7_IRQHandler+0x436>
			angle_1_temp = m_state_1.angle + tuning_ang_1;
 8002db0:	4b59      	ldr	r3, [pc, #356]	; (8002f18 <TIM7_IRQHandler+0x2b8>)
 8002db2:	ed93 6b00 	vldr	d6, [r3]
 8002db6:	4b65      	ldr	r3, [pc, #404]	; (8002f4c <TIM7_IRQHandler+0x2ec>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	ee07 3a90 	vmov	s15, r3
 8002dbe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002dc2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002dc6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002dca:	ee17 2a90 	vmov	r2, s15
 8002dce:	4b60      	ldr	r3, [pc, #384]	; (8002f50 <TIM7_IRQHandler+0x2f0>)
 8002dd0:	601a      	str	r2, [r3, #0]
			angle_2_temp = m_state_2.angle + tuning_ang_2;
 8002dd2:	4b53      	ldr	r3, [pc, #332]	; (8002f20 <TIM7_IRQHandler+0x2c0>)
 8002dd4:	ed93 6b00 	vldr	d6, [r3]
 8002dd8:	4b5e      	ldr	r3, [pc, #376]	; (8002f54 <TIM7_IRQHandler+0x2f4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	ee07 3a90 	vmov	s15, r3
 8002de0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002de4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002de8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002dec:	ee17 2a90 	vmov	r2, s15
 8002df0:	4b59      	ldr	r3, [pc, #356]	; (8002f58 <TIM7_IRQHandler+0x2f8>)
 8002df2:	601a      	str	r2, [r3, #0]
			angle_3_temp = m_state_3.angle + tuning_ang_3;
 8002df4:	4b4c      	ldr	r3, [pc, #304]	; (8002f28 <TIM7_IRQHandler+0x2c8>)
 8002df6:	ed93 6b00 	vldr	d6, [r3]
 8002dfa:	4b58      	ldr	r3, [pc, #352]	; (8002f5c <TIM7_IRQHandler+0x2fc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	ee07 3a90 	vmov	s15, r3
 8002e02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002e06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002e0a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002e0e:	ee17 2a90 	vmov	r2, s15
 8002e12:	4b53      	ldr	r3, [pc, #332]	; (8002f60 <TIM7_IRQHandler+0x300>)
 8002e14:	601a      	str	r2, [r3, #0]

			//Position_Controller
			if (imp_1.F_flag == 1 || imp_2.F_flag == 1 || imp_3.F_flag == 1)
 8002e16:	4b53      	ldr	r3, [pc, #332]	; (8002f64 <TIM7_IRQHandler+0x304>)
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d007      	beq.n	8002e2e <TIM7_IRQHandler+0x1ce>
 8002e1e:	4b52      	ldr	r3, [pc, #328]	; (8002f68 <TIM7_IRQHandler+0x308>)
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d003      	beq.n	8002e2e <TIM7_IRQHandler+0x1ce>
 8002e26:	4b51      	ldr	r3, [pc, #324]	; (8002f6c <TIM7_IRQHandler+0x30c>)
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d129      	bne.n	8002e82 <TIM7_IRQHandler+0x222>
			{
				pos_ctl_1.goal = imp_1.theta + tuning_ang_1;
 8002e2e:	4b4d      	ldr	r3, [pc, #308]	; (8002f64 <TIM7_IRQHandler+0x304>)
 8002e30:	ed93 6b02 	vldr	d6, [r3, #8]
 8002e34:	4b45      	ldr	r3, [pc, #276]	; (8002f4c <TIM7_IRQHandler+0x2ec>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	ee07 3a90 	vmov	s15, r3
 8002e3c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002e40:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002e44:	4b4a      	ldr	r3, [pc, #296]	; (8002f70 <TIM7_IRQHandler+0x310>)
 8002e46:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
				pos_ctl_2.goal = imp_2.theta + tuning_ang_2;
 8002e4a:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <TIM7_IRQHandler+0x308>)
 8002e4c:	ed93 6b02 	vldr	d6, [r3, #8]
 8002e50:	4b40      	ldr	r3, [pc, #256]	; (8002f54 <TIM7_IRQHandler+0x2f4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	ee07 3a90 	vmov	s15, r3
 8002e58:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002e5c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002e60:	4b44      	ldr	r3, [pc, #272]	; (8002f74 <TIM7_IRQHandler+0x314>)
 8002e62:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
				pos_ctl_3.goal = imp_3.theta + tuning_ang_3;
 8002e66:	4b41      	ldr	r3, [pc, #260]	; (8002f6c <TIM7_IRQHandler+0x30c>)
 8002e68:	ed93 6b02 	vldr	d6, [r3, #8]
 8002e6c:	4b3b      	ldr	r3, [pc, #236]	; (8002f5c <TIM7_IRQHandler+0x2fc>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	ee07 3a90 	vmov	s15, r3
 8002e74:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002e78:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002e7c:	4b3e      	ldr	r3, [pc, #248]	; (8002f78 <TIM7_IRQHandler+0x318>)
 8002e7e:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78

//			pos_ctl_1.goal = imp_1.theta;
//			pos_ctl_2.goal = imp_2.theta;
//			pos_ctl_3.goal = imp_3.theta;

			vel_ctl_1.goal = Position_Controller(&pos_ctl_1, &m_state_1,
 8002e82:	4a3e      	ldr	r2, [pc, #248]	; (8002f7c <TIM7_IRQHandler+0x31c>)
 8002e84:	4924      	ldr	r1, [pc, #144]	; (8002f18 <TIM7_IRQHandler+0x2b8>)
 8002e86:	483a      	ldr	r0, [pc, #232]	; (8002f70 <TIM7_IRQHandler+0x310>)
 8002e88:	f7fe fe51 	bl	8001b2e <Position_Controller>
 8002e8c:	eeb0 7b40 	vmov.f64	d7, d0
 8002e90:	4b3b      	ldr	r3, [pc, #236]	; (8002f80 <TIM7_IRQHandler+0x320>)
 8002e92:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
					&profile_1);
			vel_ctl_2.goal = Position_Controller(&pos_ctl_2, &m_state_2,
 8002e96:	4a3b      	ldr	r2, [pc, #236]	; (8002f84 <TIM7_IRQHandler+0x324>)
 8002e98:	4921      	ldr	r1, [pc, #132]	; (8002f20 <TIM7_IRQHandler+0x2c0>)
 8002e9a:	4836      	ldr	r0, [pc, #216]	; (8002f74 <TIM7_IRQHandler+0x314>)
 8002e9c:	f7fe fe47 	bl	8001b2e <Position_Controller>
 8002ea0:	eeb0 7b40 	vmov.f64	d7, d0
 8002ea4:	4b38      	ldr	r3, [pc, #224]	; (8002f88 <TIM7_IRQHandler+0x328>)
 8002ea6:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
					&profile_2);
			vel_ctl_3.goal = Position_Controller(&pos_ctl_3, &m_state_3,
 8002eaa:	4a38      	ldr	r2, [pc, #224]	; (8002f8c <TIM7_IRQHandler+0x32c>)
 8002eac:	491e      	ldr	r1, [pc, #120]	; (8002f28 <TIM7_IRQHandler+0x2c8>)
 8002eae:	4832      	ldr	r0, [pc, #200]	; (8002f78 <TIM7_IRQHandler+0x318>)
 8002eb0:	f7fe fe3d 	bl	8001b2e <Position_Controller>
 8002eb4:	eeb0 7b40 	vmov.f64	d7, d0
 8002eb8:	4b35      	ldr	r3, [pc, #212]	; (8002f90 <TIM7_IRQHandler+0x330>)
 8002eba:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
					&profile_3);

			if (pos_ctl_1.goal < pos_min_limit)
 8002ebe:	4b2c      	ldr	r3, [pc, #176]	; (8002f70 <TIM7_IRQHandler+0x310>)
 8002ec0:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 8002ec4:	4b33      	ldr	r3, [pc, #204]	; (8002f94 <TIM7_IRQHandler+0x334>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	ee07 3a90 	vmov	s15, r3
 8002ecc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ed0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed8:	d55e      	bpl.n	8002f98 <TIM7_IRQHandler+0x338>
				pos_ctl_1.goal = pos_min_limit;
 8002eda:	4b2e      	ldr	r3, [pc, #184]	; (8002f94 <TIM7_IRQHandler+0x334>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	ee07 3a90 	vmov	s15, r3
 8002ee2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ee6:	4b22      	ldr	r3, [pc, #136]	; (8002f70 <TIM7_IRQHandler+0x310>)
 8002ee8:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
 8002eec:	e06b      	b.n	8002fc6 <TIM7_IRQHandler+0x366>
 8002eee:	bf00      	nop
 8002ef0:	00000000 	.word	0x00000000
 8002ef4:	3fb68000 	.word	0x3fb68000
 8002ef8:	00000000 	.word	0x00000000
 8002efc:	40590000 	.word	0x40590000
 8002f00:	24000b4c 	.word	0x24000b4c
 8002f04:	24000b28 	.word	0x24000b28
 8002f08:	24000b34 	.word	0x24000b34
 8002f0c:	24000af8 	.word	0x24000af8
 8002f10:	51eb851f 	.word	0x51eb851f
 8002f14:	240000ac 	.word	0x240000ac
 8002f18:	24000700 	.word	0x24000700
 8002f1c:	240000bc 	.word	0x240000bc
 8002f20:	24000728 	.word	0x24000728
 8002f24:	240000cc 	.word	0x240000cc
 8002f28:	24000750 	.word	0x24000750
 8002f2c:	2400031c 	.word	0x2400031c
 8002f30:	0800ecfc 	.word	0x0800ecfc
 8002f34:	2400031d 	.word	0x2400031d
 8002f38:	24000323 	.word	0x24000323
 8002f3c:	24000329 	.word	0x24000329
 8002f40:	24000c2c 	.word	0x24000c2c
 8002f44:	24000338 	.word	0x24000338
 8002f48:	66666667 	.word	0x66666667
 8002f4c:	24000b3c 	.word	0x24000b3c
 8002f50:	2400001c 	.word	0x2400001c
 8002f54:	24000b40 	.word	0x24000b40
 8002f58:	24000018 	.word	0x24000018
 8002f5c:	24000b44 	.word	0x24000b44
 8002f60:	24000014 	.word	0x24000014
 8002f64:	240001f0 	.word	0x240001f0
 8002f68:	24000210 	.word	0x24000210
 8002f6c:	24000230 	.word	0x24000230
 8002f70:	24000568 	.word	0x24000568
 8002f74:	240005f0 	.word	0x240005f0
 8002f78:	24000678 	.word	0x24000678
 8002f7c:	24000340 	.word	0x24000340
 8002f80:	240003d0 	.word	0x240003d0
 8002f84:	24000370 	.word	0x24000370
 8002f88:	24000458 	.word	0x24000458
 8002f8c:	240003a0 	.word	0x240003a0
 8002f90:	240004e0 	.word	0x240004e0
 8002f94:	24000010 	.word	0x24000010
			else if (pos_ctl_1.goal > pos_max_limit)
 8002f98:	4b2e      	ldr	r3, [pc, #184]	; (8003054 <TIM7_IRQHandler+0x3f4>)
 8002f9a:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 8002f9e:	4b2e      	ldr	r3, [pc, #184]	; (8003058 <TIM7_IRQHandler+0x3f8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	ee07 3a90 	vmov	s15, r3
 8002fa6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002faa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb2:	dd08      	ble.n	8002fc6 <TIM7_IRQHandler+0x366>
				pos_ctl_1.goal = pos_max_limit;
 8002fb4:	4b28      	ldr	r3, [pc, #160]	; (8003058 <TIM7_IRQHandler+0x3f8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	ee07 3a90 	vmov	s15, r3
 8002fbc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002fc0:	4b24      	ldr	r3, [pc, #144]	; (8003054 <TIM7_IRQHandler+0x3f4>)
 8002fc2:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78

			if (pos_ctl_2.goal < pos_min_limit)
 8002fc6:	4b25      	ldr	r3, [pc, #148]	; (800305c <TIM7_IRQHandler+0x3fc>)
 8002fc8:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 8002fcc:	4b24      	ldr	r3, [pc, #144]	; (8003060 <TIM7_IRQHandler+0x400>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	ee07 3a90 	vmov	s15, r3
 8002fd4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002fd8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe0:	d509      	bpl.n	8002ff6 <TIM7_IRQHandler+0x396>
				pos_ctl_2.goal = pos_min_limit;
 8002fe2:	4b1f      	ldr	r3, [pc, #124]	; (8003060 <TIM7_IRQHandler+0x400>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	ee07 3a90 	vmov	s15, r3
 8002fea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002fee:	4b1b      	ldr	r3, [pc, #108]	; (800305c <TIM7_IRQHandler+0x3fc>)
 8002ff0:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
 8002ff4:	e016      	b.n	8003024 <TIM7_IRQHandler+0x3c4>
			else if (pos_ctl_2.goal > pos_max_limit)
 8002ff6:	4b19      	ldr	r3, [pc, #100]	; (800305c <TIM7_IRQHandler+0x3fc>)
 8002ff8:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 8002ffc:	4b16      	ldr	r3, [pc, #88]	; (8003058 <TIM7_IRQHandler+0x3f8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	ee07 3a90 	vmov	s15, r3
 8003004:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003008:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800300c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003010:	dd08      	ble.n	8003024 <TIM7_IRQHandler+0x3c4>
				pos_ctl_2.goal = pos_max_limit;
 8003012:	4b11      	ldr	r3, [pc, #68]	; (8003058 <TIM7_IRQHandler+0x3f8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	ee07 3a90 	vmov	s15, r3
 800301a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800301e:	4b0f      	ldr	r3, [pc, #60]	; (800305c <TIM7_IRQHandler+0x3fc>)
 8003020:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78

			if (pos_ctl_3.goal < pos_min_limit)
 8003024:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <TIM7_IRQHandler+0x404>)
 8003026:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 800302a:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <TIM7_IRQHandler+0x400>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	ee07 3a90 	vmov	s15, r3
 8003032:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003036:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800303a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303e:	d513      	bpl.n	8003068 <TIM7_IRQHandler+0x408>
				pos_ctl_3.goal = pos_min_limit;
 8003040:	4b07      	ldr	r3, [pc, #28]	; (8003060 <TIM7_IRQHandler+0x400>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	ee07 3a90 	vmov	s15, r3
 8003048:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <TIM7_IRQHandler+0x404>)
 800304e:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
 8003052:	e020      	b.n	8003096 <TIM7_IRQHandler+0x436>
 8003054:	24000568 	.word	0x24000568
 8003058:	2400000c 	.word	0x2400000c
 800305c:	240005f0 	.word	0x240005f0
 8003060:	24000010 	.word	0x24000010
 8003064:	24000678 	.word	0x24000678
			else if (pos_ctl_3.goal > pos_max_limit)
 8003068:	4b8c      	ldr	r3, [pc, #560]	; (800329c <TIM7_IRQHandler+0x63c>)
 800306a:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 800306e:	4b8c      	ldr	r3, [pc, #560]	; (80032a0 <TIM7_IRQHandler+0x640>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	ee07 3a90 	vmov	s15, r3
 8003076:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800307a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800307e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003082:	dd08      	ble.n	8003096 <TIM7_IRQHandler+0x436>
				pos_ctl_3.goal = pos_max_limit;
 8003084:	4b86      	ldr	r3, [pc, #536]	; (80032a0 <TIM7_IRQHandler+0x640>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	ee07 3a90 	vmov	s15, r3
 800308c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003090:	4b82      	ldr	r3, [pc, #520]	; (800329c <TIM7_IRQHandler+0x63c>)
 8003092:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
		}
		if ((ctl_timer % 4) == 0) {
 8003096:	4b83      	ldr	r3, [pc, #524]	; (80032a4 <TIM7_IRQHandler+0x644>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f040 841f 	bne.w	80038e2 <TIM7_IRQHandler+0xc82>

			//Velocity_Controller
			vel_ctl_1.goal = -(pos_ctl_1.output);
 80030a4:	4b80      	ldr	r3, [pc, #512]	; (80032a8 <TIM7_IRQHandler+0x648>)
 80030a6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80030aa:	eeb1 7b47 	vneg.f64	d7, d7
 80030ae:	4b7f      	ldr	r3, [pc, #508]	; (80032ac <TIM7_IRQHandler+0x64c>)
 80030b0:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
			vel_ctl_2.goal = -(pos_ctl_2.output);
 80030b4:	4b7e      	ldr	r3, [pc, #504]	; (80032b0 <TIM7_IRQHandler+0x650>)
 80030b6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80030ba:	eeb1 7b47 	vneg.f64	d7, d7
 80030be:	4b7d      	ldr	r3, [pc, #500]	; (80032b4 <TIM7_IRQHandler+0x654>)
 80030c0:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
			vel_ctl_3.goal = -(pos_ctl_3.output);
 80030c4:	4b75      	ldr	r3, [pc, #468]	; (800329c <TIM7_IRQHandler+0x63c>)
 80030c6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80030ca:	eeb1 7b47 	vneg.f64	d7, d7
 80030ce:	4b7a      	ldr	r3, [pc, #488]	; (80032b8 <TIM7_IRQHandler+0x658>)
 80030d0:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78

			decimal = Velocity_Controller(&vel_ctl_1, &pos_ctl_1, &m_state_1,
 80030d4:	4b79      	ldr	r3, [pc, #484]	; (80032bc <TIM7_IRQHandler+0x65c>)
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	4b79      	ldr	r3, [pc, #484]	; (80032c0 <TIM7_IRQHandler+0x660>)
 80030da:	4a7a      	ldr	r2, [pc, #488]	; (80032c4 <TIM7_IRQHandler+0x664>)
 80030dc:	4972      	ldr	r1, [pc, #456]	; (80032a8 <TIM7_IRQHandler+0x648>)
 80030de:	4873      	ldr	r0, [pc, #460]	; (80032ac <TIM7_IRQHandler+0x64c>)
 80030e0:	f7fe fde7 	bl	8001cb2 <Velocity_Controller>
 80030e4:	eeb0 7b40 	vmov.f64	d7, d0
 80030e8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80030ec:	ee17 2a90 	vmov	r2, s15
 80030f0:	4b75      	ldr	r3, [pc, #468]	; (80032c8 <TIM7_IRQHandler+0x668>)
 80030f2:	601a      	str	r2, [r3, #0]
					&profile_1, &imp_1);
			decimal2 = Velocity_Controller(&vel_ctl_2, &pos_ctl_2, &m_state_2,
 80030f4:	4b75      	ldr	r3, [pc, #468]	; (80032cc <TIM7_IRQHandler+0x66c>)
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	4b75      	ldr	r3, [pc, #468]	; (80032d0 <TIM7_IRQHandler+0x670>)
 80030fa:	4a76      	ldr	r2, [pc, #472]	; (80032d4 <TIM7_IRQHandler+0x674>)
 80030fc:	496c      	ldr	r1, [pc, #432]	; (80032b0 <TIM7_IRQHandler+0x650>)
 80030fe:	486d      	ldr	r0, [pc, #436]	; (80032b4 <TIM7_IRQHandler+0x654>)
 8003100:	f7fe fdd7 	bl	8001cb2 <Velocity_Controller>
 8003104:	eeb0 7b40 	vmov.f64	d7, d0
 8003108:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800310c:	ee17 2a90 	vmov	r2, s15
 8003110:	4b71      	ldr	r3, [pc, #452]	; (80032d8 <TIM7_IRQHandler+0x678>)
 8003112:	601a      	str	r2, [r3, #0]
					&profile_2, &imp_2);
			decimal3 = Velocity_Controller(&vel_ctl_3, &pos_ctl_3, &m_state_3,
 8003114:	4b71      	ldr	r3, [pc, #452]	; (80032dc <TIM7_IRQHandler+0x67c>)
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	4b71      	ldr	r3, [pc, #452]	; (80032e0 <TIM7_IRQHandler+0x680>)
 800311a:	4a72      	ldr	r2, [pc, #456]	; (80032e4 <TIM7_IRQHandler+0x684>)
 800311c:	495f      	ldr	r1, [pc, #380]	; (800329c <TIM7_IRQHandler+0x63c>)
 800311e:	4866      	ldr	r0, [pc, #408]	; (80032b8 <TIM7_IRQHandler+0x658>)
 8003120:	f7fe fdc7 	bl	8001cb2 <Velocity_Controller>
 8003124:	eeb0 7b40 	vmov.f64	d7, d0
 8003128:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800312c:	ee17 2a90 	vmov	r2, s15
 8003130:	4b6d      	ldr	r3, [pc, #436]	; (80032e8 <TIM7_IRQHandler+0x688>)
 8003132:	601a      	str	r2, [r3, #0]
					&profile_3, &imp_3);

			// Extract most significant byte and store in array
			hexa3[1] = (decimal3 >> 8) & 0xFF;
 8003134:	4b6c      	ldr	r3, [pc, #432]	; (80032e8 <TIM7_IRQHandler+0x688>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	121b      	asrs	r3, r3, #8
 800313a:	b2da      	uxtb	r2, r3
 800313c:	4b6b      	ldr	r3, [pc, #428]	; (80032ec <TIM7_IRQHandler+0x68c>)
 800313e:	705a      	strb	r2, [r3, #1]
			// Extract least significant byte and store in array
			hexa3[0] = decimal3 & 0xFF;
 8003140:	4b69      	ldr	r3, [pc, #420]	; (80032e8 <TIM7_IRQHandler+0x688>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	b2da      	uxtb	r2, r3
 8003146:	4b69      	ldr	r3, [pc, #420]	; (80032ec <TIM7_IRQHandler+0x68c>)
 8003148:	701a      	strb	r2, [r3, #0]
			// Extract most significant byte and store in array
			hexa2[1] = (decimal2 >> 8) & 0xFF;
 800314a:	4b63      	ldr	r3, [pc, #396]	; (80032d8 <TIM7_IRQHandler+0x678>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	121b      	asrs	r3, r3, #8
 8003150:	b2da      	uxtb	r2, r3
 8003152:	4b67      	ldr	r3, [pc, #412]	; (80032f0 <TIM7_IRQHandler+0x690>)
 8003154:	705a      	strb	r2, [r3, #1]
			// Extract least significant byte and store in array
			hexa2[0] = decimal2 & 0xFF;
 8003156:	4b60      	ldr	r3, [pc, #384]	; (80032d8 <TIM7_IRQHandler+0x678>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	b2da      	uxtb	r2, r3
 800315c:	4b64      	ldr	r3, [pc, #400]	; (80032f0 <TIM7_IRQHandler+0x690>)
 800315e:	701a      	strb	r2, [r3, #0]
			// Extract most significant byte and store in array
			hexa[1] = (decimal >> 8) & 0xFF;
 8003160:	4b59      	ldr	r3, [pc, #356]	; (80032c8 <TIM7_IRQHandler+0x668>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	121b      	asrs	r3, r3, #8
 8003166:	b2da      	uxtb	r2, r3
 8003168:	4b62      	ldr	r3, [pc, #392]	; (80032f4 <TIM7_IRQHandler+0x694>)
 800316a:	705a      	strb	r2, [r3, #1]
			// Extract least significant byte and store in array
			hexa[0] = decimal & 0xFF;
 800316c:	4b56      	ldr	r3, [pc, #344]	; (80032c8 <TIM7_IRQHandler+0x668>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	b2da      	uxtb	r2, r3
 8003172:	4b60      	ldr	r3, [pc, #384]	; (80032f4 <TIM7_IRQHandler+0x694>)
 8003174:	701a      	strb	r2, [r3, #0]

			hexa_final[0] = hexa[0];
 8003176:	4b5f      	ldr	r3, [pc, #380]	; (80032f4 <TIM7_IRQHandler+0x694>)
 8003178:	781a      	ldrb	r2, [r3, #0]
 800317a:	4b5f      	ldr	r3, [pc, #380]	; (80032f8 <TIM7_IRQHandler+0x698>)
 800317c:	701a      	strb	r2, [r3, #0]
			hexa_final[1] = hexa[1];
 800317e:	4b5d      	ldr	r3, [pc, #372]	; (80032f4 <TIM7_IRQHandler+0x694>)
 8003180:	785a      	ldrb	r2, [r3, #1]
 8003182:	4b5d      	ldr	r3, [pc, #372]	; (80032f8 <TIM7_IRQHandler+0x698>)
 8003184:	705a      	strb	r2, [r3, #1]

			hexa_final[2] = hexa2[0];
 8003186:	4b5a      	ldr	r3, [pc, #360]	; (80032f0 <TIM7_IRQHandler+0x690>)
 8003188:	781a      	ldrb	r2, [r3, #0]
 800318a:	4b5b      	ldr	r3, [pc, #364]	; (80032f8 <TIM7_IRQHandler+0x698>)
 800318c:	709a      	strb	r2, [r3, #2]
			hexa_final[3] = hexa2[1];
 800318e:	4b58      	ldr	r3, [pc, #352]	; (80032f0 <TIM7_IRQHandler+0x690>)
 8003190:	785a      	ldrb	r2, [r3, #1]
 8003192:	4b59      	ldr	r3, [pc, #356]	; (80032f8 <TIM7_IRQHandler+0x698>)
 8003194:	70da      	strb	r2, [r3, #3]

			hexa_final[4] = hexa3[0];
 8003196:	4b55      	ldr	r3, [pc, #340]	; (80032ec <TIM7_IRQHandler+0x68c>)
 8003198:	781a      	ldrb	r2, [r3, #0]
 800319a:	4b57      	ldr	r3, [pc, #348]	; (80032f8 <TIM7_IRQHandler+0x698>)
 800319c:	711a      	strb	r2, [r3, #4]
			hexa_final[5] = hexa3[1];
 800319e:	4b53      	ldr	r3, [pc, #332]	; (80032ec <TIM7_IRQHandler+0x68c>)
 80031a0:	785a      	ldrb	r2, [r3, #1]
 80031a2:	4b55      	ldr	r3, [pc, #340]	; (80032f8 <TIM7_IRQHandler+0x698>)
 80031a4:	715a      	strb	r2, [r3, #5]

			if ((Actuator_flag % 100) == 0 && motor_start == 1) {
 80031a6:	4b55      	ldr	r3, [pc, #340]	; (80032fc <TIM7_IRQHandler+0x69c>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	4b55      	ldr	r3, [pc, #340]	; (8003300 <TIM7_IRQHandler+0x6a0>)
 80031ac:	fb83 1302 	smull	r1, r3, r3, r2
 80031b0:	1159      	asrs	r1, r3, #5
 80031b2:	17d3      	asrs	r3, r2, #31
 80031b4:	1acb      	subs	r3, r1, r3
 80031b6:	2164      	movs	r1, #100	; 0x64
 80031b8:	fb01 f303 	mul.w	r3, r1, r3
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d13c      	bne.n	800323c <TIM7_IRQHandler+0x5dc>
 80031c2:	4b50      	ldr	r3, [pc, #320]	; (8003304 <TIM7_IRQHandler+0x6a4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d138      	bne.n	800323c <TIM7_IRQHandler+0x5dc>
				TxHeader.Identifier = 0x00;
 80031ca:	4b4f      	ldr	r3, [pc, #316]	; (8003308 <TIM7_IRQHandler+0x6a8>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
				TxHeader.IdType = FDCAN_STANDARD_ID;
 80031d0:	4b4d      	ldr	r3, [pc, #308]	; (8003308 <TIM7_IRQHandler+0x6a8>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	605a      	str	r2, [r3, #4]
				TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80031d6:	4b4c      	ldr	r3, [pc, #304]	; (8003308 <TIM7_IRQHandler+0x6a8>)
 80031d8:	2200      	movs	r2, #0
 80031da:	609a      	str	r2, [r3, #8]
				TxHeader.DataLength = FDCAN_DLC_BYTES_2;
 80031dc:	4b4a      	ldr	r3, [pc, #296]	; (8003308 <TIM7_IRQHandler+0x6a8>)
 80031de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031e2:	60da      	str	r2, [r3, #12]
				TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80031e4:	4b48      	ldr	r3, [pc, #288]	; (8003308 <TIM7_IRQHandler+0x6a8>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	611a      	str	r2, [r3, #16]
				TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 80031ea:	4b47      	ldr	r3, [pc, #284]	; (8003308 <TIM7_IRQHandler+0x6a8>)
 80031ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80031f0:	615a      	str	r2, [r3, #20]
				TxHeader.FDFormat = FDCAN_FD_CAN;
 80031f2:	4b45      	ldr	r3, [pc, #276]	; (8003308 <TIM7_IRQHandler+0x6a8>)
 80031f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80031f8:	619a      	str	r2, [r3, #24]
				TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80031fa:	4b43      	ldr	r3, [pc, #268]	; (8003308 <TIM7_IRQHandler+0x6a8>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	61da      	str	r2, [r3, #28]
				TxHeader.MessageMarker = 0x0; // Ignore because FDCAN_NO_TX_EVENTS
 8003200:	4b41      	ldr	r3, [pc, #260]	; (8003308 <TIM7_IRQHandler+0x6a8>)
 8003202:	2200      	movs	r2, #0
 8003204:	621a      	str	r2, [r3, #32]
				if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader,
 8003206:	4a41      	ldr	r2, [pc, #260]	; (800330c <TIM7_IRQHandler+0x6ac>)
 8003208:	493f      	ldr	r1, [pc, #252]	; (8003308 <TIM7_IRQHandler+0x6a8>)
 800320a:	4841      	ldr	r0, [pc, #260]	; (8003310 <TIM7_IRQHandler+0x6b0>)
 800320c:	f004 f92c 	bl	8007468 <HAL_FDCAN_AddMessageToTxFifoQ>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <TIM7_IRQHandler+0x5ba>
						Motor_Operation) != HAL_OK) {
					Error_Handler();
 8003216:	f7fe fc83 	bl	8001b20 <Error_Handler>
				}
				operation_timer++;
 800321a:	4b3e      	ldr	r3, [pc, #248]	; (8003314 <TIM7_IRQHandler+0x6b4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	3301      	adds	r3, #1
 8003220:	4a3c      	ldr	r2, [pc, #240]	; (8003314 <TIM7_IRQHandler+0x6b4>)
 8003222:	6013      	str	r3, [r2, #0]
				if (operation_timer > 20000) {
 8003224:	4b3b      	ldr	r3, [pc, #236]	; (8003314 <TIM7_IRQHandler+0x6b4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f644 6220 	movw	r2, #20000	; 0x4e20
 800322c:	4293      	cmp	r3, r2
 800322e:	dd05      	ble.n	800323c <TIM7_IRQHandler+0x5dc>
					Motor_flag = 1;
 8003230:	4b39      	ldr	r3, [pc, #228]	; (8003318 <TIM7_IRQHandler+0x6b8>)
 8003232:	2201      	movs	r2, #1
 8003234:	601a      	str	r2, [r3, #0]
					motor_start = 0;
 8003236:	4b33      	ldr	r3, [pc, #204]	; (8003304 <TIM7_IRQHandler+0x6a4>)
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
				}
			}

			if (Motor_flag == 1) {
 800323c:	4b36      	ldr	r3, [pc, #216]	; (8003318 <TIM7_IRQHandler+0x6b8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b01      	cmp	r3, #1
 8003242:	f040 834e 	bne.w	80038e2 <TIM7_IRQHandler+0xc82>
				TxHeader.Identifier = 0x300;
 8003246:	4b30      	ldr	r3, [pc, #192]	; (8003308 <TIM7_IRQHandler+0x6a8>)
 8003248:	f44f 7240 	mov.w	r2, #768	; 0x300
 800324c:	601a      	str	r2, [r3, #0]
				TxHeader.IdType = FDCAN_STANDARD_ID;
 800324e:	4b2e      	ldr	r3, [pc, #184]	; (8003308 <TIM7_IRQHandler+0x6a8>)
 8003250:	2200      	movs	r2, #0
 8003252:	605a      	str	r2, [r3, #4]
				TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8003254:	4b2c      	ldr	r3, [pc, #176]	; (8003308 <TIM7_IRQHandler+0x6a8>)
 8003256:	2200      	movs	r2, #0
 8003258:	609a      	str	r2, [r3, #8]
				TxHeader.DataLength = FDCAN_DLC_BYTES_6;
 800325a:	4b2b      	ldr	r3, [pc, #172]	; (8003308 <TIM7_IRQHandler+0x6a8>)
 800325c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8003260:	60da      	str	r2, [r3, #12]
				TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8003262:	4b29      	ldr	r3, [pc, #164]	; (8003308 <TIM7_IRQHandler+0x6a8>)
 8003264:	2200      	movs	r2, #0
 8003266:	611a      	str	r2, [r3, #16]
				TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8003268:	4b27      	ldr	r3, [pc, #156]	; (8003308 <TIM7_IRQHandler+0x6a8>)
 800326a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800326e:	615a      	str	r2, [r3, #20]
				TxHeader.FDFormat = FDCAN_FD_CAN;
 8003270:	4b25      	ldr	r3, [pc, #148]	; (8003308 <TIM7_IRQHandler+0x6a8>)
 8003272:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003276:	619a      	str	r2, [r3, #24]
				TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8003278:	4b23      	ldr	r3, [pc, #140]	; (8003308 <TIM7_IRQHandler+0x6a8>)
 800327a:	2200      	movs	r2, #0
 800327c:	61da      	str	r2, [r3, #28]
				TxHeader.MessageMarker = 0x0; // Ignore because FDCAN_NO_TX_EVENTS
 800327e:	4b22      	ldr	r3, [pc, #136]	; (8003308 <TIM7_IRQHandler+0x6a8>)
 8003280:	2200      	movs	r2, #0
 8003282:	621a      	str	r2, [r3, #32]

				//if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, Motor_Torque) != HAL_OK)
				if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader,
 8003284:	4a1c      	ldr	r2, [pc, #112]	; (80032f8 <TIM7_IRQHandler+0x698>)
 8003286:	4920      	ldr	r1, [pc, #128]	; (8003308 <TIM7_IRQHandler+0x6a8>)
 8003288:	4821      	ldr	r0, [pc, #132]	; (8003310 <TIM7_IRQHandler+0x6b0>)
 800328a:	f004 f8ed 	bl	8007468 <HAL_FDCAN_AddMessageToTxFifoQ>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d043      	beq.n	800331c <TIM7_IRQHandler+0x6bc>
						hexa_final) != HAL_OK) {
					Error_Handler();
 8003294:	f7fe fc44 	bl	8001b20 <Error_Handler>
 8003298:	e043      	b.n	8003322 <TIM7_IRQHandler+0x6c2>
 800329a:	bf00      	nop
 800329c:	24000678 	.word	0x24000678
 80032a0:	2400000c 	.word	0x2400000c
 80032a4:	24000b28 	.word	0x24000b28
 80032a8:	24000568 	.word	0x24000568
 80032ac:	240003d0 	.word	0x240003d0
 80032b0:	240005f0 	.word	0x240005f0
 80032b4:	24000458 	.word	0x24000458
 80032b8:	240004e0 	.word	0x240004e0
 80032bc:	240001f0 	.word	0x240001f0
 80032c0:	24000340 	.word	0x24000340
 80032c4:	24000700 	.word	0x24000700
 80032c8:	24000b04 	.word	0x24000b04
 80032cc:	24000210 	.word	0x24000210
 80032d0:	24000370 	.word	0x24000370
 80032d4:	24000728 	.word	0x24000728
 80032d8:	24000b08 	.word	0x24000b08
 80032dc:	24000230 	.word	0x24000230
 80032e0:	240003a0 	.word	0x240003a0
 80032e4:	24000750 	.word	0x24000750
 80032e8:	24000b0c 	.word	0x24000b0c
 80032ec:	24000b1c 	.word	0x24000b1c
 80032f0:	24000b18 	.word	0x24000b18
 80032f4:	24000b10 	.word	0x24000b10
 80032f8:	24000b20 	.word	0x24000b20
 80032fc:	24000af8 	.word	0x24000af8
 8003300:	51eb851f 	.word	0x51eb851f
 8003304:	24000020 	.word	0x24000020
 8003308:	240001a0 	.word	0x240001a0
 800330c:	24000008 	.word	0x24000008
 8003310:	240000e0 	.word	0x240000e0
 8003314:	24000b2c 	.word	0x24000b2c
 8003318:	24000afc 	.word	0x24000afc
				} else

					TxHeader.Identifier = 0x080;
 800331c:	4b87      	ldr	r3, [pc, #540]	; (800353c <TIM7_IRQHandler+0x8dc>)
 800331e:	2280      	movs	r2, #128	; 0x80
 8003320:	601a      	str	r2, [r3, #0]
				TxHeader.IdType = FDCAN_STANDARD_ID;
 8003322:	4b86      	ldr	r3, [pc, #536]	; (800353c <TIM7_IRQHandler+0x8dc>)
 8003324:	2200      	movs	r2, #0
 8003326:	605a      	str	r2, [r3, #4]
				TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8003328:	4b84      	ldr	r3, [pc, #528]	; (800353c <TIM7_IRQHandler+0x8dc>)
 800332a:	2200      	movs	r2, #0
 800332c:	609a      	str	r2, [r3, #8]
				TxHeader.DataLength = FDCAN_DLC_BYTES_0;
 800332e:	4b83      	ldr	r3, [pc, #524]	; (800353c <TIM7_IRQHandler+0x8dc>)
 8003330:	2200      	movs	r2, #0
 8003332:	60da      	str	r2, [r3, #12]
				TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8003334:	4b81      	ldr	r3, [pc, #516]	; (800353c <TIM7_IRQHandler+0x8dc>)
 8003336:	2200      	movs	r2, #0
 8003338:	611a      	str	r2, [r3, #16]
				TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 800333a:	4b80      	ldr	r3, [pc, #512]	; (800353c <TIM7_IRQHandler+0x8dc>)
 800333c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003340:	615a      	str	r2, [r3, #20]
				TxHeader.FDFormat = FDCAN_FD_CAN;
 8003342:	4b7e      	ldr	r3, [pc, #504]	; (800353c <TIM7_IRQHandler+0x8dc>)
 8003344:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003348:	619a      	str	r2, [r3, #24]
				TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800334a:	4b7c      	ldr	r3, [pc, #496]	; (800353c <TIM7_IRQHandler+0x8dc>)
 800334c:	2200      	movs	r2, #0
 800334e:	61da      	str	r2, [r3, #28]
				TxHeader.MessageMarker = 0x0; // Ignore because FDCAN_NO_TX_EVENTS
 8003350:	4b7a      	ldr	r3, [pc, #488]	; (800353c <TIM7_IRQHandler+0x8dc>)
 8003352:	2200      	movs	r2, #0
 8003354:	621a      	str	r2, [r3, #32]
				if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, NULL)
 8003356:	2200      	movs	r2, #0
 8003358:	4978      	ldr	r1, [pc, #480]	; (800353c <TIM7_IRQHandler+0x8dc>)
 800335a:	4879      	ldr	r0, [pc, #484]	; (8003540 <TIM7_IRQHandler+0x8e0>)
 800335c:	f004 f884 	bl	8007468 <HAL_FDCAN_AddMessageToTxFifoQ>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <TIM7_IRQHandler+0x70a>
						!= HAL_OK) {
					Error_Handler();
 8003366:	f7fe fbdb 	bl	8001b20 <Error_Handler>
				}

				Rx_start_timer++;
 800336a:	4b76      	ldr	r3, [pc, #472]	; (8003544 <TIM7_IRQHandler+0x8e4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3301      	adds	r3, #1
 8003370:	4a74      	ldr	r2, [pc, #464]	; (8003544 <TIM7_IRQHandler+0x8e4>)
 8003372:	6013      	str	r3, [r2, #0]
				if (Rx_start_timer > 10000) {
 8003374:	4b73      	ldr	r3, [pc, #460]	; (8003544 <TIM7_IRQHandler+0x8e4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f242 7210 	movw	r2, #10000	; 0x2710
 800337c:	4293      	cmp	r3, r2
 800337e:	dd02      	ble.n	8003386 <TIM7_IRQHandler+0x726>
					Rx_start = 1;
 8003380:	4b71      	ldr	r3, [pc, #452]	; (8003548 <TIM7_IRQHandler+0x8e8>)
 8003382:	2201      	movs	r2, #1
 8003384:	601a      	str	r2, [r3, #0]
				}

				if (Rx_start == 1) {
 8003386:	4b70      	ldr	r3, [pc, #448]	; (8003548 <TIM7_IRQHandler+0x8e8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b01      	cmp	r3, #1
 800338c:	f040 82a9 	bne.w	80038e2 <TIM7_IRQHandler+0xc82>
					HAL_UART_Receive_DMA(&huart6, Rx_buffer, sizeof(Rx_buffer));
 8003390:	2260      	movs	r2, #96	; 0x60
 8003392:	496e      	ldr	r1, [pc, #440]	; (800354c <TIM7_IRQHandler+0x8ec>)
 8003394:	486e      	ldr	r0, [pc, #440]	; (8003550 <TIM7_IRQHandler+0x8f0>)
 8003396:	f009 f8b3 	bl	800c500 <HAL_UART_Receive_DMA>
					Rx_start = 0;
 800339a:	4b6b      	ldr	r3, [pc, #428]	; (8003548 <TIM7_IRQHandler+0x8e8>)
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	e29f      	b.n	80038e2 <TIM7_IRQHandler+0xc82>
				}
			}
		}
	} else if (mode_switch == 0) {
 80033a2:	4b6c      	ldr	r3, [pc, #432]	; (8003554 <TIM7_IRQHandler+0x8f4>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f040 829b 	bne.w	80038e2 <TIM7_IRQHandler+0xc82>
		if ((ctl_timer % 40) == 0) {
 80033ac:	4b6a      	ldr	r3, [pc, #424]	; (8003558 <TIM7_IRQHandler+0x8f8>)
 80033ae:	6819      	ldr	r1, [r3, #0]
 80033b0:	4b6a      	ldr	r3, [pc, #424]	; (800355c <TIM7_IRQHandler+0x8fc>)
 80033b2:	fb83 2301 	smull	r2, r3, r3, r1
 80033b6:	111a      	asrs	r2, r3, #4
 80033b8:	17cb      	asrs	r3, r1, #31
 80033ba:	1ad2      	subs	r2, r2, r3
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	1aca      	subs	r2, r1, r3
 80033c6:	2a00      	cmp	r2, #0
 80033c8:	f040 8109 	bne.w	80035de <TIM7_IRQHandler+0x97e>

			//Position_Controller
			pos_ctl_1.goal = angle_1_temp + tuning_ang_1;
 80033cc:	4b64      	ldr	r3, [pc, #400]	; (8003560 <TIM7_IRQHandler+0x900>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4b64      	ldr	r3, [pc, #400]	; (8003564 <TIM7_IRQHandler+0x904>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4413      	add	r3, r2
 80033d6:	ee07 3a90 	vmov	s15, r3
 80033da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80033de:	4b62      	ldr	r3, [pc, #392]	; (8003568 <TIM7_IRQHandler+0x908>)
 80033e0:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
			pos_ctl_2.goal = angle_2_temp + tuning_ang_2;
 80033e4:	4b61      	ldr	r3, [pc, #388]	; (800356c <TIM7_IRQHandler+0x90c>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	4b61      	ldr	r3, [pc, #388]	; (8003570 <TIM7_IRQHandler+0x910>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4413      	add	r3, r2
 80033ee:	ee07 3a90 	vmov	s15, r3
 80033f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80033f6:	4b5f      	ldr	r3, [pc, #380]	; (8003574 <TIM7_IRQHandler+0x914>)
 80033f8:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
			pos_ctl_3.goal = angle_3_temp + tuning_ang_3;
 80033fc:	4b5e      	ldr	r3, [pc, #376]	; (8003578 <TIM7_IRQHandler+0x918>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	4b5e      	ldr	r3, [pc, #376]	; (800357c <TIM7_IRQHandler+0x91c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4413      	add	r3, r2
 8003406:	ee07 3a90 	vmov	s15, r3
 800340a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800340e:	4b5c      	ldr	r3, [pc, #368]	; (8003580 <TIM7_IRQHandler+0x920>)
 8003410:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78

			vel_ctl_1.goal = Position_Controller(&pos_ctl_1, &m_state_1,
 8003414:	4a5b      	ldr	r2, [pc, #364]	; (8003584 <TIM7_IRQHandler+0x924>)
 8003416:	495c      	ldr	r1, [pc, #368]	; (8003588 <TIM7_IRQHandler+0x928>)
 8003418:	4853      	ldr	r0, [pc, #332]	; (8003568 <TIM7_IRQHandler+0x908>)
 800341a:	f7fe fb88 	bl	8001b2e <Position_Controller>
 800341e:	eeb0 7b40 	vmov.f64	d7, d0
 8003422:	4b5a      	ldr	r3, [pc, #360]	; (800358c <TIM7_IRQHandler+0x92c>)
 8003424:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
					&profile_1);
			vel_ctl_2.goal = Position_Controller(&pos_ctl_2, &m_state_2,
 8003428:	4a59      	ldr	r2, [pc, #356]	; (8003590 <TIM7_IRQHandler+0x930>)
 800342a:	495a      	ldr	r1, [pc, #360]	; (8003594 <TIM7_IRQHandler+0x934>)
 800342c:	4851      	ldr	r0, [pc, #324]	; (8003574 <TIM7_IRQHandler+0x914>)
 800342e:	f7fe fb7e 	bl	8001b2e <Position_Controller>
 8003432:	eeb0 7b40 	vmov.f64	d7, d0
 8003436:	4b58      	ldr	r3, [pc, #352]	; (8003598 <TIM7_IRQHandler+0x938>)
 8003438:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
					&profile_2);
			vel_ctl_3.goal = Position_Controller(&pos_ctl_3, &m_state_3,
 800343c:	4a57      	ldr	r2, [pc, #348]	; (800359c <TIM7_IRQHandler+0x93c>)
 800343e:	4958      	ldr	r1, [pc, #352]	; (80035a0 <TIM7_IRQHandler+0x940>)
 8003440:	484f      	ldr	r0, [pc, #316]	; (8003580 <TIM7_IRQHandler+0x920>)
 8003442:	f7fe fb74 	bl	8001b2e <Position_Controller>
 8003446:	eeb0 7b40 	vmov.f64	d7, d0
 800344a:	4b56      	ldr	r3, [pc, #344]	; (80035a4 <TIM7_IRQHandler+0x944>)
 800344c:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
					&profile_3);

			if (pos_ctl_1.goal < pos_min_limit)
 8003450:	4b45      	ldr	r3, [pc, #276]	; (8003568 <TIM7_IRQHandler+0x908>)
 8003452:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 8003456:	4b54      	ldr	r3, [pc, #336]	; (80035a8 <TIM7_IRQHandler+0x948>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	ee07 3a90 	vmov	s15, r3
 800345e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003462:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346a:	d509      	bpl.n	8003480 <TIM7_IRQHandler+0x820>
				pos_ctl_1.goal = pos_min_limit;
 800346c:	4b4e      	ldr	r3, [pc, #312]	; (80035a8 <TIM7_IRQHandler+0x948>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	ee07 3a90 	vmov	s15, r3
 8003474:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003478:	4b3b      	ldr	r3, [pc, #236]	; (8003568 <TIM7_IRQHandler+0x908>)
 800347a:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
 800347e:	e016      	b.n	80034ae <TIM7_IRQHandler+0x84e>
			else if (pos_ctl_1.goal > pos_max_limit)
 8003480:	4b39      	ldr	r3, [pc, #228]	; (8003568 <TIM7_IRQHandler+0x908>)
 8003482:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 8003486:	4b49      	ldr	r3, [pc, #292]	; (80035ac <TIM7_IRQHandler+0x94c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003492:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800349a:	dd08      	ble.n	80034ae <TIM7_IRQHandler+0x84e>
				pos_ctl_1.goal = pos_max_limit;
 800349c:	4b43      	ldr	r3, [pc, #268]	; (80035ac <TIM7_IRQHandler+0x94c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	ee07 3a90 	vmov	s15, r3
 80034a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80034a8:	4b2f      	ldr	r3, [pc, #188]	; (8003568 <TIM7_IRQHandler+0x908>)
 80034aa:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78

			if (pos_ctl_2.goal < pos_min_limit)
 80034ae:	4b31      	ldr	r3, [pc, #196]	; (8003574 <TIM7_IRQHandler+0x914>)
 80034b0:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 80034b4:	4b3c      	ldr	r3, [pc, #240]	; (80035a8 <TIM7_IRQHandler+0x948>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	ee07 3a90 	vmov	s15, r3
 80034bc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80034c0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80034c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c8:	d509      	bpl.n	80034de <TIM7_IRQHandler+0x87e>
				pos_ctl_2.goal = pos_min_limit;
 80034ca:	4b37      	ldr	r3, [pc, #220]	; (80035a8 <TIM7_IRQHandler+0x948>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80034d6:	4b27      	ldr	r3, [pc, #156]	; (8003574 <TIM7_IRQHandler+0x914>)
 80034d8:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
 80034dc:	e016      	b.n	800350c <TIM7_IRQHandler+0x8ac>
			else if (pos_ctl_2.goal > pos_max_limit)
 80034de:	4b25      	ldr	r3, [pc, #148]	; (8003574 <TIM7_IRQHandler+0x914>)
 80034e0:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 80034e4:	4b31      	ldr	r3, [pc, #196]	; (80035ac <TIM7_IRQHandler+0x94c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	ee07 3a90 	vmov	s15, r3
 80034ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80034f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80034f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f8:	dd08      	ble.n	800350c <TIM7_IRQHandler+0x8ac>
				pos_ctl_2.goal = pos_max_limit;
 80034fa:	4b2c      	ldr	r3, [pc, #176]	; (80035ac <TIM7_IRQHandler+0x94c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	ee07 3a90 	vmov	s15, r3
 8003502:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003506:	4b1b      	ldr	r3, [pc, #108]	; (8003574 <TIM7_IRQHandler+0x914>)
 8003508:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78

			if (pos_ctl_3.goal < pos_min_limit)
 800350c:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <TIM7_IRQHandler+0x920>)
 800350e:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 8003512:	4b25      	ldr	r3, [pc, #148]	; (80035a8 <TIM7_IRQHandler+0x948>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	ee07 3a90 	vmov	s15, r3
 800351a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800351e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003526:	d543      	bpl.n	80035b0 <TIM7_IRQHandler+0x950>
				pos_ctl_3.goal = pos_min_limit;
 8003528:	4b1f      	ldr	r3, [pc, #124]	; (80035a8 <TIM7_IRQHandler+0x948>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	ee07 3a90 	vmov	s15, r3
 8003530:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003534:	4b12      	ldr	r3, [pc, #72]	; (8003580 <TIM7_IRQHandler+0x920>)
 8003536:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
 800353a:	e050      	b.n	80035de <TIM7_IRQHandler+0x97e>
 800353c:	240001a0 	.word	0x240001a0
 8003540:	240000e0 	.word	0x240000e0
 8003544:	24000b30 	.word	0x24000b30
 8003548:	24000b38 	.word	0x24000b38
 800354c:	240002a4 	.word	0x240002a4
 8003550:	24000c2c 	.word	0x24000c2c
 8003554:	24000338 	.word	0x24000338
 8003558:	24000b28 	.word	0x24000b28
 800355c:	66666667 	.word	0x66666667
 8003560:	2400001c 	.word	0x2400001c
 8003564:	24000b3c 	.word	0x24000b3c
 8003568:	24000568 	.word	0x24000568
 800356c:	24000018 	.word	0x24000018
 8003570:	24000b40 	.word	0x24000b40
 8003574:	240005f0 	.word	0x240005f0
 8003578:	24000014 	.word	0x24000014
 800357c:	24000b44 	.word	0x24000b44
 8003580:	24000678 	.word	0x24000678
 8003584:	24000340 	.word	0x24000340
 8003588:	24000700 	.word	0x24000700
 800358c:	240003d0 	.word	0x240003d0
 8003590:	24000370 	.word	0x24000370
 8003594:	24000728 	.word	0x24000728
 8003598:	24000458 	.word	0x24000458
 800359c:	240003a0 	.word	0x240003a0
 80035a0:	24000750 	.word	0x24000750
 80035a4:	240004e0 	.word	0x240004e0
 80035a8:	24000010 	.word	0x24000010
 80035ac:	2400000c 	.word	0x2400000c
			else if (pos_ctl_3.goal > pos_max_limit)
 80035b0:	4b8b      	ldr	r3, [pc, #556]	; (80037e0 <TIM7_IRQHandler+0xb80>)
 80035b2:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 80035b6:	4b8b      	ldr	r3, [pc, #556]	; (80037e4 <TIM7_IRQHandler+0xb84>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	ee07 3a90 	vmov	s15, r3
 80035be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80035c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80035c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ca:	dd08      	ble.n	80035de <TIM7_IRQHandler+0x97e>
				pos_ctl_3.goal = pos_max_limit;
 80035cc:	4b85      	ldr	r3, [pc, #532]	; (80037e4 <TIM7_IRQHandler+0xb84>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	ee07 3a90 	vmov	s15, r3
 80035d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80035d8:	4b81      	ldr	r3, [pc, #516]	; (80037e0 <TIM7_IRQHandler+0xb80>)
 80035da:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
		}
		if ((ctl_timer % 4) == 0) {
 80035de:	4b82      	ldr	r3, [pc, #520]	; (80037e8 <TIM7_IRQHandler+0xb88>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f040 817b 	bne.w	80038e2 <TIM7_IRQHandler+0xc82>

			//Velocity_Controller
			vel_ctl_1.goal = -(pos_ctl_1.output);
 80035ec:	4b7f      	ldr	r3, [pc, #508]	; (80037ec <TIM7_IRQHandler+0xb8c>)
 80035ee:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80035f2:	eeb1 7b47 	vneg.f64	d7, d7
 80035f6:	4b7e      	ldr	r3, [pc, #504]	; (80037f0 <TIM7_IRQHandler+0xb90>)
 80035f8:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
			vel_ctl_2.goal = -(pos_ctl_2.output);
 80035fc:	4b7d      	ldr	r3, [pc, #500]	; (80037f4 <TIM7_IRQHandler+0xb94>)
 80035fe:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8003602:	eeb1 7b47 	vneg.f64	d7, d7
 8003606:	4b7c      	ldr	r3, [pc, #496]	; (80037f8 <TIM7_IRQHandler+0xb98>)
 8003608:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
			vel_ctl_3.goal = -(pos_ctl_3.output);
 800360c:	4b74      	ldr	r3, [pc, #464]	; (80037e0 <TIM7_IRQHandler+0xb80>)
 800360e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8003612:	eeb1 7b47 	vneg.f64	d7, d7
 8003616:	4b79      	ldr	r3, [pc, #484]	; (80037fc <TIM7_IRQHandler+0xb9c>)
 8003618:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78

//			vel_ctl_1.goal = vel_test[0];
//			vel_ctl_2.goal = vel_test[1];
//			vel_ctl_3.goal = vel_test[2];

			decimal = Velocity_Controller(&vel_ctl_1, &pos_ctl_1, &m_state_1,
 800361c:	4b78      	ldr	r3, [pc, #480]	; (8003800 <TIM7_IRQHandler+0xba0>)
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	4b78      	ldr	r3, [pc, #480]	; (8003804 <TIM7_IRQHandler+0xba4>)
 8003622:	4a79      	ldr	r2, [pc, #484]	; (8003808 <TIM7_IRQHandler+0xba8>)
 8003624:	4971      	ldr	r1, [pc, #452]	; (80037ec <TIM7_IRQHandler+0xb8c>)
 8003626:	4872      	ldr	r0, [pc, #456]	; (80037f0 <TIM7_IRQHandler+0xb90>)
 8003628:	f7fe fb43 	bl	8001cb2 <Velocity_Controller>
 800362c:	eeb0 7b40 	vmov.f64	d7, d0
 8003630:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003634:	ee17 2a90 	vmov	r2, s15
 8003638:	4b74      	ldr	r3, [pc, #464]	; (800380c <TIM7_IRQHandler+0xbac>)
 800363a:	601a      	str	r2, [r3, #0]
					&profile_1, &imp_1);
			decimal2 = Velocity_Controller(&vel_ctl_2, &pos_ctl_2, &m_state_2,
 800363c:	4b74      	ldr	r3, [pc, #464]	; (8003810 <TIM7_IRQHandler+0xbb0>)
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	4b74      	ldr	r3, [pc, #464]	; (8003814 <TIM7_IRQHandler+0xbb4>)
 8003642:	4a75      	ldr	r2, [pc, #468]	; (8003818 <TIM7_IRQHandler+0xbb8>)
 8003644:	496b      	ldr	r1, [pc, #428]	; (80037f4 <TIM7_IRQHandler+0xb94>)
 8003646:	486c      	ldr	r0, [pc, #432]	; (80037f8 <TIM7_IRQHandler+0xb98>)
 8003648:	f7fe fb33 	bl	8001cb2 <Velocity_Controller>
 800364c:	eeb0 7b40 	vmov.f64	d7, d0
 8003650:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003654:	ee17 2a90 	vmov	r2, s15
 8003658:	4b70      	ldr	r3, [pc, #448]	; (800381c <TIM7_IRQHandler+0xbbc>)
 800365a:	601a      	str	r2, [r3, #0]
					&profile_2, &imp_2);
			decimal3 = Velocity_Controller(&vel_ctl_3, &pos_ctl_3, &m_state_3,
 800365c:	4b70      	ldr	r3, [pc, #448]	; (8003820 <TIM7_IRQHandler+0xbc0>)
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	4b70      	ldr	r3, [pc, #448]	; (8003824 <TIM7_IRQHandler+0xbc4>)
 8003662:	4a71      	ldr	r2, [pc, #452]	; (8003828 <TIM7_IRQHandler+0xbc8>)
 8003664:	495e      	ldr	r1, [pc, #376]	; (80037e0 <TIM7_IRQHandler+0xb80>)
 8003666:	4865      	ldr	r0, [pc, #404]	; (80037fc <TIM7_IRQHandler+0xb9c>)
 8003668:	f7fe fb23 	bl	8001cb2 <Velocity_Controller>
 800366c:	eeb0 7b40 	vmov.f64	d7, d0
 8003670:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003674:	ee17 2a90 	vmov	r2, s15
 8003678:	4b6c      	ldr	r3, [pc, #432]	; (800382c <TIM7_IRQHandler+0xbcc>)
 800367a:	601a      	str	r2, [r3, #0]
//			decimal  = 0;
//			decimal2 = 0;
//			decimal3 = 0;

			// Extract most significant byte and store in array
			hexa3[1] = (decimal3 >> 8) & 0xFF;
 800367c:	4b6b      	ldr	r3, [pc, #428]	; (800382c <TIM7_IRQHandler+0xbcc>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	121b      	asrs	r3, r3, #8
 8003682:	b2da      	uxtb	r2, r3
 8003684:	4b6a      	ldr	r3, [pc, #424]	; (8003830 <TIM7_IRQHandler+0xbd0>)
 8003686:	705a      	strb	r2, [r3, #1]
			// Extract least significant byte and store in array
			hexa3[0] = decimal3 & 0xFF;
 8003688:	4b68      	ldr	r3, [pc, #416]	; (800382c <TIM7_IRQHandler+0xbcc>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	b2da      	uxtb	r2, r3
 800368e:	4b68      	ldr	r3, [pc, #416]	; (8003830 <TIM7_IRQHandler+0xbd0>)
 8003690:	701a      	strb	r2, [r3, #0]
			// Extract most significant byte and store in array
			hexa2[1] = (decimal2 >> 8) & 0xFF;
 8003692:	4b62      	ldr	r3, [pc, #392]	; (800381c <TIM7_IRQHandler+0xbbc>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	121b      	asrs	r3, r3, #8
 8003698:	b2da      	uxtb	r2, r3
 800369a:	4b66      	ldr	r3, [pc, #408]	; (8003834 <TIM7_IRQHandler+0xbd4>)
 800369c:	705a      	strb	r2, [r3, #1]
			// Extract least significant byte and store in array
			hexa2[0] = decimal2 & 0xFF;
 800369e:	4b5f      	ldr	r3, [pc, #380]	; (800381c <TIM7_IRQHandler+0xbbc>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	4b63      	ldr	r3, [pc, #396]	; (8003834 <TIM7_IRQHandler+0xbd4>)
 80036a6:	701a      	strb	r2, [r3, #0]
			// Extract most significant byte and store in array
			hexa[1] = (decimal >> 8) & 0xFF;
 80036a8:	4b58      	ldr	r3, [pc, #352]	; (800380c <TIM7_IRQHandler+0xbac>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	121b      	asrs	r3, r3, #8
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	4b61      	ldr	r3, [pc, #388]	; (8003838 <TIM7_IRQHandler+0xbd8>)
 80036b2:	705a      	strb	r2, [r3, #1]
			// Extract least significant byte and store in array
			hexa[0] = decimal & 0xFF;
 80036b4:	4b55      	ldr	r3, [pc, #340]	; (800380c <TIM7_IRQHandler+0xbac>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	4b5f      	ldr	r3, [pc, #380]	; (8003838 <TIM7_IRQHandler+0xbd8>)
 80036bc:	701a      	strb	r2, [r3, #0]

			hexa_final[0] = hexa[0];
 80036be:	4b5e      	ldr	r3, [pc, #376]	; (8003838 <TIM7_IRQHandler+0xbd8>)
 80036c0:	781a      	ldrb	r2, [r3, #0]
 80036c2:	4b5e      	ldr	r3, [pc, #376]	; (800383c <TIM7_IRQHandler+0xbdc>)
 80036c4:	701a      	strb	r2, [r3, #0]
			hexa_final[1] = hexa[1];
 80036c6:	4b5c      	ldr	r3, [pc, #368]	; (8003838 <TIM7_IRQHandler+0xbd8>)
 80036c8:	785a      	ldrb	r2, [r3, #1]
 80036ca:	4b5c      	ldr	r3, [pc, #368]	; (800383c <TIM7_IRQHandler+0xbdc>)
 80036cc:	705a      	strb	r2, [r3, #1]

			hexa_final[2] = hexa2[0];
 80036ce:	4b59      	ldr	r3, [pc, #356]	; (8003834 <TIM7_IRQHandler+0xbd4>)
 80036d0:	781a      	ldrb	r2, [r3, #0]
 80036d2:	4b5a      	ldr	r3, [pc, #360]	; (800383c <TIM7_IRQHandler+0xbdc>)
 80036d4:	709a      	strb	r2, [r3, #2]
			hexa_final[3] = hexa2[1];
 80036d6:	4b57      	ldr	r3, [pc, #348]	; (8003834 <TIM7_IRQHandler+0xbd4>)
 80036d8:	785a      	ldrb	r2, [r3, #1]
 80036da:	4b58      	ldr	r3, [pc, #352]	; (800383c <TIM7_IRQHandler+0xbdc>)
 80036dc:	70da      	strb	r2, [r3, #3]

			hexa_final[4] = hexa3[0];
 80036de:	4b54      	ldr	r3, [pc, #336]	; (8003830 <TIM7_IRQHandler+0xbd0>)
 80036e0:	781a      	ldrb	r2, [r3, #0]
 80036e2:	4b56      	ldr	r3, [pc, #344]	; (800383c <TIM7_IRQHandler+0xbdc>)
 80036e4:	711a      	strb	r2, [r3, #4]
			hexa_final[5] = hexa3[1];
 80036e6:	4b52      	ldr	r3, [pc, #328]	; (8003830 <TIM7_IRQHandler+0xbd0>)
 80036e8:	785a      	ldrb	r2, [r3, #1]
 80036ea:	4b54      	ldr	r3, [pc, #336]	; (800383c <TIM7_IRQHandler+0xbdc>)
 80036ec:	715a      	strb	r2, [r3, #5]

			if ((Actuator_flag % 100) == 0 && motor_start == 1) {
 80036ee:	4b54      	ldr	r3, [pc, #336]	; (8003840 <TIM7_IRQHandler+0xbe0>)
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	4b54      	ldr	r3, [pc, #336]	; (8003844 <TIM7_IRQHandler+0xbe4>)
 80036f4:	fb83 1302 	smull	r1, r3, r3, r2
 80036f8:	1159      	asrs	r1, r3, #5
 80036fa:	17d3      	asrs	r3, r2, #31
 80036fc:	1acb      	subs	r3, r1, r3
 80036fe:	2164      	movs	r1, #100	; 0x64
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d13b      	bne.n	8003782 <TIM7_IRQHandler+0xb22>
 800370a:	4b4f      	ldr	r3, [pc, #316]	; (8003848 <TIM7_IRQHandler+0xbe8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d137      	bne.n	8003782 <TIM7_IRQHandler+0xb22>
				TxHeader.Identifier = 0x00;
 8003712:	4b4e      	ldr	r3, [pc, #312]	; (800384c <TIM7_IRQHandler+0xbec>)
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
				TxHeader.IdType = FDCAN_STANDARD_ID;
 8003718:	4b4c      	ldr	r3, [pc, #304]	; (800384c <TIM7_IRQHandler+0xbec>)
 800371a:	2200      	movs	r2, #0
 800371c:	605a      	str	r2, [r3, #4]
				TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800371e:	4b4b      	ldr	r3, [pc, #300]	; (800384c <TIM7_IRQHandler+0xbec>)
 8003720:	2200      	movs	r2, #0
 8003722:	609a      	str	r2, [r3, #8]
				TxHeader.DataLength = FDCAN_DLC_BYTES_2;
 8003724:	4b49      	ldr	r3, [pc, #292]	; (800384c <TIM7_IRQHandler+0xbec>)
 8003726:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800372a:	60da      	str	r2, [r3, #12]
				TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800372c:	4b47      	ldr	r3, [pc, #284]	; (800384c <TIM7_IRQHandler+0xbec>)
 800372e:	2200      	movs	r2, #0
 8003730:	611a      	str	r2, [r3, #16]
				TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8003732:	4b46      	ldr	r3, [pc, #280]	; (800384c <TIM7_IRQHandler+0xbec>)
 8003734:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003738:	615a      	str	r2, [r3, #20]
				TxHeader.FDFormat = FDCAN_FD_CAN;
 800373a:	4b44      	ldr	r3, [pc, #272]	; (800384c <TIM7_IRQHandler+0xbec>)
 800373c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003740:	619a      	str	r2, [r3, #24]
				TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8003742:	4b42      	ldr	r3, [pc, #264]	; (800384c <TIM7_IRQHandler+0xbec>)
 8003744:	2200      	movs	r2, #0
 8003746:	61da      	str	r2, [r3, #28]
				TxHeader.MessageMarker = 0x0; // Ignore because FDCAN_NO_TX_EVENTS
 8003748:	4b40      	ldr	r3, [pc, #256]	; (800384c <TIM7_IRQHandler+0xbec>)
 800374a:	2200      	movs	r2, #0
 800374c:	621a      	str	r2, [r3, #32]
				if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader,
 800374e:	4a40      	ldr	r2, [pc, #256]	; (8003850 <TIM7_IRQHandler+0xbf0>)
 8003750:	493e      	ldr	r1, [pc, #248]	; (800384c <TIM7_IRQHandler+0xbec>)
 8003752:	4840      	ldr	r0, [pc, #256]	; (8003854 <TIM7_IRQHandler+0xbf4>)
 8003754:	f003 fe88 	bl	8007468 <HAL_FDCAN_AddMessageToTxFifoQ>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <TIM7_IRQHandler+0xb02>
						Motor_Operation) != HAL_OK) {
					Error_Handler();
 800375e:	f7fe f9df 	bl	8001b20 <Error_Handler>
				}
				operation_timer++;
 8003762:	4b3d      	ldr	r3, [pc, #244]	; (8003858 <TIM7_IRQHandler+0xbf8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3301      	adds	r3, #1
 8003768:	4a3b      	ldr	r2, [pc, #236]	; (8003858 <TIM7_IRQHandler+0xbf8>)
 800376a:	6013      	str	r3, [r2, #0]
				if (operation_timer > 500) {
 800376c:	4b3a      	ldr	r3, [pc, #232]	; (8003858 <TIM7_IRQHandler+0xbf8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003774:	dd05      	ble.n	8003782 <TIM7_IRQHandler+0xb22>
					Motor_flag = 1;
 8003776:	4b39      	ldr	r3, [pc, #228]	; (800385c <TIM7_IRQHandler+0xbfc>)
 8003778:	2201      	movs	r2, #1
 800377a:	601a      	str	r2, [r3, #0]
					motor_start = 0;
 800377c:	4b32      	ldr	r3, [pc, #200]	; (8003848 <TIM7_IRQHandler+0xbe8>)
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
				}
			}

			if (Motor_flag == 1) {
 8003782:	4b36      	ldr	r3, [pc, #216]	; (800385c <TIM7_IRQHandler+0xbfc>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b01      	cmp	r3, #1
 8003788:	f040 80ab 	bne.w	80038e2 <TIM7_IRQHandler+0xc82>
				TxHeader.Identifier = 0x300;
 800378c:	4b2f      	ldr	r3, [pc, #188]	; (800384c <TIM7_IRQHandler+0xbec>)
 800378e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003792:	601a      	str	r2, [r3, #0]
				TxHeader.IdType = FDCAN_STANDARD_ID;
 8003794:	4b2d      	ldr	r3, [pc, #180]	; (800384c <TIM7_IRQHandler+0xbec>)
 8003796:	2200      	movs	r2, #0
 8003798:	605a      	str	r2, [r3, #4]
				TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800379a:	4b2c      	ldr	r3, [pc, #176]	; (800384c <TIM7_IRQHandler+0xbec>)
 800379c:	2200      	movs	r2, #0
 800379e:	609a      	str	r2, [r3, #8]
				TxHeader.DataLength = FDCAN_DLC_BYTES_6;
 80037a0:	4b2a      	ldr	r3, [pc, #168]	; (800384c <TIM7_IRQHandler+0xbec>)
 80037a2:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80037a6:	60da      	str	r2, [r3, #12]
				TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80037a8:	4b28      	ldr	r3, [pc, #160]	; (800384c <TIM7_IRQHandler+0xbec>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	611a      	str	r2, [r3, #16]
				TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 80037ae:	4b27      	ldr	r3, [pc, #156]	; (800384c <TIM7_IRQHandler+0xbec>)
 80037b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037b4:	615a      	str	r2, [r3, #20]
				TxHeader.FDFormat = FDCAN_FD_CAN;
 80037b6:	4b25      	ldr	r3, [pc, #148]	; (800384c <TIM7_IRQHandler+0xbec>)
 80037b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80037bc:	619a      	str	r2, [r3, #24]
				TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80037be:	4b23      	ldr	r3, [pc, #140]	; (800384c <TIM7_IRQHandler+0xbec>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	61da      	str	r2, [r3, #28]
				TxHeader.MessageMarker = 0x0; // Ignore because FDCAN_NO_TX_EVENTS
 80037c4:	4b21      	ldr	r3, [pc, #132]	; (800384c <TIM7_IRQHandler+0xbec>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	621a      	str	r2, [r3, #32]

				//if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, Motor_Torque) != HAL_OK)
				if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader,
 80037ca:	4a1c      	ldr	r2, [pc, #112]	; (800383c <TIM7_IRQHandler+0xbdc>)
 80037cc:	491f      	ldr	r1, [pc, #124]	; (800384c <TIM7_IRQHandler+0xbec>)
 80037ce:	4821      	ldr	r0, [pc, #132]	; (8003854 <TIM7_IRQHandler+0xbf4>)
 80037d0:	f003 fe4a 	bl	8007468 <HAL_FDCAN_AddMessageToTxFifoQ>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d042      	beq.n	8003860 <TIM7_IRQHandler+0xc00>
						hexa_final) != HAL_OK) {
					Error_Handler();
 80037da:	f7fe f9a1 	bl	8001b20 <Error_Handler>
 80037de:	e042      	b.n	8003866 <TIM7_IRQHandler+0xc06>
 80037e0:	24000678 	.word	0x24000678
 80037e4:	2400000c 	.word	0x2400000c
 80037e8:	24000b28 	.word	0x24000b28
 80037ec:	24000568 	.word	0x24000568
 80037f0:	240003d0 	.word	0x240003d0
 80037f4:	240005f0 	.word	0x240005f0
 80037f8:	24000458 	.word	0x24000458
 80037fc:	240004e0 	.word	0x240004e0
 8003800:	240001f0 	.word	0x240001f0
 8003804:	24000340 	.word	0x24000340
 8003808:	24000700 	.word	0x24000700
 800380c:	24000b04 	.word	0x24000b04
 8003810:	24000210 	.word	0x24000210
 8003814:	24000370 	.word	0x24000370
 8003818:	24000728 	.word	0x24000728
 800381c:	24000b08 	.word	0x24000b08
 8003820:	24000230 	.word	0x24000230
 8003824:	240003a0 	.word	0x240003a0
 8003828:	24000750 	.word	0x24000750
 800382c:	24000b0c 	.word	0x24000b0c
 8003830:	24000b1c 	.word	0x24000b1c
 8003834:	24000b18 	.word	0x24000b18
 8003838:	24000b10 	.word	0x24000b10
 800383c:	24000b20 	.word	0x24000b20
 8003840:	24000af8 	.word	0x24000af8
 8003844:	51eb851f 	.word	0x51eb851f
 8003848:	24000020 	.word	0x24000020
 800384c:	240001a0 	.word	0x240001a0
 8003850:	24000008 	.word	0x24000008
 8003854:	240000e0 	.word	0x240000e0
 8003858:	24000b2c 	.word	0x24000b2c
 800385c:	24000afc 	.word	0x24000afc
				} else

					TxHeader.Identifier = 0x080;
 8003860:	4b23      	ldr	r3, [pc, #140]	; (80038f0 <TIM7_IRQHandler+0xc90>)
 8003862:	2280      	movs	r2, #128	; 0x80
 8003864:	601a      	str	r2, [r3, #0]
				TxHeader.IdType = FDCAN_STANDARD_ID;
 8003866:	4b22      	ldr	r3, [pc, #136]	; (80038f0 <TIM7_IRQHandler+0xc90>)
 8003868:	2200      	movs	r2, #0
 800386a:	605a      	str	r2, [r3, #4]
				TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800386c:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <TIM7_IRQHandler+0xc90>)
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
				TxHeader.DataLength = FDCAN_DLC_BYTES_0;
 8003872:	4b1f      	ldr	r3, [pc, #124]	; (80038f0 <TIM7_IRQHandler+0xc90>)
 8003874:	2200      	movs	r2, #0
 8003876:	60da      	str	r2, [r3, #12]
				TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8003878:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <TIM7_IRQHandler+0xc90>)
 800387a:	2200      	movs	r2, #0
 800387c:	611a      	str	r2, [r3, #16]
				TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 800387e:	4b1c      	ldr	r3, [pc, #112]	; (80038f0 <TIM7_IRQHandler+0xc90>)
 8003880:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003884:	615a      	str	r2, [r3, #20]
				TxHeader.FDFormat = FDCAN_FD_CAN;
 8003886:	4b1a      	ldr	r3, [pc, #104]	; (80038f0 <TIM7_IRQHandler+0xc90>)
 8003888:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800388c:	619a      	str	r2, [r3, #24]
				TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800388e:	4b18      	ldr	r3, [pc, #96]	; (80038f0 <TIM7_IRQHandler+0xc90>)
 8003890:	2200      	movs	r2, #0
 8003892:	61da      	str	r2, [r3, #28]
				TxHeader.MessageMarker = 0x0; // Ignore because FDCAN_NO_TX_EVENTS
 8003894:	4b16      	ldr	r3, [pc, #88]	; (80038f0 <TIM7_IRQHandler+0xc90>)
 8003896:	2200      	movs	r2, #0
 8003898:	621a      	str	r2, [r3, #32]
				if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, NULL)
 800389a:	2200      	movs	r2, #0
 800389c:	4914      	ldr	r1, [pc, #80]	; (80038f0 <TIM7_IRQHandler+0xc90>)
 800389e:	4815      	ldr	r0, [pc, #84]	; (80038f4 <TIM7_IRQHandler+0xc94>)
 80038a0:	f003 fde2 	bl	8007468 <HAL_FDCAN_AddMessageToTxFifoQ>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <TIM7_IRQHandler+0xc4e>
						!= HAL_OK) {
					Error_Handler();
 80038aa:	f7fe f939 	bl	8001b20 <Error_Handler>
				}

				Rx_start_timer++;
 80038ae:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <TIM7_IRQHandler+0xc98>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3301      	adds	r3, #1
 80038b4:	4a10      	ldr	r2, [pc, #64]	; (80038f8 <TIM7_IRQHandler+0xc98>)
 80038b6:	6013      	str	r3, [r2, #0]
				if (Rx_start_timer > 5000) {
 80038b8:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <TIM7_IRQHandler+0xc98>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c0:	4293      	cmp	r3, r2
 80038c2:	dd02      	ble.n	80038ca <TIM7_IRQHandler+0xc6a>
					Rx_start = 1;
 80038c4:	4b0d      	ldr	r3, [pc, #52]	; (80038fc <TIM7_IRQHandler+0xc9c>)
 80038c6:	2201      	movs	r2, #1
 80038c8:	601a      	str	r2, [r3, #0]
				}

				if (Rx_start == 1) {
 80038ca:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <TIM7_IRQHandler+0xc9c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d107      	bne.n	80038e2 <TIM7_IRQHandler+0xc82>
					HAL_UART_Receive_DMA(&huart6, Rx_buffer, sizeof(Rx_buffer));
 80038d2:	2260      	movs	r2, #96	; 0x60
 80038d4:	490a      	ldr	r1, [pc, #40]	; (8003900 <TIM7_IRQHandler+0xca0>)
 80038d6:	480b      	ldr	r0, [pc, #44]	; (8003904 <TIM7_IRQHandler+0xca4>)
 80038d8:	f008 fe12 	bl	800c500 <HAL_UART_Receive_DMA>
					Rx_start = 0;
 80038dc:	4b07      	ldr	r3, [pc, #28]	; (80038fc <TIM7_IRQHandler+0xc9c>)
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
		}

	}

	/* USER CODE END TIM7_IRQn 0 */
	HAL_TIM_IRQHandler(&htim7);
 80038e2:	4809      	ldr	r0, [pc, #36]	; (8003908 <TIM7_IRQHandler+0xca8>)
 80038e4:	f008 faa4 	bl	800be30 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM7_IRQn 1 */

	/* USER CODE END TIM7_IRQn 1 */
}
 80038e8:	bf00      	nop
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	240001a0 	.word	0x240001a0
 80038f4:	240000e0 	.word	0x240000e0
 80038f8:	24000b30 	.word	0x24000b30
 80038fc:	24000b38 	.word	0x24000b38
 8003900:	240002a4 	.word	0x240002a4
 8003904:	24000c2c 	.word	0x24000c2c
 8003908:	24000b4c 	.word	0x24000b4c

0800390c <FDCAN_CAL_IRQHandler>:

/**
 * @brief This function handles FDCAN calibration unit interrupt.
 */
void FDCAN_CAL_IRQHandler(void) {
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN FDCAN_CAL_IRQn 0 */

	/* USER CODE END FDCAN_CAL_IRQn 0 */
	HAL_FDCAN_IRQHandler(&hfdcan1);
 8003910:	4802      	ldr	r0, [pc, #8]	; (800391c <FDCAN_CAL_IRQHandler+0x10>)
 8003912:	f004 f823 	bl	800795c <HAL_FDCAN_IRQHandler>
	/* USER CODE BEGIN FDCAN_CAL_IRQn 1 */

	/* USER CODE END FDCAN_CAL_IRQn 1 */
}
 8003916:	bf00      	nop
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	240000e0 	.word	0x240000e0

08003920 <USART6_IRQHandler>:

/**
 * @brief This function handles USART6 global interrupt.
 */
void USART6_IRQHandler(void) {
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART6_IRQn 0 */

	/* USER CODE END USART6_IRQn 0 */
	HAL_UART_IRQHandler(&huart6);
 8003924:	4802      	ldr	r0, [pc, #8]	; (8003930 <USART6_IRQHandler+0x10>)
 8003926:	f008 fe37 	bl	800c598 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART6_IRQn 1 */

	/* USER CODE END USART6_IRQn 1 */
}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	24000c2c 	.word	0x24000c2c

08003934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800393c:	4a14      	ldr	r2, [pc, #80]	; (8003990 <_sbrk+0x5c>)
 800393e:	4b15      	ldr	r3, [pc, #84]	; (8003994 <_sbrk+0x60>)
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003948:	4b13      	ldr	r3, [pc, #76]	; (8003998 <_sbrk+0x64>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d102      	bne.n	8003956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003950:	4b11      	ldr	r3, [pc, #68]	; (8003998 <_sbrk+0x64>)
 8003952:	4a12      	ldr	r2, [pc, #72]	; (800399c <_sbrk+0x68>)
 8003954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003956:	4b10      	ldr	r3, [pc, #64]	; (8003998 <_sbrk+0x64>)
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4413      	add	r3, r2
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	429a      	cmp	r2, r3
 8003962:	d207      	bcs.n	8003974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003964:	f00a fd1e 	bl	800e3a4 <__errno>
 8003968:	4603      	mov	r3, r0
 800396a:	220c      	movs	r2, #12
 800396c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800396e:	f04f 33ff 	mov.w	r3, #4294967295
 8003972:	e009      	b.n	8003988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003974:	4b08      	ldr	r3, [pc, #32]	; (8003998 <_sbrk+0x64>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800397a:	4b07      	ldr	r3, [pc, #28]	; (8003998 <_sbrk+0x64>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4413      	add	r3, r2
 8003982:	4a05      	ldr	r2, [pc, #20]	; (8003998 <_sbrk+0x64>)
 8003984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003986:	68fb      	ldr	r3, [r7, #12]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	24080000 	.word	0x24080000
 8003994:	00000400 	.word	0x00000400
 8003998:	24000b48 	.word	0x24000b48
 800399c:	24000eb8 	.word	0x24000eb8

080039a0 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039a6:	1d3b      	adds	r3, r7, #4
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	605a      	str	r2, [r3, #4]
 80039ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80039b0:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <MX_TIM7_Init+0x64>)
 80039b2:	4a15      	ldr	r2, [pc, #84]	; (8003a08 <MX_TIM7_Init+0x68>)
 80039b4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 80039b6:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <MX_TIM7_Init+0x64>)
 80039b8:	2253      	movs	r2, #83	; 0x53
 80039ba:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039bc:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <MX_TIM7_Init+0x64>)
 80039be:	2200      	movs	r2, #0
 80039c0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 80039c2:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <MX_TIM7_Init+0x64>)
 80039c4:	2263      	movs	r2, #99	; 0x63
 80039c6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039c8:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <MX_TIM7_Init+0x64>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80039ce:	480d      	ldr	r0, [pc, #52]	; (8003a04 <MX_TIM7_Init+0x64>)
 80039d0:	f008 f95f 	bl	800bc92 <HAL_TIM_Base_Init>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80039da:	f7fe f8a1 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80039de:	2320      	movs	r3, #32
 80039e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039e2:	2300      	movs	r3, #0
 80039e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80039e6:	1d3b      	adds	r3, r7, #4
 80039e8:	4619      	mov	r1, r3
 80039ea:	4806      	ldr	r0, [pc, #24]	; (8003a04 <MX_TIM7_Init+0x64>)
 80039ec:	f008 fc0c 	bl	800c208 <HAL_TIMEx_MasterConfigSynchronization>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80039f6:	f7fe f893 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	24000b4c 	.word	0x24000b4c
 8003a08:	40001400 	.word	0x40001400

08003a0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a0e      	ldr	r2, [pc, #56]	; (8003a54 <HAL_TIM_Base_MspInit+0x48>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d116      	bne.n	8003a4c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003a1e:	4b0e      	ldr	r3, [pc, #56]	; (8003a58 <HAL_TIM_Base_MspInit+0x4c>)
 8003a20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a24:	4a0c      	ldr	r2, [pc, #48]	; (8003a58 <HAL_TIM_Base_MspInit+0x4c>)
 8003a26:	f043 0320 	orr.w	r3, r3, #32
 8003a2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a2e:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <HAL_TIM_Base_MspInit+0x4c>)
 8003a30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	2100      	movs	r1, #0
 8003a40:	2037      	movs	r0, #55	; 0x37
 8003a42:	f000 fbf4 	bl	800422e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003a46:	2037      	movs	r0, #55	; 0x37
 8003a48:	f000 fc0b 	bl	8004262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003a4c:	bf00      	nop
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40001400 	.word	0x40001400
 8003a58:	58024400 	.word	0x58024400

08003a5c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a60:	4b24      	ldr	r3, [pc, #144]	; (8003af4 <MX_USART1_UART_Init+0x98>)
 8003a62:	4a25      	ldr	r2, [pc, #148]	; (8003af8 <MX_USART1_UART_Init+0x9c>)
 8003a64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003a66:	4b23      	ldr	r3, [pc, #140]	; (8003af4 <MX_USART1_UART_Init+0x98>)
 8003a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a6e:	4b21      	ldr	r3, [pc, #132]	; (8003af4 <MX_USART1_UART_Init+0x98>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a74:	4b1f      	ldr	r3, [pc, #124]	; (8003af4 <MX_USART1_UART_Init+0x98>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a7a:	4b1e      	ldr	r3, [pc, #120]	; (8003af4 <MX_USART1_UART_Init+0x98>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a80:	4b1c      	ldr	r3, [pc, #112]	; (8003af4 <MX_USART1_UART_Init+0x98>)
 8003a82:	220c      	movs	r2, #12
 8003a84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a86:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <MX_USART1_UART_Init+0x98>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a8c:	4b19      	ldr	r3, [pc, #100]	; (8003af4 <MX_USART1_UART_Init+0x98>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a92:	4b18      	ldr	r3, [pc, #96]	; (8003af4 <MX_USART1_UART_Init+0x98>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003a98:	4b16      	ldr	r3, [pc, #88]	; (8003af4 <MX_USART1_UART_Init+0x98>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003a9e:	4b15      	ldr	r3, [pc, #84]	; (8003af4 <MX_USART1_UART_Init+0x98>)
 8003aa0:	2210      	movs	r2, #16
 8003aa2:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003aa4:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <MX_USART1_UART_Init+0x98>)
 8003aa6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003aaa:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003aac:	4811      	ldr	r0, [pc, #68]	; (8003af4 <MX_USART1_UART_Init+0x98>)
 8003aae:	f008 fc57 	bl	800c360 <HAL_UART_Init>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 8003ab8:	f7fe f832 	bl	8001b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003abc:	2100      	movs	r1, #0
 8003abe:	480d      	ldr	r0, [pc, #52]	; (8003af4 <MX_USART1_UART_Init+0x98>)
 8003ac0:	f00a fba6 	bl	800e210 <HAL_UARTEx_SetTxFifoThreshold>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 8003aca:	f7fe f829 	bl	8001b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ace:	2100      	movs	r1, #0
 8003ad0:	4808      	ldr	r0, [pc, #32]	; (8003af4 <MX_USART1_UART_Init+0x98>)
 8003ad2:	f00a fbdb 	bl	800e28c <HAL_UARTEx_SetRxFifoThreshold>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 8003adc:	f7fe f820 	bl	8001b20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003ae0:	4804      	ldr	r0, [pc, #16]	; (8003af4 <MX_USART1_UART_Init+0x98>)
 8003ae2:	f00a fb5c 	bl	800e19e <HAL_UARTEx_DisableFifoMode>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 8003aec:	f7fe f818 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003af0:	bf00      	nop
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	24000b98 	.word	0x24000b98
 8003af8:	40011000 	.word	0x40011000

08003afc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003b00:	4b22      	ldr	r3, [pc, #136]	; (8003b8c <MX_USART6_UART_Init+0x90>)
 8003b02:	4a23      	ldr	r2, [pc, #140]	; (8003b90 <MX_USART6_UART_Init+0x94>)
 8003b04:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003b06:	4b21      	ldr	r3, [pc, #132]	; (8003b8c <MX_USART6_UART_Init+0x90>)
 8003b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b0c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003b0e:	4b1f      	ldr	r3, [pc, #124]	; (8003b8c <MX_USART6_UART_Init+0x90>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003b14:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <MX_USART6_UART_Init+0x90>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003b1a:	4b1c      	ldr	r3, [pc, #112]	; (8003b8c <MX_USART6_UART_Init+0x90>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003b20:	4b1a      	ldr	r3, [pc, #104]	; (8003b8c <MX_USART6_UART_Init+0x90>)
 8003b22:	220c      	movs	r2, #12
 8003b24:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b26:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <MX_USART6_UART_Init+0x90>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b2c:	4b17      	ldr	r3, [pc, #92]	; (8003b8c <MX_USART6_UART_Init+0x90>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b32:	4b16      	ldr	r3, [pc, #88]	; (8003b8c <MX_USART6_UART_Init+0x90>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b38:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <MX_USART6_UART_Init+0x90>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b3e:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <MX_USART6_UART_Init+0x90>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003b44:	4811      	ldr	r0, [pc, #68]	; (8003b8c <MX_USART6_UART_Init+0x90>)
 8003b46:	f008 fc0b 	bl	800c360 <HAL_UART_Init>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8003b50:	f7fd ffe6 	bl	8001b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b54:	2100      	movs	r1, #0
 8003b56:	480d      	ldr	r0, [pc, #52]	; (8003b8c <MX_USART6_UART_Init+0x90>)
 8003b58:	f00a fb5a 	bl	800e210 <HAL_UARTEx_SetTxFifoThreshold>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8003b62:	f7fd ffdd 	bl	8001b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b66:	2100      	movs	r1, #0
 8003b68:	4808      	ldr	r0, [pc, #32]	; (8003b8c <MX_USART6_UART_Init+0x90>)
 8003b6a:	f00a fb8f 	bl	800e28c <HAL_UARTEx_SetRxFifoThreshold>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8003b74:	f7fd ffd4 	bl	8001b20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8003b78:	4804      	ldr	r0, [pc, #16]	; (8003b8c <MX_USART6_UART_Init+0x90>)
 8003b7a:	f00a fb10 	bl	800e19e <HAL_UARTEx_DisableFifoMode>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8003b84:	f7fd ffcc 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003b88:	bf00      	nop
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	24000c2c 	.word	0x24000c2c
 8003b90:	40011400 	.word	0x40011400

08003b94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b0bc      	sub	sp, #240	; 0xf0
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	605a      	str	r2, [r3, #4]
 8003ba6:	609a      	str	r2, [r3, #8]
 8003ba8:	60da      	str	r2, [r3, #12]
 8003baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bac:	f107 0318 	add.w	r3, r7, #24
 8003bb0:	22c0      	movs	r2, #192	; 0xc0
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f00a fc2d 	bl	800e414 <memset>
  if(uartHandle->Instance==USART1)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a62      	ldr	r2, [pc, #392]	; (8003d48 <HAL_UART_MspInit+0x1b4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	f040 80cf 	bne.w	8003d64 <HAL_UART_MspInit+0x1d0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003bc6:	f04f 0201 	mov.w	r2, #1
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003bd2:	2318      	movs	r3, #24
 8003bd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bd8:	f107 0318 	add.w	r3, r7, #24
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f005 fe03 	bl	80097e8 <HAL_RCCEx_PeriphCLKConfig>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8003be8:	f7fd ff9a 	bl	8001b20 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bec:	4b57      	ldr	r3, [pc, #348]	; (8003d4c <HAL_UART_MspInit+0x1b8>)
 8003bee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bf2:	4a56      	ldr	r2, [pc, #344]	; (8003d4c <HAL_UART_MspInit+0x1b8>)
 8003bf4:	f043 0310 	orr.w	r3, r3, #16
 8003bf8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003bfc:	4b53      	ldr	r3, [pc, #332]	; (8003d4c <HAL_UART_MspInit+0x1b8>)
 8003bfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c0a:	4b50      	ldr	r3, [pc, #320]	; (8003d4c <HAL_UART_MspInit+0x1b8>)
 8003c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c10:	4a4e      	ldr	r2, [pc, #312]	; (8003d4c <HAL_UART_MspInit+0x1b8>)
 8003c12:	f043 0302 	orr.w	r3, r3, #2
 8003c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c1a:	4b4c      	ldr	r3, [pc, #304]	; (8003d4c <HAL_UART_MspInit+0x1b8>)
 8003c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003c28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c30:	2302      	movs	r3, #2
 8003c32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003c42:	2304      	movs	r3, #4
 8003c44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c48:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4840      	ldr	r0, [pc, #256]	; (8003d50 <HAL_UART_MspInit+0x1bc>)
 8003c50:	f004 fb92 	bl	8008378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c54:	2340      	movs	r3, #64	; 0x40
 8003c56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c66:	2300      	movs	r3, #0
 8003c68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c6c:	2307      	movs	r3, #7
 8003c6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c72:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003c76:	4619      	mov	r1, r3
 8003c78:	4835      	ldr	r0, [pc, #212]	; (8003d50 <HAL_UART_MspInit+0x1bc>)
 8003c7a:	f004 fb7d 	bl	8008378 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 8003c7e:	4b35      	ldr	r3, [pc, #212]	; (8003d54 <HAL_UART_MspInit+0x1c0>)
 8003c80:	4a35      	ldr	r2, [pc, #212]	; (8003d58 <HAL_UART_MspInit+0x1c4>)
 8003c82:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003c84:	4b33      	ldr	r3, [pc, #204]	; (8003d54 <HAL_UART_MspInit+0x1c0>)
 8003c86:	222a      	movs	r2, #42	; 0x2a
 8003c88:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c8a:	4b32      	ldr	r3, [pc, #200]	; (8003d54 <HAL_UART_MspInit+0x1c0>)
 8003c8c:	2240      	movs	r2, #64	; 0x40
 8003c8e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c90:	4b30      	ldr	r3, [pc, #192]	; (8003d54 <HAL_UART_MspInit+0x1c0>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c96:	4b2f      	ldr	r3, [pc, #188]	; (8003d54 <HAL_UART_MspInit+0x1c0>)
 8003c98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c9c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c9e:	4b2d      	ldr	r3, [pc, #180]	; (8003d54 <HAL_UART_MspInit+0x1c0>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ca4:	4b2b      	ldr	r3, [pc, #172]	; (8003d54 <HAL_UART_MspInit+0x1c0>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003caa:	4b2a      	ldr	r3, [pc, #168]	; (8003d54 <HAL_UART_MspInit+0x1c0>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003cb0:	4b28      	ldr	r3, [pc, #160]	; (8003d54 <HAL_UART_MspInit+0x1c0>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cb6:	4b27      	ldr	r3, [pc, #156]	; (8003d54 <HAL_UART_MspInit+0x1c0>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003cbc:	4825      	ldr	r0, [pc, #148]	; (8003d54 <HAL_UART_MspInit+0x1c0>)
 8003cbe:	f000 faeb 	bl	8004298 <HAL_DMA_Init>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8003cc8:	f7fd ff2a 	bl	8001b20 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a21      	ldr	r2, [pc, #132]	; (8003d54 <HAL_UART_MspInit+0x1c0>)
 8003cd0:	67da      	str	r2, [r3, #124]	; 0x7c
 8003cd2:	4a20      	ldr	r2, [pc, #128]	; (8003d54 <HAL_UART_MspInit+0x1c0>)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream1;
 8003cd8:	4b20      	ldr	r3, [pc, #128]	; (8003d5c <HAL_UART_MspInit+0x1c8>)
 8003cda:	4a21      	ldr	r2, [pc, #132]	; (8003d60 <HAL_UART_MspInit+0x1cc>)
 8003cdc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003cde:	4b1f      	ldr	r3, [pc, #124]	; (8003d5c <HAL_UART_MspInit+0x1c8>)
 8003ce0:	2229      	movs	r2, #41	; 0x29
 8003ce2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ce4:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <HAL_UART_MspInit+0x1c8>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cea:	4b1c      	ldr	r3, [pc, #112]	; (8003d5c <HAL_UART_MspInit+0x1c8>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003cf0:	4b1a      	ldr	r3, [pc, #104]	; (8003d5c <HAL_UART_MspInit+0x1c8>)
 8003cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cf6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003cf8:	4b18      	ldr	r3, [pc, #96]	; (8003d5c <HAL_UART_MspInit+0x1c8>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cfe:	4b17      	ldr	r3, [pc, #92]	; (8003d5c <HAL_UART_MspInit+0x1c8>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003d04:	4b15      	ldr	r3, [pc, #84]	; (8003d5c <HAL_UART_MspInit+0x1c8>)
 8003d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d0a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d0c:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <HAL_UART_MspInit+0x1c8>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d12:	4b12      	ldr	r3, [pc, #72]	; (8003d5c <HAL_UART_MspInit+0x1c8>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003d18:	4810      	ldr	r0, [pc, #64]	; (8003d5c <HAL_UART_MspInit+0x1c8>)
 8003d1a:	f000 fabd 	bl	8004298 <HAL_DMA_Init>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <HAL_UART_MspInit+0x194>
    {
      Error_Handler();
 8003d24:	f7fd fefc 	bl	8001b20 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a0c      	ldr	r2, [pc, #48]	; (8003d5c <HAL_UART_MspInit+0x1c8>)
 8003d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003d30:	4a0a      	ldr	r2, [pc, #40]	; (8003d5c <HAL_UART_MspInit+0x1c8>)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003d36:	2200      	movs	r2, #0
 8003d38:	2100      	movs	r1, #0
 8003d3a:	2025      	movs	r0, #37	; 0x25
 8003d3c:	f000 fa77 	bl	800422e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003d40:	2025      	movs	r0, #37	; 0x25
 8003d42:	f000 fa8e 	bl	8004262 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003d46:	e0bd      	b.n	8003ec4 <HAL_UART_MspInit+0x330>
 8003d48:	40011000 	.word	0x40011000
 8003d4c:	58024400 	.word	0x58024400
 8003d50:	58020400 	.word	0x58020400
 8003d54:	24000cc0 	.word	0x24000cc0
 8003d58:	40020010 	.word	0x40020010
 8003d5c:	24000d38 	.word	0x24000d38
 8003d60:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART6)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a58      	ldr	r2, [pc, #352]	; (8003ecc <HAL_UART_MspInit+0x338>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	f040 80aa 	bne.w	8003ec4 <HAL_UART_MspInit+0x330>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003d70:	f04f 0201 	mov.w	r2, #1
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003d7c:	2318      	movs	r3, #24
 8003d7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d82:	f107 0318 	add.w	r3, r7, #24
 8003d86:	4618      	mov	r0, r3
 8003d88:	f005 fd2e 	bl	80097e8 <HAL_RCCEx_PeriphCLKConfig>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_UART_MspInit+0x202>
      Error_Handler();
 8003d92:	f7fd fec5 	bl	8001b20 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003d96:	4b4e      	ldr	r3, [pc, #312]	; (8003ed0 <HAL_UART_MspInit+0x33c>)
 8003d98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d9c:	4a4c      	ldr	r2, [pc, #304]	; (8003ed0 <HAL_UART_MspInit+0x33c>)
 8003d9e:	f043 0320 	orr.w	r3, r3, #32
 8003da2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003da6:	4b4a      	ldr	r3, [pc, #296]	; (8003ed0 <HAL_UART_MspInit+0x33c>)
 8003da8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003db4:	4b46      	ldr	r3, [pc, #280]	; (8003ed0 <HAL_UART_MspInit+0x33c>)
 8003db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dba:	4a45      	ldr	r2, [pc, #276]	; (8003ed0 <HAL_UART_MspInit+0x33c>)
 8003dbc:	f043 0304 	orr.w	r3, r3, #4
 8003dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dc4:	4b42      	ldr	r3, [pc, #264]	; (8003ed0 <HAL_UART_MspInit+0x33c>)
 8003dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003dd2:	23c0      	movs	r3, #192	; 0xc0
 8003dd4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de4:	2300      	movs	r3, #0
 8003de6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003dea:	2307      	movs	r3, #7
 8003dec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003df0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003df4:	4619      	mov	r1, r3
 8003df6:	4837      	ldr	r0, [pc, #220]	; (8003ed4 <HAL_UART_MspInit+0x340>)
 8003df8:	f004 fabe 	bl	8008378 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA1_Stream2;
 8003dfc:	4b36      	ldr	r3, [pc, #216]	; (8003ed8 <HAL_UART_MspInit+0x344>)
 8003dfe:	4a37      	ldr	r2, [pc, #220]	; (8003edc <HAL_UART_MspInit+0x348>)
 8003e00:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 8003e02:	4b35      	ldr	r3, [pc, #212]	; (8003ed8 <HAL_UART_MspInit+0x344>)
 8003e04:	2247      	movs	r2, #71	; 0x47
 8003e06:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e08:	4b33      	ldr	r3, [pc, #204]	; (8003ed8 <HAL_UART_MspInit+0x344>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e0e:	4b32      	ldr	r3, [pc, #200]	; (8003ed8 <HAL_UART_MspInit+0x344>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e14:	4b30      	ldr	r3, [pc, #192]	; (8003ed8 <HAL_UART_MspInit+0x344>)
 8003e16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e1a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e1c:	4b2e      	ldr	r3, [pc, #184]	; (8003ed8 <HAL_UART_MspInit+0x344>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e22:	4b2d      	ldr	r3, [pc, #180]	; (8003ed8 <HAL_UART_MspInit+0x344>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003e28:	4b2b      	ldr	r3, [pc, #172]	; (8003ed8 <HAL_UART_MspInit+0x344>)
 8003e2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e2e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e30:	4b29      	ldr	r3, [pc, #164]	; (8003ed8 <HAL_UART_MspInit+0x344>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e36:	4b28      	ldr	r3, [pc, #160]	; (8003ed8 <HAL_UART_MspInit+0x344>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003e3c:	4826      	ldr	r0, [pc, #152]	; (8003ed8 <HAL_UART_MspInit+0x344>)
 8003e3e:	f000 fa2b 	bl	8004298 <HAL_DMA_Init>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <HAL_UART_MspInit+0x2b8>
      Error_Handler();
 8003e48:	f7fd fe6a 	bl	8001b20 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a22      	ldr	r2, [pc, #136]	; (8003ed8 <HAL_UART_MspInit+0x344>)
 8003e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003e54:	4a20      	ldr	r2, [pc, #128]	; (8003ed8 <HAL_UART_MspInit+0x344>)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA1_Stream3;
 8003e5a:	4b21      	ldr	r3, [pc, #132]	; (8003ee0 <HAL_UART_MspInit+0x34c>)
 8003e5c:	4a21      	ldr	r2, [pc, #132]	; (8003ee4 <HAL_UART_MspInit+0x350>)
 8003e5e:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 8003e60:	4b1f      	ldr	r3, [pc, #124]	; (8003ee0 <HAL_UART_MspInit+0x34c>)
 8003e62:	2248      	movs	r2, #72	; 0x48
 8003e64:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e66:	4b1e      	ldr	r3, [pc, #120]	; (8003ee0 <HAL_UART_MspInit+0x34c>)
 8003e68:	2240      	movs	r2, #64	; 0x40
 8003e6a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e6c:	4b1c      	ldr	r3, [pc, #112]	; (8003ee0 <HAL_UART_MspInit+0x34c>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e72:	4b1b      	ldr	r3, [pc, #108]	; (8003ee0 <HAL_UART_MspInit+0x34c>)
 8003e74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e78:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e7a:	4b19      	ldr	r3, [pc, #100]	; (8003ee0 <HAL_UART_MspInit+0x34c>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e80:	4b17      	ldr	r3, [pc, #92]	; (8003ee0 <HAL_UART_MspInit+0x34c>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003e86:	4b16      	ldr	r3, [pc, #88]	; (8003ee0 <HAL_UART_MspInit+0x34c>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e8c:	4b14      	ldr	r3, [pc, #80]	; (8003ee0 <HAL_UART_MspInit+0x34c>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e92:	4b13      	ldr	r3, [pc, #76]	; (8003ee0 <HAL_UART_MspInit+0x34c>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003e98:	4811      	ldr	r0, [pc, #68]	; (8003ee0 <HAL_UART_MspInit+0x34c>)
 8003e9a:	f000 f9fd 	bl	8004298 <HAL_DMA_Init>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_UART_MspInit+0x314>
      Error_Handler();
 8003ea4:	f7fd fe3c 	bl	8001b20 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a0d      	ldr	r2, [pc, #52]	; (8003ee0 <HAL_UART_MspInit+0x34c>)
 8003eac:	67da      	str	r2, [r3, #124]	; 0x7c
 8003eae:	4a0c      	ldr	r2, [pc, #48]	; (8003ee0 <HAL_UART_MspInit+0x34c>)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	2047      	movs	r0, #71	; 0x47
 8003eba:	f000 f9b8 	bl	800422e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003ebe:	2047      	movs	r0, #71	; 0x47
 8003ec0:	f000 f9cf 	bl	8004262 <HAL_NVIC_EnableIRQ>
}
 8003ec4:	bf00      	nop
 8003ec6:	37f0      	adds	r7, #240	; 0xf0
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40011400 	.word	0x40011400
 8003ed0:	58024400 	.word	0x58024400
 8003ed4:	58020800 	.word	0x58020800
 8003ed8:	24000db0 	.word	0x24000db0
 8003edc:	40020040 	.word	0x40020040
 8003ee0:	24000e28 	.word	0x24000e28
 8003ee4:	40020058 	.word	0x40020058

08003ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003eec:	f7fc fbd2 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ef0:	480c      	ldr	r0, [pc, #48]	; (8003f24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ef2:	490d      	ldr	r1, [pc, #52]	; (8003f28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ef4:	4a0d      	ldr	r2, [pc, #52]	; (8003f2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ef8:	e002      	b.n	8003f00 <LoopCopyDataInit>

08003efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003efe:	3304      	adds	r3, #4

08003f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f04:	d3f9      	bcc.n	8003efa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f06:	4a0a      	ldr	r2, [pc, #40]	; (8003f30 <LoopFillZerobss+0x1e>)
	  ldr r4, =_ebss
 8003f08:	4c0a      	ldr	r4, [pc, #40]	; (8003f34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f0c:	e001      	b.n	8003f12 <LoopFillZerobss>

08003f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f10:	3204      	adds	r2, #4

08003f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f14:	d3fb      	bcc.n	8003f0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f16:	f00a fa4b 	bl	800e3b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f1a:	f7fd faa3 	bl	8001464 <main>
  bx  lr
 8003f1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f20:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003f24:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003f28:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8003f2c:	0800ede0 	.word	0x0800ede0
  ldr r2, =_sbss
 8003f30:	24000090 	.word	0x24000090
	  ldr r4, =_ebss
 8003f34:	24000eb4 	.word	0x24000eb4

08003f38 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f38:	e7fe      	b.n	8003f38 <ADC3_IRQHandler>
	...

08003f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f42:	2003      	movs	r0, #3
 8003f44:	f000 f968 	bl	8004218 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f48:	f005 fa78 	bl	800943c <HAL_RCC_GetSysClockFreq>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <HAL_Init+0x68>)
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	0a1b      	lsrs	r3, r3, #8
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	4913      	ldr	r1, [pc, #76]	; (8003fa8 <HAL_Init+0x6c>)
 8003f5a:	5ccb      	ldrb	r3, [r1, r3]
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	fa22 f303 	lsr.w	r3, r2, r3
 8003f64:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f66:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <HAL_Init+0x68>)
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	4a0e      	ldr	r2, [pc, #56]	; (8003fa8 <HAL_Init+0x6c>)
 8003f70:	5cd3      	ldrb	r3, [r2, r3]
 8003f72:	f003 031f 	and.w	r3, r3, #31
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7c:	4a0b      	ldr	r2, [pc, #44]	; (8003fac <HAL_Init+0x70>)
 8003f7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f80:	4a0b      	ldr	r2, [pc, #44]	; (8003fb0 <HAL_Init+0x74>)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f86:	2000      	movs	r0, #0
 8003f88:	f000 f814 	bl	8003fb4 <HAL_InitTick>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e002      	b.n	8003f9c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003f96:	f7fe fdc7 	bl	8002b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	58024400 	.word	0x58024400
 8003fa8:	0800ed4c 	.word	0x0800ed4c
 8003fac:	24000004 	.word	0x24000004
 8003fb0:	24000000 	.word	0x24000000

08003fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003fbc:	4b15      	ldr	r3, [pc, #84]	; (8004014 <HAL_InitTick+0x60>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e021      	b.n	800400c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003fc8:	4b13      	ldr	r3, [pc, #76]	; (8004018 <HAL_InitTick+0x64>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b11      	ldr	r3, [pc, #68]	; (8004014 <HAL_InitTick+0x60>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 f94d 	bl	800427e <HAL_SYSTICK_Config>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e00e      	b.n	800400c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b0f      	cmp	r3, #15
 8003ff2:	d80a      	bhi.n	800400a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffc:	f000 f917 	bl	800422e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004000:	4a06      	ldr	r2, [pc, #24]	; (800401c <HAL_InitTick+0x68>)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	e000      	b.n	800400c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
}
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	24000028 	.word	0x24000028
 8004018:	24000000 	.word	0x24000000
 800401c:	24000024 	.word	0x24000024

08004020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004024:	4b06      	ldr	r3, [pc, #24]	; (8004040 <HAL_IncTick+0x20>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	461a      	mov	r2, r3
 800402a:	4b06      	ldr	r3, [pc, #24]	; (8004044 <HAL_IncTick+0x24>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4413      	add	r3, r2
 8004030:	4a04      	ldr	r2, [pc, #16]	; (8004044 <HAL_IncTick+0x24>)
 8004032:	6013      	str	r3, [r2, #0]
}
 8004034:	bf00      	nop
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	24000028 	.word	0x24000028
 8004044:	24000ea0 	.word	0x24000ea0

08004048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  return uwTick;
 800404c:	4b03      	ldr	r3, [pc, #12]	; (800405c <HAL_GetTick+0x14>)
 800404e:	681b      	ldr	r3, [r3, #0]
}
 8004050:	4618      	mov	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	24000ea0 	.word	0x24000ea0

08004060 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004064:	4b03      	ldr	r3, [pc, #12]	; (8004074 <HAL_GetREVID+0x14>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	0c1b      	lsrs	r3, r3, #16
}
 800406a:	4618      	mov	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	5c001000 	.word	0x5c001000

08004078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004088:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <__NVIC_SetPriorityGrouping+0x40>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004094:	4013      	ands	r3, r2
 8004096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80040a0:	4b06      	ldr	r3, [pc, #24]	; (80040bc <__NVIC_SetPriorityGrouping+0x44>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040a6:	4a04      	ldr	r2, [pc, #16]	; (80040b8 <__NVIC_SetPriorityGrouping+0x40>)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	60d3      	str	r3, [r2, #12]
}
 80040ac:	bf00      	nop
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	e000ed00 	.word	0xe000ed00
 80040bc:	05fa0000 	.word	0x05fa0000

080040c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040c4:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <__NVIC_GetPriorityGrouping+0x18>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	0a1b      	lsrs	r3, r3, #8
 80040ca:	f003 0307 	and.w	r3, r3, #7
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	e000ed00 	.word	0xe000ed00

080040dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	db0b      	blt.n	8004106 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ee:	88fb      	ldrh	r3, [r7, #6]
 80040f0:	f003 021f 	and.w	r2, r3, #31
 80040f4:	4907      	ldr	r1, [pc, #28]	; (8004114 <__NVIC_EnableIRQ+0x38>)
 80040f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	2001      	movs	r0, #1
 80040fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	e000e100 	.word	0xe000e100

08004118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	6039      	str	r1, [r7, #0]
 8004122:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004128:	2b00      	cmp	r3, #0
 800412a:	db0a      	blt.n	8004142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	b2da      	uxtb	r2, r3
 8004130:	490c      	ldr	r1, [pc, #48]	; (8004164 <__NVIC_SetPriority+0x4c>)
 8004132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004136:	0112      	lsls	r2, r2, #4
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	440b      	add	r3, r1
 800413c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004140:	e00a      	b.n	8004158 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	b2da      	uxtb	r2, r3
 8004146:	4908      	ldr	r1, [pc, #32]	; (8004168 <__NVIC_SetPriority+0x50>)
 8004148:	88fb      	ldrh	r3, [r7, #6]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	3b04      	subs	r3, #4
 8004150:	0112      	lsls	r2, r2, #4
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	440b      	add	r3, r1
 8004156:	761a      	strb	r2, [r3, #24]
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	e000e100 	.word	0xe000e100
 8004168:	e000ed00 	.word	0xe000ed00

0800416c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800416c:	b480      	push	{r7}
 800416e:	b089      	sub	sp, #36	; 0x24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f1c3 0307 	rsb	r3, r3, #7
 8004186:	2b04      	cmp	r3, #4
 8004188:	bf28      	it	cs
 800418a:	2304      	movcs	r3, #4
 800418c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	3304      	adds	r3, #4
 8004192:	2b06      	cmp	r3, #6
 8004194:	d902      	bls.n	800419c <NVIC_EncodePriority+0x30>
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	3b03      	subs	r3, #3
 800419a:	e000      	b.n	800419e <NVIC_EncodePriority+0x32>
 800419c:	2300      	movs	r3, #0
 800419e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041a0:	f04f 32ff 	mov.w	r2, #4294967295
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43da      	mvns	r2, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	401a      	ands	r2, r3
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041b4:	f04f 31ff 	mov.w	r1, #4294967295
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	fa01 f303 	lsl.w	r3, r1, r3
 80041be:	43d9      	mvns	r1, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041c4:	4313      	orrs	r3, r2
         );
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3724      	adds	r7, #36	; 0x24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
	...

080041d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3b01      	subs	r3, #1
 80041e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041e4:	d301      	bcc.n	80041ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041e6:	2301      	movs	r3, #1
 80041e8:	e00f      	b.n	800420a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041ea:	4a0a      	ldr	r2, [pc, #40]	; (8004214 <SysTick_Config+0x40>)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041f2:	210f      	movs	r1, #15
 80041f4:	f04f 30ff 	mov.w	r0, #4294967295
 80041f8:	f7ff ff8e 	bl	8004118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041fc:	4b05      	ldr	r3, [pc, #20]	; (8004214 <SysTick_Config+0x40>)
 80041fe:	2200      	movs	r2, #0
 8004200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004202:	4b04      	ldr	r3, [pc, #16]	; (8004214 <SysTick_Config+0x40>)
 8004204:	2207      	movs	r2, #7
 8004206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	e000e010 	.word	0xe000e010

08004218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff ff29 	bl	8004078 <__NVIC_SetPriorityGrouping>
}
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b086      	sub	sp, #24
 8004232:	af00      	add	r7, sp, #0
 8004234:	4603      	mov	r3, r0
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	607a      	str	r2, [r7, #4]
 800423a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800423c:	f7ff ff40 	bl	80040c0 <__NVIC_GetPriorityGrouping>
 8004240:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	6978      	ldr	r0, [r7, #20]
 8004248:	f7ff ff90 	bl	800416c <NVIC_EncodePriority>
 800424c:	4602      	mov	r2, r0
 800424e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004252:	4611      	mov	r1, r2
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff ff5f 	bl	8004118 <__NVIC_SetPriority>
}
 800425a:	bf00      	nop
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	4603      	mov	r3, r0
 800426a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800426c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff ff33 	bl	80040dc <__NVIC_EnableIRQ>
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b082      	sub	sp, #8
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff ffa4 	bl	80041d4 <SysTick_Config>
 800428c:	4603      	mov	r3, r0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80042a0:	f7ff fed2 	bl	8004048 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e316      	b.n	80048de <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a66      	ldr	r2, [pc, #408]	; (8004450 <HAL_DMA_Init+0x1b8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d04a      	beq.n	8004350 <HAL_DMA_Init+0xb8>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a65      	ldr	r2, [pc, #404]	; (8004454 <HAL_DMA_Init+0x1bc>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d045      	beq.n	8004350 <HAL_DMA_Init+0xb8>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a63      	ldr	r2, [pc, #396]	; (8004458 <HAL_DMA_Init+0x1c0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d040      	beq.n	8004350 <HAL_DMA_Init+0xb8>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a62      	ldr	r2, [pc, #392]	; (800445c <HAL_DMA_Init+0x1c4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d03b      	beq.n	8004350 <HAL_DMA_Init+0xb8>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a60      	ldr	r2, [pc, #384]	; (8004460 <HAL_DMA_Init+0x1c8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d036      	beq.n	8004350 <HAL_DMA_Init+0xb8>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a5f      	ldr	r2, [pc, #380]	; (8004464 <HAL_DMA_Init+0x1cc>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d031      	beq.n	8004350 <HAL_DMA_Init+0xb8>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a5d      	ldr	r2, [pc, #372]	; (8004468 <HAL_DMA_Init+0x1d0>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d02c      	beq.n	8004350 <HAL_DMA_Init+0xb8>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a5c      	ldr	r2, [pc, #368]	; (800446c <HAL_DMA_Init+0x1d4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d027      	beq.n	8004350 <HAL_DMA_Init+0xb8>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a5a      	ldr	r2, [pc, #360]	; (8004470 <HAL_DMA_Init+0x1d8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d022      	beq.n	8004350 <HAL_DMA_Init+0xb8>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a59      	ldr	r2, [pc, #356]	; (8004474 <HAL_DMA_Init+0x1dc>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d01d      	beq.n	8004350 <HAL_DMA_Init+0xb8>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a57      	ldr	r2, [pc, #348]	; (8004478 <HAL_DMA_Init+0x1e0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d018      	beq.n	8004350 <HAL_DMA_Init+0xb8>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a56      	ldr	r2, [pc, #344]	; (800447c <HAL_DMA_Init+0x1e4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d013      	beq.n	8004350 <HAL_DMA_Init+0xb8>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a54      	ldr	r2, [pc, #336]	; (8004480 <HAL_DMA_Init+0x1e8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00e      	beq.n	8004350 <HAL_DMA_Init+0xb8>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a53      	ldr	r2, [pc, #332]	; (8004484 <HAL_DMA_Init+0x1ec>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d009      	beq.n	8004350 <HAL_DMA_Init+0xb8>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a51      	ldr	r2, [pc, #324]	; (8004488 <HAL_DMA_Init+0x1f0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d004      	beq.n	8004350 <HAL_DMA_Init+0xb8>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a50      	ldr	r2, [pc, #320]	; (800448c <HAL_DMA_Init+0x1f4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d101      	bne.n	8004354 <HAL_DMA_Init+0xbc>
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <HAL_DMA_Init+0xbe>
 8004354:	2300      	movs	r3, #0
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 813b 	beq.w	80045d2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a37      	ldr	r2, [pc, #220]	; (8004450 <HAL_DMA_Init+0x1b8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d04a      	beq.n	800440c <HAL_DMA_Init+0x174>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a36      	ldr	r2, [pc, #216]	; (8004454 <HAL_DMA_Init+0x1bc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d045      	beq.n	800440c <HAL_DMA_Init+0x174>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a34      	ldr	r2, [pc, #208]	; (8004458 <HAL_DMA_Init+0x1c0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d040      	beq.n	800440c <HAL_DMA_Init+0x174>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a33      	ldr	r2, [pc, #204]	; (800445c <HAL_DMA_Init+0x1c4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d03b      	beq.n	800440c <HAL_DMA_Init+0x174>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a31      	ldr	r2, [pc, #196]	; (8004460 <HAL_DMA_Init+0x1c8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d036      	beq.n	800440c <HAL_DMA_Init+0x174>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a30      	ldr	r2, [pc, #192]	; (8004464 <HAL_DMA_Init+0x1cc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d031      	beq.n	800440c <HAL_DMA_Init+0x174>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a2e      	ldr	r2, [pc, #184]	; (8004468 <HAL_DMA_Init+0x1d0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d02c      	beq.n	800440c <HAL_DMA_Init+0x174>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a2d      	ldr	r2, [pc, #180]	; (800446c <HAL_DMA_Init+0x1d4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d027      	beq.n	800440c <HAL_DMA_Init+0x174>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a2b      	ldr	r2, [pc, #172]	; (8004470 <HAL_DMA_Init+0x1d8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d022      	beq.n	800440c <HAL_DMA_Init+0x174>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a2a      	ldr	r2, [pc, #168]	; (8004474 <HAL_DMA_Init+0x1dc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d01d      	beq.n	800440c <HAL_DMA_Init+0x174>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a28      	ldr	r2, [pc, #160]	; (8004478 <HAL_DMA_Init+0x1e0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d018      	beq.n	800440c <HAL_DMA_Init+0x174>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a27      	ldr	r2, [pc, #156]	; (800447c <HAL_DMA_Init+0x1e4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d013      	beq.n	800440c <HAL_DMA_Init+0x174>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a25      	ldr	r2, [pc, #148]	; (8004480 <HAL_DMA_Init+0x1e8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00e      	beq.n	800440c <HAL_DMA_Init+0x174>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a24      	ldr	r2, [pc, #144]	; (8004484 <HAL_DMA_Init+0x1ec>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d009      	beq.n	800440c <HAL_DMA_Init+0x174>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a22      	ldr	r2, [pc, #136]	; (8004488 <HAL_DMA_Init+0x1f0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d004      	beq.n	800440c <HAL_DMA_Init+0x174>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a21      	ldr	r2, [pc, #132]	; (800448c <HAL_DMA_Init+0x1f4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d108      	bne.n	800441e <HAL_DMA_Init+0x186>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0201 	bic.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	e007      	b.n	800442e <HAL_DMA_Init+0x196>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0201 	bic.w	r2, r2, #1
 800442c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800442e:	e02f      	b.n	8004490 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004430:	f7ff fe0a 	bl	8004048 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b05      	cmp	r3, #5
 800443c:	d928      	bls.n	8004490 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2220      	movs	r2, #32
 8004442:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2203      	movs	r2, #3
 8004448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e246      	b.n	80048de <HAL_DMA_Init+0x646>
 8004450:	40020010 	.word	0x40020010
 8004454:	40020028 	.word	0x40020028
 8004458:	40020040 	.word	0x40020040
 800445c:	40020058 	.word	0x40020058
 8004460:	40020070 	.word	0x40020070
 8004464:	40020088 	.word	0x40020088
 8004468:	400200a0 	.word	0x400200a0
 800446c:	400200b8 	.word	0x400200b8
 8004470:	40020410 	.word	0x40020410
 8004474:	40020428 	.word	0x40020428
 8004478:	40020440 	.word	0x40020440
 800447c:	40020458 	.word	0x40020458
 8004480:	40020470 	.word	0x40020470
 8004484:	40020488 	.word	0x40020488
 8004488:	400204a0 	.word	0x400204a0
 800448c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1c8      	bne.n	8004430 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4b83      	ldr	r3, [pc, #524]	; (80046b8 <HAL_DMA_Init+0x420>)
 80044aa:	4013      	ands	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80044b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	d107      	bne.n	80044f4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	4313      	orrs	r3, r2
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80044f4:	4b71      	ldr	r3, [pc, #452]	; (80046bc <HAL_DMA_Init+0x424>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	4b71      	ldr	r3, [pc, #452]	; (80046c0 <HAL_DMA_Init+0x428>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004500:	d328      	bcc.n	8004554 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b28      	cmp	r3, #40	; 0x28
 8004508:	d903      	bls.n	8004512 <HAL_DMA_Init+0x27a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b2e      	cmp	r3, #46	; 0x2e
 8004510:	d917      	bls.n	8004542 <HAL_DMA_Init+0x2aa>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2b3e      	cmp	r3, #62	; 0x3e
 8004518:	d903      	bls.n	8004522 <HAL_DMA_Init+0x28a>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b42      	cmp	r3, #66	; 0x42
 8004520:	d90f      	bls.n	8004542 <HAL_DMA_Init+0x2aa>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b46      	cmp	r3, #70	; 0x46
 8004528:	d903      	bls.n	8004532 <HAL_DMA_Init+0x29a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2b48      	cmp	r3, #72	; 0x48
 8004530:	d907      	bls.n	8004542 <HAL_DMA_Init+0x2aa>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b4e      	cmp	r3, #78	; 0x4e
 8004538:	d905      	bls.n	8004546 <HAL_DMA_Init+0x2ae>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b52      	cmp	r3, #82	; 0x52
 8004540:	d801      	bhi.n	8004546 <HAL_DMA_Init+0x2ae>
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <HAL_DMA_Init+0x2b0>
 8004546:	2300      	movs	r3, #0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004552:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f023 0307 	bic.w	r3, r3, #7
 800456a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	2b04      	cmp	r3, #4
 800457c:	d117      	bne.n	80045ae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00e      	beq.n	80045ae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f002 fb33 	bl	8006bfc <DMA_CheckFifoParam>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d008      	beq.n	80045ae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2240      	movs	r2, #64	; 0x40
 80045a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e197      	b.n	80048de <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f002 fa6e 	bl	8006a98 <DMA_CalcBaseAndBitshift>
 80045bc:	4603      	mov	r3, r0
 80045be:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	223f      	movs	r2, #63	; 0x3f
 80045ca:	409a      	lsls	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	609a      	str	r2, [r3, #8]
 80045d0:	e0cd      	b.n	800476e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a3b      	ldr	r2, [pc, #236]	; (80046c4 <HAL_DMA_Init+0x42c>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d022      	beq.n	8004622 <HAL_DMA_Init+0x38a>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a39      	ldr	r2, [pc, #228]	; (80046c8 <HAL_DMA_Init+0x430>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d01d      	beq.n	8004622 <HAL_DMA_Init+0x38a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a38      	ldr	r2, [pc, #224]	; (80046cc <HAL_DMA_Init+0x434>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d018      	beq.n	8004622 <HAL_DMA_Init+0x38a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a36      	ldr	r2, [pc, #216]	; (80046d0 <HAL_DMA_Init+0x438>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d013      	beq.n	8004622 <HAL_DMA_Init+0x38a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a35      	ldr	r2, [pc, #212]	; (80046d4 <HAL_DMA_Init+0x43c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d00e      	beq.n	8004622 <HAL_DMA_Init+0x38a>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a33      	ldr	r2, [pc, #204]	; (80046d8 <HAL_DMA_Init+0x440>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d009      	beq.n	8004622 <HAL_DMA_Init+0x38a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a32      	ldr	r2, [pc, #200]	; (80046dc <HAL_DMA_Init+0x444>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d004      	beq.n	8004622 <HAL_DMA_Init+0x38a>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a30      	ldr	r2, [pc, #192]	; (80046e0 <HAL_DMA_Init+0x448>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d101      	bne.n	8004626 <HAL_DMA_Init+0x38e>
 8004622:	2301      	movs	r3, #1
 8004624:	e000      	b.n	8004628 <HAL_DMA_Init+0x390>
 8004626:	2300      	movs	r3, #0
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 8097 	beq.w	800475c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a24      	ldr	r2, [pc, #144]	; (80046c4 <HAL_DMA_Init+0x42c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d021      	beq.n	800467c <HAL_DMA_Init+0x3e4>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a22      	ldr	r2, [pc, #136]	; (80046c8 <HAL_DMA_Init+0x430>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d01c      	beq.n	800467c <HAL_DMA_Init+0x3e4>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a21      	ldr	r2, [pc, #132]	; (80046cc <HAL_DMA_Init+0x434>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d017      	beq.n	800467c <HAL_DMA_Init+0x3e4>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a1f      	ldr	r2, [pc, #124]	; (80046d0 <HAL_DMA_Init+0x438>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d012      	beq.n	800467c <HAL_DMA_Init+0x3e4>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a1e      	ldr	r2, [pc, #120]	; (80046d4 <HAL_DMA_Init+0x43c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00d      	beq.n	800467c <HAL_DMA_Init+0x3e4>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1c      	ldr	r2, [pc, #112]	; (80046d8 <HAL_DMA_Init+0x440>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d008      	beq.n	800467c <HAL_DMA_Init+0x3e4>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a1b      	ldr	r2, [pc, #108]	; (80046dc <HAL_DMA_Init+0x444>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d003      	beq.n	800467c <HAL_DMA_Init+0x3e4>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a19      	ldr	r2, [pc, #100]	; (80046e0 <HAL_DMA_Init+0x448>)
 800467a:	4293      	cmp	r3, r2
 800467c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2202      	movs	r2, #2
 8004682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4b12      	ldr	r3, [pc, #72]	; (80046e4 <HAL_DMA_Init+0x44c>)
 800469a:	4013      	ands	r3, r2
 800469c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	2b40      	cmp	r3, #64	; 0x40
 80046a4:	d020      	beq.n	80046e8 <HAL_DMA_Init+0x450>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2b80      	cmp	r3, #128	; 0x80
 80046ac:	d102      	bne.n	80046b4 <HAL_DMA_Init+0x41c>
 80046ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046b2:	e01a      	b.n	80046ea <HAL_DMA_Init+0x452>
 80046b4:	2300      	movs	r3, #0
 80046b6:	e018      	b.n	80046ea <HAL_DMA_Init+0x452>
 80046b8:	fe10803f 	.word	0xfe10803f
 80046bc:	5c001000 	.word	0x5c001000
 80046c0:	ffff0000 	.word	0xffff0000
 80046c4:	58025408 	.word	0x58025408
 80046c8:	5802541c 	.word	0x5802541c
 80046cc:	58025430 	.word	0x58025430
 80046d0:	58025444 	.word	0x58025444
 80046d4:	58025458 	.word	0x58025458
 80046d8:	5802546c 	.word	0x5802546c
 80046dc:	58025480 	.word	0x58025480
 80046e0:	58025494 	.word	0x58025494
 80046e4:	fffe000f 	.word	0xfffe000f
 80046e8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	68d2      	ldr	r2, [r2, #12]
 80046ee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80046f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80046f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004700:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004708:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004710:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004718:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	4313      	orrs	r3, r2
 800471e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	461a      	mov	r2, r3
 800472e:	4b6e      	ldr	r3, [pc, #440]	; (80048e8 <HAL_DMA_Init+0x650>)
 8004730:	4413      	add	r3, r2
 8004732:	4a6e      	ldr	r2, [pc, #440]	; (80048ec <HAL_DMA_Init+0x654>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	091b      	lsrs	r3, r3, #4
 800473a:	009a      	lsls	r2, r3, #2
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f002 f9a9 	bl	8006a98 <DMA_CalcBaseAndBitshift>
 8004746:	4603      	mov	r3, r0
 8004748:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	2201      	movs	r2, #1
 8004754:	409a      	lsls	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	605a      	str	r2, [r3, #4]
 800475a:	e008      	b.n	800476e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2240      	movs	r2, #64	; 0x40
 8004760:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2203      	movs	r2, #3
 8004766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e0b7      	b.n	80048de <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a5f      	ldr	r2, [pc, #380]	; (80048f0 <HAL_DMA_Init+0x658>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d072      	beq.n	800485e <HAL_DMA_Init+0x5c6>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a5d      	ldr	r2, [pc, #372]	; (80048f4 <HAL_DMA_Init+0x65c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d06d      	beq.n	800485e <HAL_DMA_Init+0x5c6>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a5c      	ldr	r2, [pc, #368]	; (80048f8 <HAL_DMA_Init+0x660>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d068      	beq.n	800485e <HAL_DMA_Init+0x5c6>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a5a      	ldr	r2, [pc, #360]	; (80048fc <HAL_DMA_Init+0x664>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d063      	beq.n	800485e <HAL_DMA_Init+0x5c6>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a59      	ldr	r2, [pc, #356]	; (8004900 <HAL_DMA_Init+0x668>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d05e      	beq.n	800485e <HAL_DMA_Init+0x5c6>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a57      	ldr	r2, [pc, #348]	; (8004904 <HAL_DMA_Init+0x66c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d059      	beq.n	800485e <HAL_DMA_Init+0x5c6>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a56      	ldr	r2, [pc, #344]	; (8004908 <HAL_DMA_Init+0x670>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d054      	beq.n	800485e <HAL_DMA_Init+0x5c6>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a54      	ldr	r2, [pc, #336]	; (800490c <HAL_DMA_Init+0x674>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d04f      	beq.n	800485e <HAL_DMA_Init+0x5c6>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a53      	ldr	r2, [pc, #332]	; (8004910 <HAL_DMA_Init+0x678>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d04a      	beq.n	800485e <HAL_DMA_Init+0x5c6>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a51      	ldr	r2, [pc, #324]	; (8004914 <HAL_DMA_Init+0x67c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d045      	beq.n	800485e <HAL_DMA_Init+0x5c6>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a50      	ldr	r2, [pc, #320]	; (8004918 <HAL_DMA_Init+0x680>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d040      	beq.n	800485e <HAL_DMA_Init+0x5c6>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a4e      	ldr	r2, [pc, #312]	; (800491c <HAL_DMA_Init+0x684>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d03b      	beq.n	800485e <HAL_DMA_Init+0x5c6>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a4d      	ldr	r2, [pc, #308]	; (8004920 <HAL_DMA_Init+0x688>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d036      	beq.n	800485e <HAL_DMA_Init+0x5c6>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a4b      	ldr	r2, [pc, #300]	; (8004924 <HAL_DMA_Init+0x68c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d031      	beq.n	800485e <HAL_DMA_Init+0x5c6>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a4a      	ldr	r2, [pc, #296]	; (8004928 <HAL_DMA_Init+0x690>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d02c      	beq.n	800485e <HAL_DMA_Init+0x5c6>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a48      	ldr	r2, [pc, #288]	; (800492c <HAL_DMA_Init+0x694>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d027      	beq.n	800485e <HAL_DMA_Init+0x5c6>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a47      	ldr	r2, [pc, #284]	; (8004930 <HAL_DMA_Init+0x698>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d022      	beq.n	800485e <HAL_DMA_Init+0x5c6>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a45      	ldr	r2, [pc, #276]	; (8004934 <HAL_DMA_Init+0x69c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d01d      	beq.n	800485e <HAL_DMA_Init+0x5c6>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a44      	ldr	r2, [pc, #272]	; (8004938 <HAL_DMA_Init+0x6a0>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d018      	beq.n	800485e <HAL_DMA_Init+0x5c6>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a42      	ldr	r2, [pc, #264]	; (800493c <HAL_DMA_Init+0x6a4>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d013      	beq.n	800485e <HAL_DMA_Init+0x5c6>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a41      	ldr	r2, [pc, #260]	; (8004940 <HAL_DMA_Init+0x6a8>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00e      	beq.n	800485e <HAL_DMA_Init+0x5c6>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a3f      	ldr	r2, [pc, #252]	; (8004944 <HAL_DMA_Init+0x6ac>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d009      	beq.n	800485e <HAL_DMA_Init+0x5c6>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a3e      	ldr	r2, [pc, #248]	; (8004948 <HAL_DMA_Init+0x6b0>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d004      	beq.n	800485e <HAL_DMA_Init+0x5c6>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a3c      	ldr	r2, [pc, #240]	; (800494c <HAL_DMA_Init+0x6b4>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d101      	bne.n	8004862 <HAL_DMA_Init+0x5ca>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <HAL_DMA_Init+0x5cc>
 8004862:	2300      	movs	r3, #0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d032      	beq.n	80048ce <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f002 fa43 	bl	8006cf4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2b80      	cmp	r3, #128	; 0x80
 8004874:	d102      	bne.n	800487c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004890:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d010      	beq.n	80048bc <HAL_DMA_Init+0x624>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d80c      	bhi.n	80048bc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f002 fac0 	bl	8006e28 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80048b8:	605a      	str	r2, [r3, #4]
 80048ba:	e008      	b.n	80048ce <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	a7fdabf8 	.word	0xa7fdabf8
 80048ec:	cccccccd 	.word	0xcccccccd
 80048f0:	40020010 	.word	0x40020010
 80048f4:	40020028 	.word	0x40020028
 80048f8:	40020040 	.word	0x40020040
 80048fc:	40020058 	.word	0x40020058
 8004900:	40020070 	.word	0x40020070
 8004904:	40020088 	.word	0x40020088
 8004908:	400200a0 	.word	0x400200a0
 800490c:	400200b8 	.word	0x400200b8
 8004910:	40020410 	.word	0x40020410
 8004914:	40020428 	.word	0x40020428
 8004918:	40020440 	.word	0x40020440
 800491c:	40020458 	.word	0x40020458
 8004920:	40020470 	.word	0x40020470
 8004924:	40020488 	.word	0x40020488
 8004928:	400204a0 	.word	0x400204a0
 800492c:	400204b8 	.word	0x400204b8
 8004930:	58025408 	.word	0x58025408
 8004934:	5802541c 	.word	0x5802541c
 8004938:	58025430 	.word	0x58025430
 800493c:	58025444 	.word	0x58025444
 8004940:	58025458 	.word	0x58025458
 8004944:	5802546c 	.word	0x5802546c
 8004948:	58025480 	.word	0x58025480
 800494c:	58025494 	.word	0x58025494

08004950 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e226      	b.n	8004dba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_DMA_Start_IT+0x2a>
 8004976:	2302      	movs	r3, #2
 8004978:	e21f      	b.n	8004dba <HAL_DMA_Start_IT+0x46a>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b01      	cmp	r3, #1
 800498c:	f040 820a 	bne.w	8004da4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a68      	ldr	r2, [pc, #416]	; (8004b44 <HAL_DMA_Start_IT+0x1f4>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d04a      	beq.n	8004a3e <HAL_DMA_Start_IT+0xee>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a66      	ldr	r2, [pc, #408]	; (8004b48 <HAL_DMA_Start_IT+0x1f8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d045      	beq.n	8004a3e <HAL_DMA_Start_IT+0xee>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a65      	ldr	r2, [pc, #404]	; (8004b4c <HAL_DMA_Start_IT+0x1fc>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d040      	beq.n	8004a3e <HAL_DMA_Start_IT+0xee>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a63      	ldr	r2, [pc, #396]	; (8004b50 <HAL_DMA_Start_IT+0x200>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d03b      	beq.n	8004a3e <HAL_DMA_Start_IT+0xee>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a62      	ldr	r2, [pc, #392]	; (8004b54 <HAL_DMA_Start_IT+0x204>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d036      	beq.n	8004a3e <HAL_DMA_Start_IT+0xee>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a60      	ldr	r2, [pc, #384]	; (8004b58 <HAL_DMA_Start_IT+0x208>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d031      	beq.n	8004a3e <HAL_DMA_Start_IT+0xee>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a5f      	ldr	r2, [pc, #380]	; (8004b5c <HAL_DMA_Start_IT+0x20c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d02c      	beq.n	8004a3e <HAL_DMA_Start_IT+0xee>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a5d      	ldr	r2, [pc, #372]	; (8004b60 <HAL_DMA_Start_IT+0x210>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d027      	beq.n	8004a3e <HAL_DMA_Start_IT+0xee>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a5c      	ldr	r2, [pc, #368]	; (8004b64 <HAL_DMA_Start_IT+0x214>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d022      	beq.n	8004a3e <HAL_DMA_Start_IT+0xee>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a5a      	ldr	r2, [pc, #360]	; (8004b68 <HAL_DMA_Start_IT+0x218>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d01d      	beq.n	8004a3e <HAL_DMA_Start_IT+0xee>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a59      	ldr	r2, [pc, #356]	; (8004b6c <HAL_DMA_Start_IT+0x21c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d018      	beq.n	8004a3e <HAL_DMA_Start_IT+0xee>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a57      	ldr	r2, [pc, #348]	; (8004b70 <HAL_DMA_Start_IT+0x220>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d013      	beq.n	8004a3e <HAL_DMA_Start_IT+0xee>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a56      	ldr	r2, [pc, #344]	; (8004b74 <HAL_DMA_Start_IT+0x224>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00e      	beq.n	8004a3e <HAL_DMA_Start_IT+0xee>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a54      	ldr	r2, [pc, #336]	; (8004b78 <HAL_DMA_Start_IT+0x228>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d009      	beq.n	8004a3e <HAL_DMA_Start_IT+0xee>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a53      	ldr	r2, [pc, #332]	; (8004b7c <HAL_DMA_Start_IT+0x22c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d004      	beq.n	8004a3e <HAL_DMA_Start_IT+0xee>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a51      	ldr	r2, [pc, #324]	; (8004b80 <HAL_DMA_Start_IT+0x230>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d108      	bne.n	8004a50 <HAL_DMA_Start_IT+0x100>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0201 	bic.w	r2, r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	e007      	b.n	8004a60 <HAL_DMA_Start_IT+0x110>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0201 	bic.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	68b9      	ldr	r1, [r7, #8]
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f001 fe6a 	bl	8006740 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a34      	ldr	r2, [pc, #208]	; (8004b44 <HAL_DMA_Start_IT+0x1f4>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d04a      	beq.n	8004b0c <HAL_DMA_Start_IT+0x1bc>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a33      	ldr	r2, [pc, #204]	; (8004b48 <HAL_DMA_Start_IT+0x1f8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d045      	beq.n	8004b0c <HAL_DMA_Start_IT+0x1bc>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a31      	ldr	r2, [pc, #196]	; (8004b4c <HAL_DMA_Start_IT+0x1fc>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d040      	beq.n	8004b0c <HAL_DMA_Start_IT+0x1bc>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a30      	ldr	r2, [pc, #192]	; (8004b50 <HAL_DMA_Start_IT+0x200>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d03b      	beq.n	8004b0c <HAL_DMA_Start_IT+0x1bc>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a2e      	ldr	r2, [pc, #184]	; (8004b54 <HAL_DMA_Start_IT+0x204>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d036      	beq.n	8004b0c <HAL_DMA_Start_IT+0x1bc>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a2d      	ldr	r2, [pc, #180]	; (8004b58 <HAL_DMA_Start_IT+0x208>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d031      	beq.n	8004b0c <HAL_DMA_Start_IT+0x1bc>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a2b      	ldr	r2, [pc, #172]	; (8004b5c <HAL_DMA_Start_IT+0x20c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d02c      	beq.n	8004b0c <HAL_DMA_Start_IT+0x1bc>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a2a      	ldr	r2, [pc, #168]	; (8004b60 <HAL_DMA_Start_IT+0x210>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d027      	beq.n	8004b0c <HAL_DMA_Start_IT+0x1bc>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a28      	ldr	r2, [pc, #160]	; (8004b64 <HAL_DMA_Start_IT+0x214>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d022      	beq.n	8004b0c <HAL_DMA_Start_IT+0x1bc>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a27      	ldr	r2, [pc, #156]	; (8004b68 <HAL_DMA_Start_IT+0x218>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d01d      	beq.n	8004b0c <HAL_DMA_Start_IT+0x1bc>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a25      	ldr	r2, [pc, #148]	; (8004b6c <HAL_DMA_Start_IT+0x21c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d018      	beq.n	8004b0c <HAL_DMA_Start_IT+0x1bc>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a24      	ldr	r2, [pc, #144]	; (8004b70 <HAL_DMA_Start_IT+0x220>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d013      	beq.n	8004b0c <HAL_DMA_Start_IT+0x1bc>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a22      	ldr	r2, [pc, #136]	; (8004b74 <HAL_DMA_Start_IT+0x224>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00e      	beq.n	8004b0c <HAL_DMA_Start_IT+0x1bc>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a21      	ldr	r2, [pc, #132]	; (8004b78 <HAL_DMA_Start_IT+0x228>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d009      	beq.n	8004b0c <HAL_DMA_Start_IT+0x1bc>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1f      	ldr	r2, [pc, #124]	; (8004b7c <HAL_DMA_Start_IT+0x22c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d004      	beq.n	8004b0c <HAL_DMA_Start_IT+0x1bc>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1e      	ldr	r2, [pc, #120]	; (8004b80 <HAL_DMA_Start_IT+0x230>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d101      	bne.n	8004b10 <HAL_DMA_Start_IT+0x1c0>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e000      	b.n	8004b12 <HAL_DMA_Start_IT+0x1c2>
 8004b10:	2300      	movs	r3, #0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d036      	beq.n	8004b84 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f023 021e 	bic.w	r2, r3, #30
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 0216 	orr.w	r2, r2, #22
 8004b28:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d03e      	beq.n	8004bb0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f042 0208 	orr.w	r2, r2, #8
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	e035      	b.n	8004bb0 <HAL_DMA_Start_IT+0x260>
 8004b44:	40020010 	.word	0x40020010
 8004b48:	40020028 	.word	0x40020028
 8004b4c:	40020040 	.word	0x40020040
 8004b50:	40020058 	.word	0x40020058
 8004b54:	40020070 	.word	0x40020070
 8004b58:	40020088 	.word	0x40020088
 8004b5c:	400200a0 	.word	0x400200a0
 8004b60:	400200b8 	.word	0x400200b8
 8004b64:	40020410 	.word	0x40020410
 8004b68:	40020428 	.word	0x40020428
 8004b6c:	40020440 	.word	0x40020440
 8004b70:	40020458 	.word	0x40020458
 8004b74:	40020470 	.word	0x40020470
 8004b78:	40020488 	.word	0x40020488
 8004b7c:	400204a0 	.word	0x400204a0
 8004b80:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f023 020e 	bic.w	r2, r3, #14
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 020a 	orr.w	r2, r2, #10
 8004b96:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d007      	beq.n	8004bb0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0204 	orr.w	r2, r2, #4
 8004bae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a83      	ldr	r2, [pc, #524]	; (8004dc4 <HAL_DMA_Start_IT+0x474>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d072      	beq.n	8004ca0 <HAL_DMA_Start_IT+0x350>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a82      	ldr	r2, [pc, #520]	; (8004dc8 <HAL_DMA_Start_IT+0x478>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d06d      	beq.n	8004ca0 <HAL_DMA_Start_IT+0x350>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a80      	ldr	r2, [pc, #512]	; (8004dcc <HAL_DMA_Start_IT+0x47c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d068      	beq.n	8004ca0 <HAL_DMA_Start_IT+0x350>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a7f      	ldr	r2, [pc, #508]	; (8004dd0 <HAL_DMA_Start_IT+0x480>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d063      	beq.n	8004ca0 <HAL_DMA_Start_IT+0x350>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a7d      	ldr	r2, [pc, #500]	; (8004dd4 <HAL_DMA_Start_IT+0x484>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d05e      	beq.n	8004ca0 <HAL_DMA_Start_IT+0x350>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a7c      	ldr	r2, [pc, #496]	; (8004dd8 <HAL_DMA_Start_IT+0x488>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d059      	beq.n	8004ca0 <HAL_DMA_Start_IT+0x350>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a7a      	ldr	r2, [pc, #488]	; (8004ddc <HAL_DMA_Start_IT+0x48c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d054      	beq.n	8004ca0 <HAL_DMA_Start_IT+0x350>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a79      	ldr	r2, [pc, #484]	; (8004de0 <HAL_DMA_Start_IT+0x490>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d04f      	beq.n	8004ca0 <HAL_DMA_Start_IT+0x350>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a77      	ldr	r2, [pc, #476]	; (8004de4 <HAL_DMA_Start_IT+0x494>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d04a      	beq.n	8004ca0 <HAL_DMA_Start_IT+0x350>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a76      	ldr	r2, [pc, #472]	; (8004de8 <HAL_DMA_Start_IT+0x498>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d045      	beq.n	8004ca0 <HAL_DMA_Start_IT+0x350>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a74      	ldr	r2, [pc, #464]	; (8004dec <HAL_DMA_Start_IT+0x49c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d040      	beq.n	8004ca0 <HAL_DMA_Start_IT+0x350>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a73      	ldr	r2, [pc, #460]	; (8004df0 <HAL_DMA_Start_IT+0x4a0>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d03b      	beq.n	8004ca0 <HAL_DMA_Start_IT+0x350>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a71      	ldr	r2, [pc, #452]	; (8004df4 <HAL_DMA_Start_IT+0x4a4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d036      	beq.n	8004ca0 <HAL_DMA_Start_IT+0x350>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a70      	ldr	r2, [pc, #448]	; (8004df8 <HAL_DMA_Start_IT+0x4a8>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d031      	beq.n	8004ca0 <HAL_DMA_Start_IT+0x350>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a6e      	ldr	r2, [pc, #440]	; (8004dfc <HAL_DMA_Start_IT+0x4ac>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d02c      	beq.n	8004ca0 <HAL_DMA_Start_IT+0x350>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a6d      	ldr	r2, [pc, #436]	; (8004e00 <HAL_DMA_Start_IT+0x4b0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d027      	beq.n	8004ca0 <HAL_DMA_Start_IT+0x350>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a6b      	ldr	r2, [pc, #428]	; (8004e04 <HAL_DMA_Start_IT+0x4b4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d022      	beq.n	8004ca0 <HAL_DMA_Start_IT+0x350>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a6a      	ldr	r2, [pc, #424]	; (8004e08 <HAL_DMA_Start_IT+0x4b8>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d01d      	beq.n	8004ca0 <HAL_DMA_Start_IT+0x350>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a68      	ldr	r2, [pc, #416]	; (8004e0c <HAL_DMA_Start_IT+0x4bc>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d018      	beq.n	8004ca0 <HAL_DMA_Start_IT+0x350>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a67      	ldr	r2, [pc, #412]	; (8004e10 <HAL_DMA_Start_IT+0x4c0>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d013      	beq.n	8004ca0 <HAL_DMA_Start_IT+0x350>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a65      	ldr	r2, [pc, #404]	; (8004e14 <HAL_DMA_Start_IT+0x4c4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00e      	beq.n	8004ca0 <HAL_DMA_Start_IT+0x350>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a64      	ldr	r2, [pc, #400]	; (8004e18 <HAL_DMA_Start_IT+0x4c8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d009      	beq.n	8004ca0 <HAL_DMA_Start_IT+0x350>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a62      	ldr	r2, [pc, #392]	; (8004e1c <HAL_DMA_Start_IT+0x4cc>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d004      	beq.n	8004ca0 <HAL_DMA_Start_IT+0x350>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a61      	ldr	r2, [pc, #388]	; (8004e20 <HAL_DMA_Start_IT+0x4d0>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d101      	bne.n	8004ca4 <HAL_DMA_Start_IT+0x354>
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e000      	b.n	8004ca6 <HAL_DMA_Start_IT+0x356>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d01a      	beq.n	8004ce0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d007      	beq.n	8004cc8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cc6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d007      	beq.n	8004ce0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cde:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a37      	ldr	r2, [pc, #220]	; (8004dc4 <HAL_DMA_Start_IT+0x474>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d04a      	beq.n	8004d80 <HAL_DMA_Start_IT+0x430>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a36      	ldr	r2, [pc, #216]	; (8004dc8 <HAL_DMA_Start_IT+0x478>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d045      	beq.n	8004d80 <HAL_DMA_Start_IT+0x430>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a34      	ldr	r2, [pc, #208]	; (8004dcc <HAL_DMA_Start_IT+0x47c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d040      	beq.n	8004d80 <HAL_DMA_Start_IT+0x430>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a33      	ldr	r2, [pc, #204]	; (8004dd0 <HAL_DMA_Start_IT+0x480>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d03b      	beq.n	8004d80 <HAL_DMA_Start_IT+0x430>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a31      	ldr	r2, [pc, #196]	; (8004dd4 <HAL_DMA_Start_IT+0x484>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d036      	beq.n	8004d80 <HAL_DMA_Start_IT+0x430>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a30      	ldr	r2, [pc, #192]	; (8004dd8 <HAL_DMA_Start_IT+0x488>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d031      	beq.n	8004d80 <HAL_DMA_Start_IT+0x430>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a2e      	ldr	r2, [pc, #184]	; (8004ddc <HAL_DMA_Start_IT+0x48c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d02c      	beq.n	8004d80 <HAL_DMA_Start_IT+0x430>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a2d      	ldr	r2, [pc, #180]	; (8004de0 <HAL_DMA_Start_IT+0x490>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d027      	beq.n	8004d80 <HAL_DMA_Start_IT+0x430>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a2b      	ldr	r2, [pc, #172]	; (8004de4 <HAL_DMA_Start_IT+0x494>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d022      	beq.n	8004d80 <HAL_DMA_Start_IT+0x430>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a2a      	ldr	r2, [pc, #168]	; (8004de8 <HAL_DMA_Start_IT+0x498>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d01d      	beq.n	8004d80 <HAL_DMA_Start_IT+0x430>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a28      	ldr	r2, [pc, #160]	; (8004dec <HAL_DMA_Start_IT+0x49c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d018      	beq.n	8004d80 <HAL_DMA_Start_IT+0x430>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a27      	ldr	r2, [pc, #156]	; (8004df0 <HAL_DMA_Start_IT+0x4a0>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d013      	beq.n	8004d80 <HAL_DMA_Start_IT+0x430>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a25      	ldr	r2, [pc, #148]	; (8004df4 <HAL_DMA_Start_IT+0x4a4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00e      	beq.n	8004d80 <HAL_DMA_Start_IT+0x430>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a24      	ldr	r2, [pc, #144]	; (8004df8 <HAL_DMA_Start_IT+0x4a8>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d009      	beq.n	8004d80 <HAL_DMA_Start_IT+0x430>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a22      	ldr	r2, [pc, #136]	; (8004dfc <HAL_DMA_Start_IT+0x4ac>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d004      	beq.n	8004d80 <HAL_DMA_Start_IT+0x430>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a21      	ldr	r2, [pc, #132]	; (8004e00 <HAL_DMA_Start_IT+0x4b0>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d108      	bne.n	8004d92 <HAL_DMA_Start_IT+0x442>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	e012      	b.n	8004db8 <HAL_DMA_Start_IT+0x468>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0201 	orr.w	r2, r2, #1
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	e009      	b.n	8004db8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004daa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40020010 	.word	0x40020010
 8004dc8:	40020028 	.word	0x40020028
 8004dcc:	40020040 	.word	0x40020040
 8004dd0:	40020058 	.word	0x40020058
 8004dd4:	40020070 	.word	0x40020070
 8004dd8:	40020088 	.word	0x40020088
 8004ddc:	400200a0 	.word	0x400200a0
 8004de0:	400200b8 	.word	0x400200b8
 8004de4:	40020410 	.word	0x40020410
 8004de8:	40020428 	.word	0x40020428
 8004dec:	40020440 	.word	0x40020440
 8004df0:	40020458 	.word	0x40020458
 8004df4:	40020470 	.word	0x40020470
 8004df8:	40020488 	.word	0x40020488
 8004dfc:	400204a0 	.word	0x400204a0
 8004e00:	400204b8 	.word	0x400204b8
 8004e04:	58025408 	.word	0x58025408
 8004e08:	5802541c 	.word	0x5802541c
 8004e0c:	58025430 	.word	0x58025430
 8004e10:	58025444 	.word	0x58025444
 8004e14:	58025458 	.word	0x58025458
 8004e18:	5802546c 	.word	0x5802546c
 8004e1c:	58025480 	.word	0x58025480
 8004e20:	58025494 	.word	0x58025494

08004e24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004e2c:	f7ff f90c 	bl	8004048 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e2dc      	b.n	80053f6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d008      	beq.n	8004e5a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2280      	movs	r2, #128	; 0x80
 8004e4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e2cd      	b.n	80053f6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a76      	ldr	r2, [pc, #472]	; (8005038 <HAL_DMA_Abort+0x214>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d04a      	beq.n	8004efa <HAL_DMA_Abort+0xd6>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a74      	ldr	r2, [pc, #464]	; (800503c <HAL_DMA_Abort+0x218>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d045      	beq.n	8004efa <HAL_DMA_Abort+0xd6>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a73      	ldr	r2, [pc, #460]	; (8005040 <HAL_DMA_Abort+0x21c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d040      	beq.n	8004efa <HAL_DMA_Abort+0xd6>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a71      	ldr	r2, [pc, #452]	; (8005044 <HAL_DMA_Abort+0x220>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d03b      	beq.n	8004efa <HAL_DMA_Abort+0xd6>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a70      	ldr	r2, [pc, #448]	; (8005048 <HAL_DMA_Abort+0x224>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d036      	beq.n	8004efa <HAL_DMA_Abort+0xd6>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a6e      	ldr	r2, [pc, #440]	; (800504c <HAL_DMA_Abort+0x228>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d031      	beq.n	8004efa <HAL_DMA_Abort+0xd6>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a6d      	ldr	r2, [pc, #436]	; (8005050 <HAL_DMA_Abort+0x22c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d02c      	beq.n	8004efa <HAL_DMA_Abort+0xd6>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a6b      	ldr	r2, [pc, #428]	; (8005054 <HAL_DMA_Abort+0x230>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d027      	beq.n	8004efa <HAL_DMA_Abort+0xd6>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a6a      	ldr	r2, [pc, #424]	; (8005058 <HAL_DMA_Abort+0x234>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d022      	beq.n	8004efa <HAL_DMA_Abort+0xd6>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a68      	ldr	r2, [pc, #416]	; (800505c <HAL_DMA_Abort+0x238>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d01d      	beq.n	8004efa <HAL_DMA_Abort+0xd6>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a67      	ldr	r2, [pc, #412]	; (8005060 <HAL_DMA_Abort+0x23c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d018      	beq.n	8004efa <HAL_DMA_Abort+0xd6>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a65      	ldr	r2, [pc, #404]	; (8005064 <HAL_DMA_Abort+0x240>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d013      	beq.n	8004efa <HAL_DMA_Abort+0xd6>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a64      	ldr	r2, [pc, #400]	; (8005068 <HAL_DMA_Abort+0x244>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d00e      	beq.n	8004efa <HAL_DMA_Abort+0xd6>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a62      	ldr	r2, [pc, #392]	; (800506c <HAL_DMA_Abort+0x248>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d009      	beq.n	8004efa <HAL_DMA_Abort+0xd6>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a61      	ldr	r2, [pc, #388]	; (8005070 <HAL_DMA_Abort+0x24c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d004      	beq.n	8004efa <HAL_DMA_Abort+0xd6>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a5f      	ldr	r2, [pc, #380]	; (8005074 <HAL_DMA_Abort+0x250>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d101      	bne.n	8004efe <HAL_DMA_Abort+0xda>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <HAL_DMA_Abort+0xdc>
 8004efe:	2300      	movs	r3, #0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d013      	beq.n	8004f2c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 021e 	bic.w	r2, r2, #30
 8004f12:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695a      	ldr	r2, [r3, #20]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f22:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	617b      	str	r3, [r7, #20]
 8004f2a:	e00a      	b.n	8004f42 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 020e 	bic.w	r2, r2, #14
 8004f3a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a3c      	ldr	r2, [pc, #240]	; (8005038 <HAL_DMA_Abort+0x214>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d072      	beq.n	8005032 <HAL_DMA_Abort+0x20e>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a3a      	ldr	r2, [pc, #232]	; (800503c <HAL_DMA_Abort+0x218>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d06d      	beq.n	8005032 <HAL_DMA_Abort+0x20e>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a39      	ldr	r2, [pc, #228]	; (8005040 <HAL_DMA_Abort+0x21c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d068      	beq.n	8005032 <HAL_DMA_Abort+0x20e>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a37      	ldr	r2, [pc, #220]	; (8005044 <HAL_DMA_Abort+0x220>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d063      	beq.n	8005032 <HAL_DMA_Abort+0x20e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a36      	ldr	r2, [pc, #216]	; (8005048 <HAL_DMA_Abort+0x224>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d05e      	beq.n	8005032 <HAL_DMA_Abort+0x20e>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a34      	ldr	r2, [pc, #208]	; (800504c <HAL_DMA_Abort+0x228>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d059      	beq.n	8005032 <HAL_DMA_Abort+0x20e>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a33      	ldr	r2, [pc, #204]	; (8005050 <HAL_DMA_Abort+0x22c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d054      	beq.n	8005032 <HAL_DMA_Abort+0x20e>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a31      	ldr	r2, [pc, #196]	; (8005054 <HAL_DMA_Abort+0x230>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d04f      	beq.n	8005032 <HAL_DMA_Abort+0x20e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a30      	ldr	r2, [pc, #192]	; (8005058 <HAL_DMA_Abort+0x234>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d04a      	beq.n	8005032 <HAL_DMA_Abort+0x20e>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a2e      	ldr	r2, [pc, #184]	; (800505c <HAL_DMA_Abort+0x238>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d045      	beq.n	8005032 <HAL_DMA_Abort+0x20e>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a2d      	ldr	r2, [pc, #180]	; (8005060 <HAL_DMA_Abort+0x23c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d040      	beq.n	8005032 <HAL_DMA_Abort+0x20e>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a2b      	ldr	r2, [pc, #172]	; (8005064 <HAL_DMA_Abort+0x240>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d03b      	beq.n	8005032 <HAL_DMA_Abort+0x20e>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a2a      	ldr	r2, [pc, #168]	; (8005068 <HAL_DMA_Abort+0x244>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d036      	beq.n	8005032 <HAL_DMA_Abort+0x20e>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a28      	ldr	r2, [pc, #160]	; (800506c <HAL_DMA_Abort+0x248>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d031      	beq.n	8005032 <HAL_DMA_Abort+0x20e>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a27      	ldr	r2, [pc, #156]	; (8005070 <HAL_DMA_Abort+0x24c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d02c      	beq.n	8005032 <HAL_DMA_Abort+0x20e>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a25      	ldr	r2, [pc, #148]	; (8005074 <HAL_DMA_Abort+0x250>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d027      	beq.n	8005032 <HAL_DMA_Abort+0x20e>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a24      	ldr	r2, [pc, #144]	; (8005078 <HAL_DMA_Abort+0x254>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d022      	beq.n	8005032 <HAL_DMA_Abort+0x20e>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a22      	ldr	r2, [pc, #136]	; (800507c <HAL_DMA_Abort+0x258>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d01d      	beq.n	8005032 <HAL_DMA_Abort+0x20e>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a21      	ldr	r2, [pc, #132]	; (8005080 <HAL_DMA_Abort+0x25c>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d018      	beq.n	8005032 <HAL_DMA_Abort+0x20e>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a1f      	ldr	r2, [pc, #124]	; (8005084 <HAL_DMA_Abort+0x260>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d013      	beq.n	8005032 <HAL_DMA_Abort+0x20e>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a1e      	ldr	r2, [pc, #120]	; (8005088 <HAL_DMA_Abort+0x264>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00e      	beq.n	8005032 <HAL_DMA_Abort+0x20e>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a1c      	ldr	r2, [pc, #112]	; (800508c <HAL_DMA_Abort+0x268>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d009      	beq.n	8005032 <HAL_DMA_Abort+0x20e>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a1b      	ldr	r2, [pc, #108]	; (8005090 <HAL_DMA_Abort+0x26c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d004      	beq.n	8005032 <HAL_DMA_Abort+0x20e>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a19      	ldr	r2, [pc, #100]	; (8005094 <HAL_DMA_Abort+0x270>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d132      	bne.n	8005098 <HAL_DMA_Abort+0x274>
 8005032:	2301      	movs	r3, #1
 8005034:	e031      	b.n	800509a <HAL_DMA_Abort+0x276>
 8005036:	bf00      	nop
 8005038:	40020010 	.word	0x40020010
 800503c:	40020028 	.word	0x40020028
 8005040:	40020040 	.word	0x40020040
 8005044:	40020058 	.word	0x40020058
 8005048:	40020070 	.word	0x40020070
 800504c:	40020088 	.word	0x40020088
 8005050:	400200a0 	.word	0x400200a0
 8005054:	400200b8 	.word	0x400200b8
 8005058:	40020410 	.word	0x40020410
 800505c:	40020428 	.word	0x40020428
 8005060:	40020440 	.word	0x40020440
 8005064:	40020458 	.word	0x40020458
 8005068:	40020470 	.word	0x40020470
 800506c:	40020488 	.word	0x40020488
 8005070:	400204a0 	.word	0x400204a0
 8005074:	400204b8 	.word	0x400204b8
 8005078:	58025408 	.word	0x58025408
 800507c:	5802541c 	.word	0x5802541c
 8005080:	58025430 	.word	0x58025430
 8005084:	58025444 	.word	0x58025444
 8005088:	58025458 	.word	0x58025458
 800508c:	5802546c 	.word	0x5802546c
 8005090:	58025480 	.word	0x58025480
 8005094:	58025494 	.word	0x58025494
 8005098:	2300      	movs	r3, #0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d007      	beq.n	80050ae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a6d      	ldr	r2, [pc, #436]	; (8005268 <HAL_DMA_Abort+0x444>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d04a      	beq.n	800514e <HAL_DMA_Abort+0x32a>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a6b      	ldr	r2, [pc, #428]	; (800526c <HAL_DMA_Abort+0x448>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d045      	beq.n	800514e <HAL_DMA_Abort+0x32a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a6a      	ldr	r2, [pc, #424]	; (8005270 <HAL_DMA_Abort+0x44c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d040      	beq.n	800514e <HAL_DMA_Abort+0x32a>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a68      	ldr	r2, [pc, #416]	; (8005274 <HAL_DMA_Abort+0x450>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d03b      	beq.n	800514e <HAL_DMA_Abort+0x32a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a67      	ldr	r2, [pc, #412]	; (8005278 <HAL_DMA_Abort+0x454>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d036      	beq.n	800514e <HAL_DMA_Abort+0x32a>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a65      	ldr	r2, [pc, #404]	; (800527c <HAL_DMA_Abort+0x458>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d031      	beq.n	800514e <HAL_DMA_Abort+0x32a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a64      	ldr	r2, [pc, #400]	; (8005280 <HAL_DMA_Abort+0x45c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d02c      	beq.n	800514e <HAL_DMA_Abort+0x32a>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a62      	ldr	r2, [pc, #392]	; (8005284 <HAL_DMA_Abort+0x460>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d027      	beq.n	800514e <HAL_DMA_Abort+0x32a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a61      	ldr	r2, [pc, #388]	; (8005288 <HAL_DMA_Abort+0x464>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d022      	beq.n	800514e <HAL_DMA_Abort+0x32a>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a5f      	ldr	r2, [pc, #380]	; (800528c <HAL_DMA_Abort+0x468>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d01d      	beq.n	800514e <HAL_DMA_Abort+0x32a>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a5e      	ldr	r2, [pc, #376]	; (8005290 <HAL_DMA_Abort+0x46c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d018      	beq.n	800514e <HAL_DMA_Abort+0x32a>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a5c      	ldr	r2, [pc, #368]	; (8005294 <HAL_DMA_Abort+0x470>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d013      	beq.n	800514e <HAL_DMA_Abort+0x32a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a5b      	ldr	r2, [pc, #364]	; (8005298 <HAL_DMA_Abort+0x474>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00e      	beq.n	800514e <HAL_DMA_Abort+0x32a>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a59      	ldr	r2, [pc, #356]	; (800529c <HAL_DMA_Abort+0x478>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d009      	beq.n	800514e <HAL_DMA_Abort+0x32a>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a58      	ldr	r2, [pc, #352]	; (80052a0 <HAL_DMA_Abort+0x47c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d004      	beq.n	800514e <HAL_DMA_Abort+0x32a>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a56      	ldr	r2, [pc, #344]	; (80052a4 <HAL_DMA_Abort+0x480>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d108      	bne.n	8005160 <HAL_DMA_Abort+0x33c>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0201 	bic.w	r2, r2, #1
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	e007      	b.n	8005170 <HAL_DMA_Abort+0x34c>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0201 	bic.w	r2, r2, #1
 800516e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005170:	e013      	b.n	800519a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005172:	f7fe ff69 	bl	8004048 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b05      	cmp	r3, #5
 800517e:	d90c      	bls.n	800519a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2220      	movs	r2, #32
 8005184:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2203      	movs	r2, #3
 800518a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e12d      	b.n	80053f6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1e5      	bne.n	8005172 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a2f      	ldr	r2, [pc, #188]	; (8005268 <HAL_DMA_Abort+0x444>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d04a      	beq.n	8005246 <HAL_DMA_Abort+0x422>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a2d      	ldr	r2, [pc, #180]	; (800526c <HAL_DMA_Abort+0x448>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d045      	beq.n	8005246 <HAL_DMA_Abort+0x422>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a2c      	ldr	r2, [pc, #176]	; (8005270 <HAL_DMA_Abort+0x44c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d040      	beq.n	8005246 <HAL_DMA_Abort+0x422>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a2a      	ldr	r2, [pc, #168]	; (8005274 <HAL_DMA_Abort+0x450>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d03b      	beq.n	8005246 <HAL_DMA_Abort+0x422>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a29      	ldr	r2, [pc, #164]	; (8005278 <HAL_DMA_Abort+0x454>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d036      	beq.n	8005246 <HAL_DMA_Abort+0x422>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a27      	ldr	r2, [pc, #156]	; (800527c <HAL_DMA_Abort+0x458>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d031      	beq.n	8005246 <HAL_DMA_Abort+0x422>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a26      	ldr	r2, [pc, #152]	; (8005280 <HAL_DMA_Abort+0x45c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d02c      	beq.n	8005246 <HAL_DMA_Abort+0x422>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a24      	ldr	r2, [pc, #144]	; (8005284 <HAL_DMA_Abort+0x460>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d027      	beq.n	8005246 <HAL_DMA_Abort+0x422>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a23      	ldr	r2, [pc, #140]	; (8005288 <HAL_DMA_Abort+0x464>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d022      	beq.n	8005246 <HAL_DMA_Abort+0x422>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a21      	ldr	r2, [pc, #132]	; (800528c <HAL_DMA_Abort+0x468>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d01d      	beq.n	8005246 <HAL_DMA_Abort+0x422>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a20      	ldr	r2, [pc, #128]	; (8005290 <HAL_DMA_Abort+0x46c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d018      	beq.n	8005246 <HAL_DMA_Abort+0x422>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a1e      	ldr	r2, [pc, #120]	; (8005294 <HAL_DMA_Abort+0x470>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d013      	beq.n	8005246 <HAL_DMA_Abort+0x422>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a1d      	ldr	r2, [pc, #116]	; (8005298 <HAL_DMA_Abort+0x474>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00e      	beq.n	8005246 <HAL_DMA_Abort+0x422>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a1b      	ldr	r2, [pc, #108]	; (800529c <HAL_DMA_Abort+0x478>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d009      	beq.n	8005246 <HAL_DMA_Abort+0x422>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a1a      	ldr	r2, [pc, #104]	; (80052a0 <HAL_DMA_Abort+0x47c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d004      	beq.n	8005246 <HAL_DMA_Abort+0x422>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a18      	ldr	r2, [pc, #96]	; (80052a4 <HAL_DMA_Abort+0x480>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d101      	bne.n	800524a <HAL_DMA_Abort+0x426>
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <HAL_DMA_Abort+0x428>
 800524a:	2300      	movs	r3, #0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d02b      	beq.n	80052a8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005254:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800525a:	f003 031f 	and.w	r3, r3, #31
 800525e:	223f      	movs	r2, #63	; 0x3f
 8005260:	409a      	lsls	r2, r3
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	609a      	str	r2, [r3, #8]
 8005266:	e02a      	b.n	80052be <HAL_DMA_Abort+0x49a>
 8005268:	40020010 	.word	0x40020010
 800526c:	40020028 	.word	0x40020028
 8005270:	40020040 	.word	0x40020040
 8005274:	40020058 	.word	0x40020058
 8005278:	40020070 	.word	0x40020070
 800527c:	40020088 	.word	0x40020088
 8005280:	400200a0 	.word	0x400200a0
 8005284:	400200b8 	.word	0x400200b8
 8005288:	40020410 	.word	0x40020410
 800528c:	40020428 	.word	0x40020428
 8005290:	40020440 	.word	0x40020440
 8005294:	40020458 	.word	0x40020458
 8005298:	40020470 	.word	0x40020470
 800529c:	40020488 	.word	0x40020488
 80052a0:	400204a0 	.word	0x400204a0
 80052a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b2:	f003 031f 	and.w	r3, r3, #31
 80052b6:	2201      	movs	r2, #1
 80052b8:	409a      	lsls	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a4f      	ldr	r2, [pc, #316]	; (8005400 <HAL_DMA_Abort+0x5dc>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d072      	beq.n	80053ae <HAL_DMA_Abort+0x58a>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a4d      	ldr	r2, [pc, #308]	; (8005404 <HAL_DMA_Abort+0x5e0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d06d      	beq.n	80053ae <HAL_DMA_Abort+0x58a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a4c      	ldr	r2, [pc, #304]	; (8005408 <HAL_DMA_Abort+0x5e4>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d068      	beq.n	80053ae <HAL_DMA_Abort+0x58a>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a4a      	ldr	r2, [pc, #296]	; (800540c <HAL_DMA_Abort+0x5e8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d063      	beq.n	80053ae <HAL_DMA_Abort+0x58a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a49      	ldr	r2, [pc, #292]	; (8005410 <HAL_DMA_Abort+0x5ec>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d05e      	beq.n	80053ae <HAL_DMA_Abort+0x58a>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a47      	ldr	r2, [pc, #284]	; (8005414 <HAL_DMA_Abort+0x5f0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d059      	beq.n	80053ae <HAL_DMA_Abort+0x58a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a46      	ldr	r2, [pc, #280]	; (8005418 <HAL_DMA_Abort+0x5f4>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d054      	beq.n	80053ae <HAL_DMA_Abort+0x58a>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a44      	ldr	r2, [pc, #272]	; (800541c <HAL_DMA_Abort+0x5f8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d04f      	beq.n	80053ae <HAL_DMA_Abort+0x58a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a43      	ldr	r2, [pc, #268]	; (8005420 <HAL_DMA_Abort+0x5fc>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d04a      	beq.n	80053ae <HAL_DMA_Abort+0x58a>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a41      	ldr	r2, [pc, #260]	; (8005424 <HAL_DMA_Abort+0x600>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d045      	beq.n	80053ae <HAL_DMA_Abort+0x58a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a40      	ldr	r2, [pc, #256]	; (8005428 <HAL_DMA_Abort+0x604>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d040      	beq.n	80053ae <HAL_DMA_Abort+0x58a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a3e      	ldr	r2, [pc, #248]	; (800542c <HAL_DMA_Abort+0x608>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d03b      	beq.n	80053ae <HAL_DMA_Abort+0x58a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a3d      	ldr	r2, [pc, #244]	; (8005430 <HAL_DMA_Abort+0x60c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d036      	beq.n	80053ae <HAL_DMA_Abort+0x58a>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a3b      	ldr	r2, [pc, #236]	; (8005434 <HAL_DMA_Abort+0x610>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d031      	beq.n	80053ae <HAL_DMA_Abort+0x58a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a3a      	ldr	r2, [pc, #232]	; (8005438 <HAL_DMA_Abort+0x614>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d02c      	beq.n	80053ae <HAL_DMA_Abort+0x58a>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a38      	ldr	r2, [pc, #224]	; (800543c <HAL_DMA_Abort+0x618>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d027      	beq.n	80053ae <HAL_DMA_Abort+0x58a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a37      	ldr	r2, [pc, #220]	; (8005440 <HAL_DMA_Abort+0x61c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d022      	beq.n	80053ae <HAL_DMA_Abort+0x58a>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a35      	ldr	r2, [pc, #212]	; (8005444 <HAL_DMA_Abort+0x620>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d01d      	beq.n	80053ae <HAL_DMA_Abort+0x58a>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a34      	ldr	r2, [pc, #208]	; (8005448 <HAL_DMA_Abort+0x624>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d018      	beq.n	80053ae <HAL_DMA_Abort+0x58a>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a32      	ldr	r2, [pc, #200]	; (800544c <HAL_DMA_Abort+0x628>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d013      	beq.n	80053ae <HAL_DMA_Abort+0x58a>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a31      	ldr	r2, [pc, #196]	; (8005450 <HAL_DMA_Abort+0x62c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d00e      	beq.n	80053ae <HAL_DMA_Abort+0x58a>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a2f      	ldr	r2, [pc, #188]	; (8005454 <HAL_DMA_Abort+0x630>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d009      	beq.n	80053ae <HAL_DMA_Abort+0x58a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a2e      	ldr	r2, [pc, #184]	; (8005458 <HAL_DMA_Abort+0x634>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d004      	beq.n	80053ae <HAL_DMA_Abort+0x58a>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a2c      	ldr	r2, [pc, #176]	; (800545c <HAL_DMA_Abort+0x638>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d101      	bne.n	80053b2 <HAL_DMA_Abort+0x58e>
 80053ae:	2301      	movs	r3, #1
 80053b0:	e000      	b.n	80053b4 <HAL_DMA_Abort+0x590>
 80053b2:	2300      	movs	r3, #0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d015      	beq.n	80053e4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80053c0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00c      	beq.n	80053e4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053d8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80053e2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	40020010 	.word	0x40020010
 8005404:	40020028 	.word	0x40020028
 8005408:	40020040 	.word	0x40020040
 800540c:	40020058 	.word	0x40020058
 8005410:	40020070 	.word	0x40020070
 8005414:	40020088 	.word	0x40020088
 8005418:	400200a0 	.word	0x400200a0
 800541c:	400200b8 	.word	0x400200b8
 8005420:	40020410 	.word	0x40020410
 8005424:	40020428 	.word	0x40020428
 8005428:	40020440 	.word	0x40020440
 800542c:	40020458 	.word	0x40020458
 8005430:	40020470 	.word	0x40020470
 8005434:	40020488 	.word	0x40020488
 8005438:	400204a0 	.word	0x400204a0
 800543c:	400204b8 	.word	0x400204b8
 8005440:	58025408 	.word	0x58025408
 8005444:	5802541c 	.word	0x5802541c
 8005448:	58025430 	.word	0x58025430
 800544c:	58025444 	.word	0x58025444
 8005450:	58025458 	.word	0x58025458
 8005454:	5802546c 	.word	0x5802546c
 8005458:	58025480 	.word	0x58025480
 800545c:	58025494 	.word	0x58025494

08005460 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e237      	b.n	80058e2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d004      	beq.n	8005488 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2280      	movs	r2, #128	; 0x80
 8005482:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e22c      	b.n	80058e2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a5c      	ldr	r2, [pc, #368]	; (8005600 <HAL_DMA_Abort_IT+0x1a0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d04a      	beq.n	8005528 <HAL_DMA_Abort_IT+0xc8>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a5b      	ldr	r2, [pc, #364]	; (8005604 <HAL_DMA_Abort_IT+0x1a4>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d045      	beq.n	8005528 <HAL_DMA_Abort_IT+0xc8>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a59      	ldr	r2, [pc, #356]	; (8005608 <HAL_DMA_Abort_IT+0x1a8>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d040      	beq.n	8005528 <HAL_DMA_Abort_IT+0xc8>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a58      	ldr	r2, [pc, #352]	; (800560c <HAL_DMA_Abort_IT+0x1ac>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d03b      	beq.n	8005528 <HAL_DMA_Abort_IT+0xc8>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a56      	ldr	r2, [pc, #344]	; (8005610 <HAL_DMA_Abort_IT+0x1b0>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d036      	beq.n	8005528 <HAL_DMA_Abort_IT+0xc8>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a55      	ldr	r2, [pc, #340]	; (8005614 <HAL_DMA_Abort_IT+0x1b4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d031      	beq.n	8005528 <HAL_DMA_Abort_IT+0xc8>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a53      	ldr	r2, [pc, #332]	; (8005618 <HAL_DMA_Abort_IT+0x1b8>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d02c      	beq.n	8005528 <HAL_DMA_Abort_IT+0xc8>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a52      	ldr	r2, [pc, #328]	; (800561c <HAL_DMA_Abort_IT+0x1bc>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d027      	beq.n	8005528 <HAL_DMA_Abort_IT+0xc8>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a50      	ldr	r2, [pc, #320]	; (8005620 <HAL_DMA_Abort_IT+0x1c0>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d022      	beq.n	8005528 <HAL_DMA_Abort_IT+0xc8>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a4f      	ldr	r2, [pc, #316]	; (8005624 <HAL_DMA_Abort_IT+0x1c4>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d01d      	beq.n	8005528 <HAL_DMA_Abort_IT+0xc8>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a4d      	ldr	r2, [pc, #308]	; (8005628 <HAL_DMA_Abort_IT+0x1c8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d018      	beq.n	8005528 <HAL_DMA_Abort_IT+0xc8>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a4c      	ldr	r2, [pc, #304]	; (800562c <HAL_DMA_Abort_IT+0x1cc>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d013      	beq.n	8005528 <HAL_DMA_Abort_IT+0xc8>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a4a      	ldr	r2, [pc, #296]	; (8005630 <HAL_DMA_Abort_IT+0x1d0>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00e      	beq.n	8005528 <HAL_DMA_Abort_IT+0xc8>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a49      	ldr	r2, [pc, #292]	; (8005634 <HAL_DMA_Abort_IT+0x1d4>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d009      	beq.n	8005528 <HAL_DMA_Abort_IT+0xc8>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a47      	ldr	r2, [pc, #284]	; (8005638 <HAL_DMA_Abort_IT+0x1d8>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d004      	beq.n	8005528 <HAL_DMA_Abort_IT+0xc8>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a46      	ldr	r2, [pc, #280]	; (800563c <HAL_DMA_Abort_IT+0x1dc>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d101      	bne.n	800552c <HAL_DMA_Abort_IT+0xcc>
 8005528:	2301      	movs	r3, #1
 800552a:	e000      	b.n	800552e <HAL_DMA_Abort_IT+0xce>
 800552c:	2300      	movs	r3, #0
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 8086 	beq.w	8005640 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2204      	movs	r2, #4
 8005538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a2f      	ldr	r2, [pc, #188]	; (8005600 <HAL_DMA_Abort_IT+0x1a0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d04a      	beq.n	80055dc <HAL_DMA_Abort_IT+0x17c>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a2e      	ldr	r2, [pc, #184]	; (8005604 <HAL_DMA_Abort_IT+0x1a4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d045      	beq.n	80055dc <HAL_DMA_Abort_IT+0x17c>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a2c      	ldr	r2, [pc, #176]	; (8005608 <HAL_DMA_Abort_IT+0x1a8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d040      	beq.n	80055dc <HAL_DMA_Abort_IT+0x17c>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a2b      	ldr	r2, [pc, #172]	; (800560c <HAL_DMA_Abort_IT+0x1ac>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d03b      	beq.n	80055dc <HAL_DMA_Abort_IT+0x17c>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a29      	ldr	r2, [pc, #164]	; (8005610 <HAL_DMA_Abort_IT+0x1b0>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d036      	beq.n	80055dc <HAL_DMA_Abort_IT+0x17c>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a28      	ldr	r2, [pc, #160]	; (8005614 <HAL_DMA_Abort_IT+0x1b4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d031      	beq.n	80055dc <HAL_DMA_Abort_IT+0x17c>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a26      	ldr	r2, [pc, #152]	; (8005618 <HAL_DMA_Abort_IT+0x1b8>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d02c      	beq.n	80055dc <HAL_DMA_Abort_IT+0x17c>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a25      	ldr	r2, [pc, #148]	; (800561c <HAL_DMA_Abort_IT+0x1bc>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d027      	beq.n	80055dc <HAL_DMA_Abort_IT+0x17c>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a23      	ldr	r2, [pc, #140]	; (8005620 <HAL_DMA_Abort_IT+0x1c0>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d022      	beq.n	80055dc <HAL_DMA_Abort_IT+0x17c>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a22      	ldr	r2, [pc, #136]	; (8005624 <HAL_DMA_Abort_IT+0x1c4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d01d      	beq.n	80055dc <HAL_DMA_Abort_IT+0x17c>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a20      	ldr	r2, [pc, #128]	; (8005628 <HAL_DMA_Abort_IT+0x1c8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d018      	beq.n	80055dc <HAL_DMA_Abort_IT+0x17c>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a1f      	ldr	r2, [pc, #124]	; (800562c <HAL_DMA_Abort_IT+0x1cc>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d013      	beq.n	80055dc <HAL_DMA_Abort_IT+0x17c>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a1d      	ldr	r2, [pc, #116]	; (8005630 <HAL_DMA_Abort_IT+0x1d0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d00e      	beq.n	80055dc <HAL_DMA_Abort_IT+0x17c>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a1c      	ldr	r2, [pc, #112]	; (8005634 <HAL_DMA_Abort_IT+0x1d4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d009      	beq.n	80055dc <HAL_DMA_Abort_IT+0x17c>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a1a      	ldr	r2, [pc, #104]	; (8005638 <HAL_DMA_Abort_IT+0x1d8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d004      	beq.n	80055dc <HAL_DMA_Abort_IT+0x17c>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a19      	ldr	r2, [pc, #100]	; (800563c <HAL_DMA_Abort_IT+0x1dc>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d108      	bne.n	80055ee <HAL_DMA_Abort_IT+0x18e>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 0201 	bic.w	r2, r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	e178      	b.n	80058e0 <HAL_DMA_Abort_IT+0x480>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0201 	bic.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	e16f      	b.n	80058e0 <HAL_DMA_Abort_IT+0x480>
 8005600:	40020010 	.word	0x40020010
 8005604:	40020028 	.word	0x40020028
 8005608:	40020040 	.word	0x40020040
 800560c:	40020058 	.word	0x40020058
 8005610:	40020070 	.word	0x40020070
 8005614:	40020088 	.word	0x40020088
 8005618:	400200a0 	.word	0x400200a0
 800561c:	400200b8 	.word	0x400200b8
 8005620:	40020410 	.word	0x40020410
 8005624:	40020428 	.word	0x40020428
 8005628:	40020440 	.word	0x40020440
 800562c:	40020458 	.word	0x40020458
 8005630:	40020470 	.word	0x40020470
 8005634:	40020488 	.word	0x40020488
 8005638:	400204a0 	.word	0x400204a0
 800563c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 020e 	bic.w	r2, r2, #14
 800564e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a6c      	ldr	r2, [pc, #432]	; (8005808 <HAL_DMA_Abort_IT+0x3a8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d04a      	beq.n	80056f0 <HAL_DMA_Abort_IT+0x290>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a6b      	ldr	r2, [pc, #428]	; (800580c <HAL_DMA_Abort_IT+0x3ac>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d045      	beq.n	80056f0 <HAL_DMA_Abort_IT+0x290>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a69      	ldr	r2, [pc, #420]	; (8005810 <HAL_DMA_Abort_IT+0x3b0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d040      	beq.n	80056f0 <HAL_DMA_Abort_IT+0x290>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a68      	ldr	r2, [pc, #416]	; (8005814 <HAL_DMA_Abort_IT+0x3b4>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d03b      	beq.n	80056f0 <HAL_DMA_Abort_IT+0x290>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a66      	ldr	r2, [pc, #408]	; (8005818 <HAL_DMA_Abort_IT+0x3b8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d036      	beq.n	80056f0 <HAL_DMA_Abort_IT+0x290>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a65      	ldr	r2, [pc, #404]	; (800581c <HAL_DMA_Abort_IT+0x3bc>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d031      	beq.n	80056f0 <HAL_DMA_Abort_IT+0x290>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a63      	ldr	r2, [pc, #396]	; (8005820 <HAL_DMA_Abort_IT+0x3c0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d02c      	beq.n	80056f0 <HAL_DMA_Abort_IT+0x290>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a62      	ldr	r2, [pc, #392]	; (8005824 <HAL_DMA_Abort_IT+0x3c4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d027      	beq.n	80056f0 <HAL_DMA_Abort_IT+0x290>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a60      	ldr	r2, [pc, #384]	; (8005828 <HAL_DMA_Abort_IT+0x3c8>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d022      	beq.n	80056f0 <HAL_DMA_Abort_IT+0x290>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a5f      	ldr	r2, [pc, #380]	; (800582c <HAL_DMA_Abort_IT+0x3cc>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d01d      	beq.n	80056f0 <HAL_DMA_Abort_IT+0x290>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a5d      	ldr	r2, [pc, #372]	; (8005830 <HAL_DMA_Abort_IT+0x3d0>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d018      	beq.n	80056f0 <HAL_DMA_Abort_IT+0x290>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a5c      	ldr	r2, [pc, #368]	; (8005834 <HAL_DMA_Abort_IT+0x3d4>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d013      	beq.n	80056f0 <HAL_DMA_Abort_IT+0x290>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a5a      	ldr	r2, [pc, #360]	; (8005838 <HAL_DMA_Abort_IT+0x3d8>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00e      	beq.n	80056f0 <HAL_DMA_Abort_IT+0x290>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a59      	ldr	r2, [pc, #356]	; (800583c <HAL_DMA_Abort_IT+0x3dc>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d009      	beq.n	80056f0 <HAL_DMA_Abort_IT+0x290>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a57      	ldr	r2, [pc, #348]	; (8005840 <HAL_DMA_Abort_IT+0x3e0>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d004      	beq.n	80056f0 <HAL_DMA_Abort_IT+0x290>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a56      	ldr	r2, [pc, #344]	; (8005844 <HAL_DMA_Abort_IT+0x3e4>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d108      	bne.n	8005702 <HAL_DMA_Abort_IT+0x2a2>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0201 	bic.w	r2, r2, #1
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	e007      	b.n	8005712 <HAL_DMA_Abort_IT+0x2b2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0201 	bic.w	r2, r2, #1
 8005710:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a3c      	ldr	r2, [pc, #240]	; (8005808 <HAL_DMA_Abort_IT+0x3a8>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d072      	beq.n	8005802 <HAL_DMA_Abort_IT+0x3a2>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a3a      	ldr	r2, [pc, #232]	; (800580c <HAL_DMA_Abort_IT+0x3ac>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d06d      	beq.n	8005802 <HAL_DMA_Abort_IT+0x3a2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a39      	ldr	r2, [pc, #228]	; (8005810 <HAL_DMA_Abort_IT+0x3b0>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d068      	beq.n	8005802 <HAL_DMA_Abort_IT+0x3a2>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a37      	ldr	r2, [pc, #220]	; (8005814 <HAL_DMA_Abort_IT+0x3b4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d063      	beq.n	8005802 <HAL_DMA_Abort_IT+0x3a2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a36      	ldr	r2, [pc, #216]	; (8005818 <HAL_DMA_Abort_IT+0x3b8>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d05e      	beq.n	8005802 <HAL_DMA_Abort_IT+0x3a2>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a34      	ldr	r2, [pc, #208]	; (800581c <HAL_DMA_Abort_IT+0x3bc>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d059      	beq.n	8005802 <HAL_DMA_Abort_IT+0x3a2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a33      	ldr	r2, [pc, #204]	; (8005820 <HAL_DMA_Abort_IT+0x3c0>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d054      	beq.n	8005802 <HAL_DMA_Abort_IT+0x3a2>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a31      	ldr	r2, [pc, #196]	; (8005824 <HAL_DMA_Abort_IT+0x3c4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d04f      	beq.n	8005802 <HAL_DMA_Abort_IT+0x3a2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a30      	ldr	r2, [pc, #192]	; (8005828 <HAL_DMA_Abort_IT+0x3c8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d04a      	beq.n	8005802 <HAL_DMA_Abort_IT+0x3a2>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a2e      	ldr	r2, [pc, #184]	; (800582c <HAL_DMA_Abort_IT+0x3cc>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d045      	beq.n	8005802 <HAL_DMA_Abort_IT+0x3a2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a2d      	ldr	r2, [pc, #180]	; (8005830 <HAL_DMA_Abort_IT+0x3d0>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d040      	beq.n	8005802 <HAL_DMA_Abort_IT+0x3a2>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a2b      	ldr	r2, [pc, #172]	; (8005834 <HAL_DMA_Abort_IT+0x3d4>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d03b      	beq.n	8005802 <HAL_DMA_Abort_IT+0x3a2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a2a      	ldr	r2, [pc, #168]	; (8005838 <HAL_DMA_Abort_IT+0x3d8>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d036      	beq.n	8005802 <HAL_DMA_Abort_IT+0x3a2>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a28      	ldr	r2, [pc, #160]	; (800583c <HAL_DMA_Abort_IT+0x3dc>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d031      	beq.n	8005802 <HAL_DMA_Abort_IT+0x3a2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a27      	ldr	r2, [pc, #156]	; (8005840 <HAL_DMA_Abort_IT+0x3e0>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d02c      	beq.n	8005802 <HAL_DMA_Abort_IT+0x3a2>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a25      	ldr	r2, [pc, #148]	; (8005844 <HAL_DMA_Abort_IT+0x3e4>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d027      	beq.n	8005802 <HAL_DMA_Abort_IT+0x3a2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a24      	ldr	r2, [pc, #144]	; (8005848 <HAL_DMA_Abort_IT+0x3e8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d022      	beq.n	8005802 <HAL_DMA_Abort_IT+0x3a2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a22      	ldr	r2, [pc, #136]	; (800584c <HAL_DMA_Abort_IT+0x3ec>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d01d      	beq.n	8005802 <HAL_DMA_Abort_IT+0x3a2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a21      	ldr	r2, [pc, #132]	; (8005850 <HAL_DMA_Abort_IT+0x3f0>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d018      	beq.n	8005802 <HAL_DMA_Abort_IT+0x3a2>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a1f      	ldr	r2, [pc, #124]	; (8005854 <HAL_DMA_Abort_IT+0x3f4>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d013      	beq.n	8005802 <HAL_DMA_Abort_IT+0x3a2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a1e      	ldr	r2, [pc, #120]	; (8005858 <HAL_DMA_Abort_IT+0x3f8>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00e      	beq.n	8005802 <HAL_DMA_Abort_IT+0x3a2>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a1c      	ldr	r2, [pc, #112]	; (800585c <HAL_DMA_Abort_IT+0x3fc>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d009      	beq.n	8005802 <HAL_DMA_Abort_IT+0x3a2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a1b      	ldr	r2, [pc, #108]	; (8005860 <HAL_DMA_Abort_IT+0x400>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d004      	beq.n	8005802 <HAL_DMA_Abort_IT+0x3a2>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a19      	ldr	r2, [pc, #100]	; (8005864 <HAL_DMA_Abort_IT+0x404>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d132      	bne.n	8005868 <HAL_DMA_Abort_IT+0x408>
 8005802:	2301      	movs	r3, #1
 8005804:	e031      	b.n	800586a <HAL_DMA_Abort_IT+0x40a>
 8005806:	bf00      	nop
 8005808:	40020010 	.word	0x40020010
 800580c:	40020028 	.word	0x40020028
 8005810:	40020040 	.word	0x40020040
 8005814:	40020058 	.word	0x40020058
 8005818:	40020070 	.word	0x40020070
 800581c:	40020088 	.word	0x40020088
 8005820:	400200a0 	.word	0x400200a0
 8005824:	400200b8 	.word	0x400200b8
 8005828:	40020410 	.word	0x40020410
 800582c:	40020428 	.word	0x40020428
 8005830:	40020440 	.word	0x40020440
 8005834:	40020458 	.word	0x40020458
 8005838:	40020470 	.word	0x40020470
 800583c:	40020488 	.word	0x40020488
 8005840:	400204a0 	.word	0x400204a0
 8005844:	400204b8 	.word	0x400204b8
 8005848:	58025408 	.word	0x58025408
 800584c:	5802541c 	.word	0x5802541c
 8005850:	58025430 	.word	0x58025430
 8005854:	58025444 	.word	0x58025444
 8005858:	58025458 	.word	0x58025458
 800585c:	5802546c 	.word	0x5802546c
 8005860:	58025480 	.word	0x58025480
 8005864:	58025494 	.word	0x58025494
 8005868:	2300      	movs	r3, #0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d028      	beq.n	80058c0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005878:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800587c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005882:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005888:	f003 031f 	and.w	r3, r3, #31
 800588c:	2201      	movs	r2, #1
 800588e:	409a      	lsls	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800589c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00c      	beq.n	80058c0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80058be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d003      	beq.n	80058e0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop

080058ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b08a      	sub	sp, #40	; 0x28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80058f8:	4b67      	ldr	r3, [pc, #412]	; (8005a98 <HAL_DMA_IRQHandler+0x1ac>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a67      	ldr	r2, [pc, #412]	; (8005a9c <HAL_DMA_IRQHandler+0x1b0>)
 80058fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005902:	0a9b      	lsrs	r3, r3, #10
 8005904:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005910:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a5f      	ldr	r2, [pc, #380]	; (8005aa0 <HAL_DMA_IRQHandler+0x1b4>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d04a      	beq.n	80059be <HAL_DMA_IRQHandler+0xd2>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a5d      	ldr	r2, [pc, #372]	; (8005aa4 <HAL_DMA_IRQHandler+0x1b8>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d045      	beq.n	80059be <HAL_DMA_IRQHandler+0xd2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a5c      	ldr	r2, [pc, #368]	; (8005aa8 <HAL_DMA_IRQHandler+0x1bc>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d040      	beq.n	80059be <HAL_DMA_IRQHandler+0xd2>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a5a      	ldr	r2, [pc, #360]	; (8005aac <HAL_DMA_IRQHandler+0x1c0>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d03b      	beq.n	80059be <HAL_DMA_IRQHandler+0xd2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a59      	ldr	r2, [pc, #356]	; (8005ab0 <HAL_DMA_IRQHandler+0x1c4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d036      	beq.n	80059be <HAL_DMA_IRQHandler+0xd2>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a57      	ldr	r2, [pc, #348]	; (8005ab4 <HAL_DMA_IRQHandler+0x1c8>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d031      	beq.n	80059be <HAL_DMA_IRQHandler+0xd2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a56      	ldr	r2, [pc, #344]	; (8005ab8 <HAL_DMA_IRQHandler+0x1cc>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d02c      	beq.n	80059be <HAL_DMA_IRQHandler+0xd2>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a54      	ldr	r2, [pc, #336]	; (8005abc <HAL_DMA_IRQHandler+0x1d0>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d027      	beq.n	80059be <HAL_DMA_IRQHandler+0xd2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a53      	ldr	r2, [pc, #332]	; (8005ac0 <HAL_DMA_IRQHandler+0x1d4>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d022      	beq.n	80059be <HAL_DMA_IRQHandler+0xd2>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a51      	ldr	r2, [pc, #324]	; (8005ac4 <HAL_DMA_IRQHandler+0x1d8>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d01d      	beq.n	80059be <HAL_DMA_IRQHandler+0xd2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a50      	ldr	r2, [pc, #320]	; (8005ac8 <HAL_DMA_IRQHandler+0x1dc>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d018      	beq.n	80059be <HAL_DMA_IRQHandler+0xd2>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a4e      	ldr	r2, [pc, #312]	; (8005acc <HAL_DMA_IRQHandler+0x1e0>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d013      	beq.n	80059be <HAL_DMA_IRQHandler+0xd2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a4d      	ldr	r2, [pc, #308]	; (8005ad0 <HAL_DMA_IRQHandler+0x1e4>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00e      	beq.n	80059be <HAL_DMA_IRQHandler+0xd2>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a4b      	ldr	r2, [pc, #300]	; (8005ad4 <HAL_DMA_IRQHandler+0x1e8>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d009      	beq.n	80059be <HAL_DMA_IRQHandler+0xd2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a4a      	ldr	r2, [pc, #296]	; (8005ad8 <HAL_DMA_IRQHandler+0x1ec>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d004      	beq.n	80059be <HAL_DMA_IRQHandler+0xd2>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a48      	ldr	r2, [pc, #288]	; (8005adc <HAL_DMA_IRQHandler+0x1f0>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d101      	bne.n	80059c2 <HAL_DMA_IRQHandler+0xd6>
 80059be:	2301      	movs	r3, #1
 80059c0:	e000      	b.n	80059c4 <HAL_DMA_IRQHandler+0xd8>
 80059c2:	2300      	movs	r3, #0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 842b 	beq.w	8006220 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ce:	f003 031f 	and.w	r3, r3, #31
 80059d2:	2208      	movs	r2, #8
 80059d4:	409a      	lsls	r2, r3
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	4013      	ands	r3, r2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 80a2 	beq.w	8005b24 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a2e      	ldr	r2, [pc, #184]	; (8005aa0 <HAL_DMA_IRQHandler+0x1b4>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d04a      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x194>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a2d      	ldr	r2, [pc, #180]	; (8005aa4 <HAL_DMA_IRQHandler+0x1b8>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d045      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x194>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a2b      	ldr	r2, [pc, #172]	; (8005aa8 <HAL_DMA_IRQHandler+0x1bc>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d040      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x194>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a2a      	ldr	r2, [pc, #168]	; (8005aac <HAL_DMA_IRQHandler+0x1c0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d03b      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x194>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a28      	ldr	r2, [pc, #160]	; (8005ab0 <HAL_DMA_IRQHandler+0x1c4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d036      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x194>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a27      	ldr	r2, [pc, #156]	; (8005ab4 <HAL_DMA_IRQHandler+0x1c8>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d031      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x194>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a25      	ldr	r2, [pc, #148]	; (8005ab8 <HAL_DMA_IRQHandler+0x1cc>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d02c      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x194>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a24      	ldr	r2, [pc, #144]	; (8005abc <HAL_DMA_IRQHandler+0x1d0>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d027      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x194>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a22      	ldr	r2, [pc, #136]	; (8005ac0 <HAL_DMA_IRQHandler+0x1d4>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d022      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x194>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a21      	ldr	r2, [pc, #132]	; (8005ac4 <HAL_DMA_IRQHandler+0x1d8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d01d      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x194>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a1f      	ldr	r2, [pc, #124]	; (8005ac8 <HAL_DMA_IRQHandler+0x1dc>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d018      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x194>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a1e      	ldr	r2, [pc, #120]	; (8005acc <HAL_DMA_IRQHandler+0x1e0>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d013      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x194>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a1c      	ldr	r2, [pc, #112]	; (8005ad0 <HAL_DMA_IRQHandler+0x1e4>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d00e      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x194>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a1b      	ldr	r2, [pc, #108]	; (8005ad4 <HAL_DMA_IRQHandler+0x1e8>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d009      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x194>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a19      	ldr	r2, [pc, #100]	; (8005ad8 <HAL_DMA_IRQHandler+0x1ec>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d004      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x194>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a18      	ldr	r2, [pc, #96]	; (8005adc <HAL_DMA_IRQHandler+0x1f0>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d12f      	bne.n	8005ae0 <HAL_DMA_IRQHandler+0x1f4>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0304 	and.w	r3, r3, #4
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	bf14      	ite	ne
 8005a8e:	2301      	movne	r3, #1
 8005a90:	2300      	moveq	r3, #0
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	e02e      	b.n	8005af4 <HAL_DMA_IRQHandler+0x208>
 8005a96:	bf00      	nop
 8005a98:	24000000 	.word	0x24000000
 8005a9c:	1b4e81b5 	.word	0x1b4e81b5
 8005aa0:	40020010 	.word	0x40020010
 8005aa4:	40020028 	.word	0x40020028
 8005aa8:	40020040 	.word	0x40020040
 8005aac:	40020058 	.word	0x40020058
 8005ab0:	40020070 	.word	0x40020070
 8005ab4:	40020088 	.word	0x40020088
 8005ab8:	400200a0 	.word	0x400200a0
 8005abc:	400200b8 	.word	0x400200b8
 8005ac0:	40020410 	.word	0x40020410
 8005ac4:	40020428 	.word	0x40020428
 8005ac8:	40020440 	.word	0x40020440
 8005acc:	40020458 	.word	0x40020458
 8005ad0:	40020470 	.word	0x40020470
 8005ad4:	40020488 	.word	0x40020488
 8005ad8:	400204a0 	.word	0x400204a0
 8005adc:	400204b8 	.word	0x400204b8
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	bf14      	ite	ne
 8005aee:	2301      	movne	r3, #1
 8005af0:	2300      	moveq	r3, #0
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d015      	beq.n	8005b24 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0204 	bic.w	r2, r2, #4
 8005b06:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b0c:	f003 031f 	and.w	r3, r3, #31
 8005b10:	2208      	movs	r2, #8
 8005b12:	409a      	lsls	r2, r3
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1c:	f043 0201 	orr.w	r2, r3, #1
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b28:	f003 031f 	and.w	r3, r3, #31
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d06e      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a69      	ldr	r2, [pc, #420]	; (8005ce4 <HAL_DMA_IRQHandler+0x3f8>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d04a      	beq.n	8005bda <HAL_DMA_IRQHandler+0x2ee>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a67      	ldr	r2, [pc, #412]	; (8005ce8 <HAL_DMA_IRQHandler+0x3fc>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d045      	beq.n	8005bda <HAL_DMA_IRQHandler+0x2ee>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a66      	ldr	r2, [pc, #408]	; (8005cec <HAL_DMA_IRQHandler+0x400>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d040      	beq.n	8005bda <HAL_DMA_IRQHandler+0x2ee>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a64      	ldr	r2, [pc, #400]	; (8005cf0 <HAL_DMA_IRQHandler+0x404>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d03b      	beq.n	8005bda <HAL_DMA_IRQHandler+0x2ee>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a63      	ldr	r2, [pc, #396]	; (8005cf4 <HAL_DMA_IRQHandler+0x408>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d036      	beq.n	8005bda <HAL_DMA_IRQHandler+0x2ee>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a61      	ldr	r2, [pc, #388]	; (8005cf8 <HAL_DMA_IRQHandler+0x40c>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d031      	beq.n	8005bda <HAL_DMA_IRQHandler+0x2ee>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a60      	ldr	r2, [pc, #384]	; (8005cfc <HAL_DMA_IRQHandler+0x410>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d02c      	beq.n	8005bda <HAL_DMA_IRQHandler+0x2ee>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a5e      	ldr	r2, [pc, #376]	; (8005d00 <HAL_DMA_IRQHandler+0x414>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d027      	beq.n	8005bda <HAL_DMA_IRQHandler+0x2ee>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a5d      	ldr	r2, [pc, #372]	; (8005d04 <HAL_DMA_IRQHandler+0x418>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d022      	beq.n	8005bda <HAL_DMA_IRQHandler+0x2ee>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a5b      	ldr	r2, [pc, #364]	; (8005d08 <HAL_DMA_IRQHandler+0x41c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d01d      	beq.n	8005bda <HAL_DMA_IRQHandler+0x2ee>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a5a      	ldr	r2, [pc, #360]	; (8005d0c <HAL_DMA_IRQHandler+0x420>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d018      	beq.n	8005bda <HAL_DMA_IRQHandler+0x2ee>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a58      	ldr	r2, [pc, #352]	; (8005d10 <HAL_DMA_IRQHandler+0x424>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d013      	beq.n	8005bda <HAL_DMA_IRQHandler+0x2ee>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a57      	ldr	r2, [pc, #348]	; (8005d14 <HAL_DMA_IRQHandler+0x428>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00e      	beq.n	8005bda <HAL_DMA_IRQHandler+0x2ee>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a55      	ldr	r2, [pc, #340]	; (8005d18 <HAL_DMA_IRQHandler+0x42c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d009      	beq.n	8005bda <HAL_DMA_IRQHandler+0x2ee>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a54      	ldr	r2, [pc, #336]	; (8005d1c <HAL_DMA_IRQHandler+0x430>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d004      	beq.n	8005bda <HAL_DMA_IRQHandler+0x2ee>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a52      	ldr	r2, [pc, #328]	; (8005d20 <HAL_DMA_IRQHandler+0x434>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d10a      	bne.n	8005bf0 <HAL_DMA_IRQHandler+0x304>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	bf14      	ite	ne
 8005be8:	2301      	movne	r3, #1
 8005bea:	2300      	moveq	r3, #0
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	e003      	b.n	8005bf8 <HAL_DMA_IRQHandler+0x30c>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00d      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c00:	f003 031f 	and.w	r3, r3, #31
 8005c04:	2201      	movs	r2, #1
 8005c06:	409a      	lsls	r2, r3
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c10:	f043 0202 	orr.w	r2, r3, #2
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c1c:	f003 031f 	and.w	r3, r3, #31
 8005c20:	2204      	movs	r2, #4
 8005c22:	409a      	lsls	r2, r3
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	4013      	ands	r3, r2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 808f 	beq.w	8005d4c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a2c      	ldr	r2, [pc, #176]	; (8005ce4 <HAL_DMA_IRQHandler+0x3f8>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d04a      	beq.n	8005cce <HAL_DMA_IRQHandler+0x3e2>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a2a      	ldr	r2, [pc, #168]	; (8005ce8 <HAL_DMA_IRQHandler+0x3fc>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d045      	beq.n	8005cce <HAL_DMA_IRQHandler+0x3e2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a29      	ldr	r2, [pc, #164]	; (8005cec <HAL_DMA_IRQHandler+0x400>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d040      	beq.n	8005cce <HAL_DMA_IRQHandler+0x3e2>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a27      	ldr	r2, [pc, #156]	; (8005cf0 <HAL_DMA_IRQHandler+0x404>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d03b      	beq.n	8005cce <HAL_DMA_IRQHandler+0x3e2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a26      	ldr	r2, [pc, #152]	; (8005cf4 <HAL_DMA_IRQHandler+0x408>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d036      	beq.n	8005cce <HAL_DMA_IRQHandler+0x3e2>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a24      	ldr	r2, [pc, #144]	; (8005cf8 <HAL_DMA_IRQHandler+0x40c>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d031      	beq.n	8005cce <HAL_DMA_IRQHandler+0x3e2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a23      	ldr	r2, [pc, #140]	; (8005cfc <HAL_DMA_IRQHandler+0x410>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d02c      	beq.n	8005cce <HAL_DMA_IRQHandler+0x3e2>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a21      	ldr	r2, [pc, #132]	; (8005d00 <HAL_DMA_IRQHandler+0x414>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d027      	beq.n	8005cce <HAL_DMA_IRQHandler+0x3e2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a20      	ldr	r2, [pc, #128]	; (8005d04 <HAL_DMA_IRQHandler+0x418>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d022      	beq.n	8005cce <HAL_DMA_IRQHandler+0x3e2>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a1e      	ldr	r2, [pc, #120]	; (8005d08 <HAL_DMA_IRQHandler+0x41c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d01d      	beq.n	8005cce <HAL_DMA_IRQHandler+0x3e2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a1d      	ldr	r2, [pc, #116]	; (8005d0c <HAL_DMA_IRQHandler+0x420>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d018      	beq.n	8005cce <HAL_DMA_IRQHandler+0x3e2>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a1b      	ldr	r2, [pc, #108]	; (8005d10 <HAL_DMA_IRQHandler+0x424>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d013      	beq.n	8005cce <HAL_DMA_IRQHandler+0x3e2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a1a      	ldr	r2, [pc, #104]	; (8005d14 <HAL_DMA_IRQHandler+0x428>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d00e      	beq.n	8005cce <HAL_DMA_IRQHandler+0x3e2>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a18      	ldr	r2, [pc, #96]	; (8005d18 <HAL_DMA_IRQHandler+0x42c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d009      	beq.n	8005cce <HAL_DMA_IRQHandler+0x3e2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a17      	ldr	r2, [pc, #92]	; (8005d1c <HAL_DMA_IRQHandler+0x430>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d004      	beq.n	8005cce <HAL_DMA_IRQHandler+0x3e2>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a15      	ldr	r2, [pc, #84]	; (8005d20 <HAL_DMA_IRQHandler+0x434>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d12a      	bne.n	8005d24 <HAL_DMA_IRQHandler+0x438>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	bf14      	ite	ne
 8005cdc:	2301      	movne	r3, #1
 8005cde:	2300      	moveq	r3, #0
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	e023      	b.n	8005d2c <HAL_DMA_IRQHandler+0x440>
 8005ce4:	40020010 	.word	0x40020010
 8005ce8:	40020028 	.word	0x40020028
 8005cec:	40020040 	.word	0x40020040
 8005cf0:	40020058 	.word	0x40020058
 8005cf4:	40020070 	.word	0x40020070
 8005cf8:	40020088 	.word	0x40020088
 8005cfc:	400200a0 	.word	0x400200a0
 8005d00:	400200b8 	.word	0x400200b8
 8005d04:	40020410 	.word	0x40020410
 8005d08:	40020428 	.word	0x40020428
 8005d0c:	40020440 	.word	0x40020440
 8005d10:	40020458 	.word	0x40020458
 8005d14:	40020470 	.word	0x40020470
 8005d18:	40020488 	.word	0x40020488
 8005d1c:	400204a0 	.word	0x400204a0
 8005d20:	400204b8 	.word	0x400204b8
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00d      	beq.n	8005d4c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d34:	f003 031f 	and.w	r3, r3, #31
 8005d38:	2204      	movs	r2, #4
 8005d3a:	409a      	lsls	r2, r3
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d44:	f043 0204 	orr.w	r2, r3, #4
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d50:	f003 031f 	and.w	r3, r3, #31
 8005d54:	2210      	movs	r2, #16
 8005d56:	409a      	lsls	r2, r3
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 80a6 	beq.w	8005eae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a85      	ldr	r2, [pc, #532]	; (8005f7c <HAL_DMA_IRQHandler+0x690>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d04a      	beq.n	8005e02 <HAL_DMA_IRQHandler+0x516>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a83      	ldr	r2, [pc, #524]	; (8005f80 <HAL_DMA_IRQHandler+0x694>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d045      	beq.n	8005e02 <HAL_DMA_IRQHandler+0x516>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a82      	ldr	r2, [pc, #520]	; (8005f84 <HAL_DMA_IRQHandler+0x698>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d040      	beq.n	8005e02 <HAL_DMA_IRQHandler+0x516>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a80      	ldr	r2, [pc, #512]	; (8005f88 <HAL_DMA_IRQHandler+0x69c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d03b      	beq.n	8005e02 <HAL_DMA_IRQHandler+0x516>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a7f      	ldr	r2, [pc, #508]	; (8005f8c <HAL_DMA_IRQHandler+0x6a0>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d036      	beq.n	8005e02 <HAL_DMA_IRQHandler+0x516>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a7d      	ldr	r2, [pc, #500]	; (8005f90 <HAL_DMA_IRQHandler+0x6a4>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d031      	beq.n	8005e02 <HAL_DMA_IRQHandler+0x516>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a7c      	ldr	r2, [pc, #496]	; (8005f94 <HAL_DMA_IRQHandler+0x6a8>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d02c      	beq.n	8005e02 <HAL_DMA_IRQHandler+0x516>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a7a      	ldr	r2, [pc, #488]	; (8005f98 <HAL_DMA_IRQHandler+0x6ac>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d027      	beq.n	8005e02 <HAL_DMA_IRQHandler+0x516>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a79      	ldr	r2, [pc, #484]	; (8005f9c <HAL_DMA_IRQHandler+0x6b0>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d022      	beq.n	8005e02 <HAL_DMA_IRQHandler+0x516>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a77      	ldr	r2, [pc, #476]	; (8005fa0 <HAL_DMA_IRQHandler+0x6b4>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d01d      	beq.n	8005e02 <HAL_DMA_IRQHandler+0x516>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a76      	ldr	r2, [pc, #472]	; (8005fa4 <HAL_DMA_IRQHandler+0x6b8>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d018      	beq.n	8005e02 <HAL_DMA_IRQHandler+0x516>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a74      	ldr	r2, [pc, #464]	; (8005fa8 <HAL_DMA_IRQHandler+0x6bc>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d013      	beq.n	8005e02 <HAL_DMA_IRQHandler+0x516>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a73      	ldr	r2, [pc, #460]	; (8005fac <HAL_DMA_IRQHandler+0x6c0>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d00e      	beq.n	8005e02 <HAL_DMA_IRQHandler+0x516>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a71      	ldr	r2, [pc, #452]	; (8005fb0 <HAL_DMA_IRQHandler+0x6c4>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d009      	beq.n	8005e02 <HAL_DMA_IRQHandler+0x516>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a70      	ldr	r2, [pc, #448]	; (8005fb4 <HAL_DMA_IRQHandler+0x6c8>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d004      	beq.n	8005e02 <HAL_DMA_IRQHandler+0x516>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a6e      	ldr	r2, [pc, #440]	; (8005fb8 <HAL_DMA_IRQHandler+0x6cc>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d10a      	bne.n	8005e18 <HAL_DMA_IRQHandler+0x52c>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0308 	and.w	r3, r3, #8
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	bf14      	ite	ne
 8005e10:	2301      	movne	r3, #1
 8005e12:	2300      	moveq	r3, #0
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	e009      	b.n	8005e2c <HAL_DMA_IRQHandler+0x540>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0304 	and.w	r3, r3, #4
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	bf14      	ite	ne
 8005e26:	2301      	movne	r3, #1
 8005e28:	2300      	moveq	r3, #0
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d03e      	beq.n	8005eae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e34:	f003 031f 	and.w	r3, r3, #31
 8005e38:	2210      	movs	r2, #16
 8005e3a:	409a      	lsls	r2, r3
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d018      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d108      	bne.n	8005e6e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d024      	beq.n	8005eae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	4798      	blx	r3
 8005e6c:	e01f      	b.n	8005eae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d01b      	beq.n	8005eae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	4798      	blx	r3
 8005e7e:	e016      	b.n	8005eae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d107      	bne.n	8005e9e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0208 	bic.w	r2, r2, #8
 8005e9c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb2:	f003 031f 	and.w	r3, r3, #31
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	409a      	lsls	r2, r3
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 8110 	beq.w	80060e4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a2c      	ldr	r2, [pc, #176]	; (8005f7c <HAL_DMA_IRQHandler+0x690>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d04a      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x678>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a2b      	ldr	r2, [pc, #172]	; (8005f80 <HAL_DMA_IRQHandler+0x694>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d045      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x678>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a29      	ldr	r2, [pc, #164]	; (8005f84 <HAL_DMA_IRQHandler+0x698>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d040      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x678>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a28      	ldr	r2, [pc, #160]	; (8005f88 <HAL_DMA_IRQHandler+0x69c>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d03b      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x678>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a26      	ldr	r2, [pc, #152]	; (8005f8c <HAL_DMA_IRQHandler+0x6a0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d036      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x678>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a25      	ldr	r2, [pc, #148]	; (8005f90 <HAL_DMA_IRQHandler+0x6a4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d031      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x678>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a23      	ldr	r2, [pc, #140]	; (8005f94 <HAL_DMA_IRQHandler+0x6a8>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d02c      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x678>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a22      	ldr	r2, [pc, #136]	; (8005f98 <HAL_DMA_IRQHandler+0x6ac>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d027      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x678>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a20      	ldr	r2, [pc, #128]	; (8005f9c <HAL_DMA_IRQHandler+0x6b0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d022      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x678>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a1f      	ldr	r2, [pc, #124]	; (8005fa0 <HAL_DMA_IRQHandler+0x6b4>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d01d      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x678>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a1d      	ldr	r2, [pc, #116]	; (8005fa4 <HAL_DMA_IRQHandler+0x6b8>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d018      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x678>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a1c      	ldr	r2, [pc, #112]	; (8005fa8 <HAL_DMA_IRQHandler+0x6bc>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d013      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x678>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a1a      	ldr	r2, [pc, #104]	; (8005fac <HAL_DMA_IRQHandler+0x6c0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d00e      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x678>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a19      	ldr	r2, [pc, #100]	; (8005fb0 <HAL_DMA_IRQHandler+0x6c4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d009      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x678>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a17      	ldr	r2, [pc, #92]	; (8005fb4 <HAL_DMA_IRQHandler+0x6c8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d004      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x678>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a16      	ldr	r2, [pc, #88]	; (8005fb8 <HAL_DMA_IRQHandler+0x6cc>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d12b      	bne.n	8005fbc <HAL_DMA_IRQHandler+0x6d0>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0310 	and.w	r3, r3, #16
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	bf14      	ite	ne
 8005f72:	2301      	movne	r3, #1
 8005f74:	2300      	moveq	r3, #0
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	e02a      	b.n	8005fd0 <HAL_DMA_IRQHandler+0x6e4>
 8005f7a:	bf00      	nop
 8005f7c:	40020010 	.word	0x40020010
 8005f80:	40020028 	.word	0x40020028
 8005f84:	40020040 	.word	0x40020040
 8005f88:	40020058 	.word	0x40020058
 8005f8c:	40020070 	.word	0x40020070
 8005f90:	40020088 	.word	0x40020088
 8005f94:	400200a0 	.word	0x400200a0
 8005f98:	400200b8 	.word	0x400200b8
 8005f9c:	40020410 	.word	0x40020410
 8005fa0:	40020428 	.word	0x40020428
 8005fa4:	40020440 	.word	0x40020440
 8005fa8:	40020458 	.word	0x40020458
 8005fac:	40020470 	.word	0x40020470
 8005fb0:	40020488 	.word	0x40020488
 8005fb4:	400204a0 	.word	0x400204a0
 8005fb8:	400204b8 	.word	0x400204b8
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	bf14      	ite	ne
 8005fca:	2301      	movne	r3, #1
 8005fcc:	2300      	moveq	r3, #0
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 8087 	beq.w	80060e4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fda:	f003 031f 	and.w	r3, r3, #31
 8005fde:	2220      	movs	r2, #32
 8005fe0:	409a      	lsls	r2, r3
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b04      	cmp	r3, #4
 8005ff0:	d139      	bne.n	8006066 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 0216 	bic.w	r2, r2, #22
 8006000:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695a      	ldr	r2, [r3, #20]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006010:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	2b00      	cmp	r3, #0
 8006018:	d103      	bne.n	8006022 <HAL_DMA_IRQHandler+0x736>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800601e:	2b00      	cmp	r3, #0
 8006020:	d007      	beq.n	8006032 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0208 	bic.w	r2, r2, #8
 8006030:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006036:	f003 031f 	and.w	r3, r3, #31
 800603a:	223f      	movs	r2, #63	; 0x3f
 800603c:	409a      	lsls	r2, r3
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 834a 	beq.w	80066f0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	4798      	blx	r3
          }
          return;
 8006064:	e344      	b.n	80066f0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d018      	beq.n	80060a6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d108      	bne.n	8006094 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006086:	2b00      	cmp	r3, #0
 8006088:	d02c      	beq.n	80060e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	4798      	blx	r3
 8006092:	e027      	b.n	80060e4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006098:	2b00      	cmp	r3, #0
 800609a:	d023      	beq.n	80060e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	4798      	blx	r3
 80060a4:	e01e      	b.n	80060e4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10f      	bne.n	80060d4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 0210 	bic.w	r2, r2, #16
 80060c2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 8306 	beq.w	80066fa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 8088 	beq.w	800620c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2204      	movs	r2, #4
 8006100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a7a      	ldr	r2, [pc, #488]	; (80062f4 <HAL_DMA_IRQHandler+0xa08>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d04a      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x8b8>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a79      	ldr	r2, [pc, #484]	; (80062f8 <HAL_DMA_IRQHandler+0xa0c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d045      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x8b8>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a77      	ldr	r2, [pc, #476]	; (80062fc <HAL_DMA_IRQHandler+0xa10>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d040      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x8b8>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a76      	ldr	r2, [pc, #472]	; (8006300 <HAL_DMA_IRQHandler+0xa14>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d03b      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x8b8>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a74      	ldr	r2, [pc, #464]	; (8006304 <HAL_DMA_IRQHandler+0xa18>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d036      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x8b8>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a73      	ldr	r2, [pc, #460]	; (8006308 <HAL_DMA_IRQHandler+0xa1c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d031      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x8b8>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a71      	ldr	r2, [pc, #452]	; (800630c <HAL_DMA_IRQHandler+0xa20>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d02c      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x8b8>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a70      	ldr	r2, [pc, #448]	; (8006310 <HAL_DMA_IRQHandler+0xa24>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d027      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x8b8>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a6e      	ldr	r2, [pc, #440]	; (8006314 <HAL_DMA_IRQHandler+0xa28>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d022      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x8b8>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a6d      	ldr	r2, [pc, #436]	; (8006318 <HAL_DMA_IRQHandler+0xa2c>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d01d      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x8b8>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a6b      	ldr	r2, [pc, #428]	; (800631c <HAL_DMA_IRQHandler+0xa30>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d018      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x8b8>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a6a      	ldr	r2, [pc, #424]	; (8006320 <HAL_DMA_IRQHandler+0xa34>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d013      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x8b8>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a68      	ldr	r2, [pc, #416]	; (8006324 <HAL_DMA_IRQHandler+0xa38>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d00e      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x8b8>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a67      	ldr	r2, [pc, #412]	; (8006328 <HAL_DMA_IRQHandler+0xa3c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d009      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x8b8>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a65      	ldr	r2, [pc, #404]	; (800632c <HAL_DMA_IRQHandler+0xa40>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d004      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x8b8>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a64      	ldr	r2, [pc, #400]	; (8006330 <HAL_DMA_IRQHandler+0xa44>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d108      	bne.n	80061b6 <HAL_DMA_IRQHandler+0x8ca>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0201 	bic.w	r2, r2, #1
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	e007      	b.n	80061c6 <HAL_DMA_IRQHandler+0x8da>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 0201 	bic.w	r2, r2, #1
 80061c4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3301      	adds	r3, #1
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d307      	bcc.n	80061e2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1f2      	bne.n	80061c6 <HAL_DMA_IRQHandler+0x8da>
 80061e0:	e000      	b.n	80061e4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80061e2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d004      	beq.n	80061fc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2203      	movs	r2, #3
 80061f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80061fa:	e003      	b.n	8006204 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 8272 	beq.w	80066fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	4798      	blx	r3
 800621e:	e26c      	b.n	80066fa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a43      	ldr	r2, [pc, #268]	; (8006334 <HAL_DMA_IRQHandler+0xa48>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d022      	beq.n	8006270 <HAL_DMA_IRQHandler+0x984>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a42      	ldr	r2, [pc, #264]	; (8006338 <HAL_DMA_IRQHandler+0xa4c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d01d      	beq.n	8006270 <HAL_DMA_IRQHandler+0x984>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a40      	ldr	r2, [pc, #256]	; (800633c <HAL_DMA_IRQHandler+0xa50>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d018      	beq.n	8006270 <HAL_DMA_IRQHandler+0x984>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a3f      	ldr	r2, [pc, #252]	; (8006340 <HAL_DMA_IRQHandler+0xa54>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d013      	beq.n	8006270 <HAL_DMA_IRQHandler+0x984>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a3d      	ldr	r2, [pc, #244]	; (8006344 <HAL_DMA_IRQHandler+0xa58>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d00e      	beq.n	8006270 <HAL_DMA_IRQHandler+0x984>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a3c      	ldr	r2, [pc, #240]	; (8006348 <HAL_DMA_IRQHandler+0xa5c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d009      	beq.n	8006270 <HAL_DMA_IRQHandler+0x984>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a3a      	ldr	r2, [pc, #232]	; (800634c <HAL_DMA_IRQHandler+0xa60>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d004      	beq.n	8006270 <HAL_DMA_IRQHandler+0x984>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a39      	ldr	r2, [pc, #228]	; (8006350 <HAL_DMA_IRQHandler+0xa64>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d101      	bne.n	8006274 <HAL_DMA_IRQHandler+0x988>
 8006270:	2301      	movs	r3, #1
 8006272:	e000      	b.n	8006276 <HAL_DMA_IRQHandler+0x98a>
 8006274:	2300      	movs	r3, #0
 8006276:	2b00      	cmp	r3, #0
 8006278:	f000 823f 	beq.w	80066fa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006288:	f003 031f 	and.w	r3, r3, #31
 800628c:	2204      	movs	r2, #4
 800628e:	409a      	lsls	r2, r3
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	4013      	ands	r3, r2
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 80cd 	beq.w	8006434 <HAL_DMA_IRQHandler+0xb48>
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 80c7 	beq.w	8006434 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062aa:	f003 031f 	and.w	r3, r3, #31
 80062ae:	2204      	movs	r2, #4
 80062b0:	409a      	lsls	r2, r3
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d049      	beq.n	8006354 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d109      	bne.n	80062de <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 8210 	beq.w	80066f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062dc:	e20a      	b.n	80066f4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f000 8206 	beq.w	80066f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062f0:	e200      	b.n	80066f4 <HAL_DMA_IRQHandler+0xe08>
 80062f2:	bf00      	nop
 80062f4:	40020010 	.word	0x40020010
 80062f8:	40020028 	.word	0x40020028
 80062fc:	40020040 	.word	0x40020040
 8006300:	40020058 	.word	0x40020058
 8006304:	40020070 	.word	0x40020070
 8006308:	40020088 	.word	0x40020088
 800630c:	400200a0 	.word	0x400200a0
 8006310:	400200b8 	.word	0x400200b8
 8006314:	40020410 	.word	0x40020410
 8006318:	40020428 	.word	0x40020428
 800631c:	40020440 	.word	0x40020440
 8006320:	40020458 	.word	0x40020458
 8006324:	40020470 	.word	0x40020470
 8006328:	40020488 	.word	0x40020488
 800632c:	400204a0 	.word	0x400204a0
 8006330:	400204b8 	.word	0x400204b8
 8006334:	58025408 	.word	0x58025408
 8006338:	5802541c 	.word	0x5802541c
 800633c:	58025430 	.word	0x58025430
 8006340:	58025444 	.word	0x58025444
 8006344:	58025458 	.word	0x58025458
 8006348:	5802546c 	.word	0x5802546c
 800634c:	58025480 	.word	0x58025480
 8006350:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	f003 0320 	and.w	r3, r3, #32
 800635a:	2b00      	cmp	r3, #0
 800635c:	d160      	bne.n	8006420 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a7f      	ldr	r2, [pc, #508]	; (8006560 <HAL_DMA_IRQHandler+0xc74>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d04a      	beq.n	80063fe <HAL_DMA_IRQHandler+0xb12>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a7d      	ldr	r2, [pc, #500]	; (8006564 <HAL_DMA_IRQHandler+0xc78>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d045      	beq.n	80063fe <HAL_DMA_IRQHandler+0xb12>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a7c      	ldr	r2, [pc, #496]	; (8006568 <HAL_DMA_IRQHandler+0xc7c>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d040      	beq.n	80063fe <HAL_DMA_IRQHandler+0xb12>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a7a      	ldr	r2, [pc, #488]	; (800656c <HAL_DMA_IRQHandler+0xc80>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d03b      	beq.n	80063fe <HAL_DMA_IRQHandler+0xb12>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a79      	ldr	r2, [pc, #484]	; (8006570 <HAL_DMA_IRQHandler+0xc84>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d036      	beq.n	80063fe <HAL_DMA_IRQHandler+0xb12>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a77      	ldr	r2, [pc, #476]	; (8006574 <HAL_DMA_IRQHandler+0xc88>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d031      	beq.n	80063fe <HAL_DMA_IRQHandler+0xb12>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a76      	ldr	r2, [pc, #472]	; (8006578 <HAL_DMA_IRQHandler+0xc8c>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d02c      	beq.n	80063fe <HAL_DMA_IRQHandler+0xb12>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a74      	ldr	r2, [pc, #464]	; (800657c <HAL_DMA_IRQHandler+0xc90>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d027      	beq.n	80063fe <HAL_DMA_IRQHandler+0xb12>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a73      	ldr	r2, [pc, #460]	; (8006580 <HAL_DMA_IRQHandler+0xc94>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d022      	beq.n	80063fe <HAL_DMA_IRQHandler+0xb12>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a71      	ldr	r2, [pc, #452]	; (8006584 <HAL_DMA_IRQHandler+0xc98>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d01d      	beq.n	80063fe <HAL_DMA_IRQHandler+0xb12>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a70      	ldr	r2, [pc, #448]	; (8006588 <HAL_DMA_IRQHandler+0xc9c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d018      	beq.n	80063fe <HAL_DMA_IRQHandler+0xb12>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a6e      	ldr	r2, [pc, #440]	; (800658c <HAL_DMA_IRQHandler+0xca0>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d013      	beq.n	80063fe <HAL_DMA_IRQHandler+0xb12>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a6d      	ldr	r2, [pc, #436]	; (8006590 <HAL_DMA_IRQHandler+0xca4>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00e      	beq.n	80063fe <HAL_DMA_IRQHandler+0xb12>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a6b      	ldr	r2, [pc, #428]	; (8006594 <HAL_DMA_IRQHandler+0xca8>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d009      	beq.n	80063fe <HAL_DMA_IRQHandler+0xb12>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a6a      	ldr	r2, [pc, #424]	; (8006598 <HAL_DMA_IRQHandler+0xcac>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d004      	beq.n	80063fe <HAL_DMA_IRQHandler+0xb12>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a68      	ldr	r2, [pc, #416]	; (800659c <HAL_DMA_IRQHandler+0xcb0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d108      	bne.n	8006410 <HAL_DMA_IRQHandler+0xb24>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 0208 	bic.w	r2, r2, #8
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	e007      	b.n	8006420 <HAL_DMA_IRQHandler+0xb34>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 0204 	bic.w	r2, r2, #4
 800641e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 8165 	beq.w	80066f4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006432:	e15f      	b.n	80066f4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006438:	f003 031f 	and.w	r3, r3, #31
 800643c:	2202      	movs	r2, #2
 800643e:	409a      	lsls	r2, r3
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	4013      	ands	r3, r2
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 80c5 	beq.w	80065d4 <HAL_DMA_IRQHandler+0xce8>
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 80bf 	beq.w	80065d4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645a:	f003 031f 	and.w	r3, r3, #31
 800645e:	2202      	movs	r2, #2
 8006460:	409a      	lsls	r2, r3
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d018      	beq.n	80064a2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d109      	bne.n	800648e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647e:	2b00      	cmp	r3, #0
 8006480:	f000 813a 	beq.w	80066f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800648c:	e134      	b.n	80066f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 8130 	beq.w	80066f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064a0:	e12a      	b.n	80066f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	f003 0320 	and.w	r3, r3, #32
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f040 8089 	bne.w	80065c0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a2b      	ldr	r2, [pc, #172]	; (8006560 <HAL_DMA_IRQHandler+0xc74>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d04a      	beq.n	800654e <HAL_DMA_IRQHandler+0xc62>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a29      	ldr	r2, [pc, #164]	; (8006564 <HAL_DMA_IRQHandler+0xc78>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d045      	beq.n	800654e <HAL_DMA_IRQHandler+0xc62>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a28      	ldr	r2, [pc, #160]	; (8006568 <HAL_DMA_IRQHandler+0xc7c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d040      	beq.n	800654e <HAL_DMA_IRQHandler+0xc62>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a26      	ldr	r2, [pc, #152]	; (800656c <HAL_DMA_IRQHandler+0xc80>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d03b      	beq.n	800654e <HAL_DMA_IRQHandler+0xc62>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a25      	ldr	r2, [pc, #148]	; (8006570 <HAL_DMA_IRQHandler+0xc84>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d036      	beq.n	800654e <HAL_DMA_IRQHandler+0xc62>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a23      	ldr	r2, [pc, #140]	; (8006574 <HAL_DMA_IRQHandler+0xc88>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d031      	beq.n	800654e <HAL_DMA_IRQHandler+0xc62>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a22      	ldr	r2, [pc, #136]	; (8006578 <HAL_DMA_IRQHandler+0xc8c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d02c      	beq.n	800654e <HAL_DMA_IRQHandler+0xc62>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a20      	ldr	r2, [pc, #128]	; (800657c <HAL_DMA_IRQHandler+0xc90>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d027      	beq.n	800654e <HAL_DMA_IRQHandler+0xc62>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a1f      	ldr	r2, [pc, #124]	; (8006580 <HAL_DMA_IRQHandler+0xc94>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d022      	beq.n	800654e <HAL_DMA_IRQHandler+0xc62>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a1d      	ldr	r2, [pc, #116]	; (8006584 <HAL_DMA_IRQHandler+0xc98>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d01d      	beq.n	800654e <HAL_DMA_IRQHandler+0xc62>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a1c      	ldr	r2, [pc, #112]	; (8006588 <HAL_DMA_IRQHandler+0xc9c>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d018      	beq.n	800654e <HAL_DMA_IRQHandler+0xc62>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1a      	ldr	r2, [pc, #104]	; (800658c <HAL_DMA_IRQHandler+0xca0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d013      	beq.n	800654e <HAL_DMA_IRQHandler+0xc62>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a19      	ldr	r2, [pc, #100]	; (8006590 <HAL_DMA_IRQHandler+0xca4>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d00e      	beq.n	800654e <HAL_DMA_IRQHandler+0xc62>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a17      	ldr	r2, [pc, #92]	; (8006594 <HAL_DMA_IRQHandler+0xca8>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d009      	beq.n	800654e <HAL_DMA_IRQHandler+0xc62>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a16      	ldr	r2, [pc, #88]	; (8006598 <HAL_DMA_IRQHandler+0xcac>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d004      	beq.n	800654e <HAL_DMA_IRQHandler+0xc62>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a14      	ldr	r2, [pc, #80]	; (800659c <HAL_DMA_IRQHandler+0xcb0>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d128      	bne.n	80065a0 <HAL_DMA_IRQHandler+0xcb4>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 0214 	bic.w	r2, r2, #20
 800655c:	601a      	str	r2, [r3, #0]
 800655e:	e027      	b.n	80065b0 <HAL_DMA_IRQHandler+0xcc4>
 8006560:	40020010 	.word	0x40020010
 8006564:	40020028 	.word	0x40020028
 8006568:	40020040 	.word	0x40020040
 800656c:	40020058 	.word	0x40020058
 8006570:	40020070 	.word	0x40020070
 8006574:	40020088 	.word	0x40020088
 8006578:	400200a0 	.word	0x400200a0
 800657c:	400200b8 	.word	0x400200b8
 8006580:	40020410 	.word	0x40020410
 8006584:	40020428 	.word	0x40020428
 8006588:	40020440 	.word	0x40020440
 800658c:	40020458 	.word	0x40020458
 8006590:	40020470 	.word	0x40020470
 8006594:	40020488 	.word	0x40020488
 8006598:	400204a0 	.word	0x400204a0
 800659c:	400204b8 	.word	0x400204b8
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f022 020a 	bic.w	r2, r2, #10
 80065ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 8097 	beq.w	80066f8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065d2:	e091      	b.n	80066f8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d8:	f003 031f 	and.w	r3, r3, #31
 80065dc:	2208      	movs	r2, #8
 80065de:	409a      	lsls	r2, r3
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	4013      	ands	r3, r2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 8088 	beq.w	80066fa <HAL_DMA_IRQHandler+0xe0e>
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 8082 	beq.w	80066fa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a41      	ldr	r2, [pc, #260]	; (8006700 <HAL_DMA_IRQHandler+0xe14>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d04a      	beq.n	8006696 <HAL_DMA_IRQHandler+0xdaa>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a3f      	ldr	r2, [pc, #252]	; (8006704 <HAL_DMA_IRQHandler+0xe18>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d045      	beq.n	8006696 <HAL_DMA_IRQHandler+0xdaa>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a3e      	ldr	r2, [pc, #248]	; (8006708 <HAL_DMA_IRQHandler+0xe1c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d040      	beq.n	8006696 <HAL_DMA_IRQHandler+0xdaa>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a3c      	ldr	r2, [pc, #240]	; (800670c <HAL_DMA_IRQHandler+0xe20>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d03b      	beq.n	8006696 <HAL_DMA_IRQHandler+0xdaa>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a3b      	ldr	r2, [pc, #236]	; (8006710 <HAL_DMA_IRQHandler+0xe24>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d036      	beq.n	8006696 <HAL_DMA_IRQHandler+0xdaa>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a39      	ldr	r2, [pc, #228]	; (8006714 <HAL_DMA_IRQHandler+0xe28>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d031      	beq.n	8006696 <HAL_DMA_IRQHandler+0xdaa>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a38      	ldr	r2, [pc, #224]	; (8006718 <HAL_DMA_IRQHandler+0xe2c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d02c      	beq.n	8006696 <HAL_DMA_IRQHandler+0xdaa>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a36      	ldr	r2, [pc, #216]	; (800671c <HAL_DMA_IRQHandler+0xe30>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d027      	beq.n	8006696 <HAL_DMA_IRQHandler+0xdaa>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a35      	ldr	r2, [pc, #212]	; (8006720 <HAL_DMA_IRQHandler+0xe34>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d022      	beq.n	8006696 <HAL_DMA_IRQHandler+0xdaa>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a33      	ldr	r2, [pc, #204]	; (8006724 <HAL_DMA_IRQHandler+0xe38>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d01d      	beq.n	8006696 <HAL_DMA_IRQHandler+0xdaa>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a32      	ldr	r2, [pc, #200]	; (8006728 <HAL_DMA_IRQHandler+0xe3c>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d018      	beq.n	8006696 <HAL_DMA_IRQHandler+0xdaa>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a30      	ldr	r2, [pc, #192]	; (800672c <HAL_DMA_IRQHandler+0xe40>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d013      	beq.n	8006696 <HAL_DMA_IRQHandler+0xdaa>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a2f      	ldr	r2, [pc, #188]	; (8006730 <HAL_DMA_IRQHandler+0xe44>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d00e      	beq.n	8006696 <HAL_DMA_IRQHandler+0xdaa>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a2d      	ldr	r2, [pc, #180]	; (8006734 <HAL_DMA_IRQHandler+0xe48>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d009      	beq.n	8006696 <HAL_DMA_IRQHandler+0xdaa>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a2c      	ldr	r2, [pc, #176]	; (8006738 <HAL_DMA_IRQHandler+0xe4c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d004      	beq.n	8006696 <HAL_DMA_IRQHandler+0xdaa>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a2a      	ldr	r2, [pc, #168]	; (800673c <HAL_DMA_IRQHandler+0xe50>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d108      	bne.n	80066a8 <HAL_DMA_IRQHandler+0xdbc>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 021c 	bic.w	r2, r2, #28
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	e007      	b.n	80066b8 <HAL_DMA_IRQHandler+0xdcc>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 020e 	bic.w	r2, r2, #14
 80066b6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066bc:	f003 031f 	and.w	r3, r3, #31
 80066c0:	2201      	movs	r2, #1
 80066c2:	409a      	lsls	r2, r3
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d009      	beq.n	80066fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	4798      	blx	r3
 80066ee:	e004      	b.n	80066fa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80066f0:	bf00      	nop
 80066f2:	e002      	b.n	80066fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066f4:	bf00      	nop
 80066f6:	e000      	b.n	80066fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066f8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80066fa:	3728      	adds	r7, #40	; 0x28
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	40020010 	.word	0x40020010
 8006704:	40020028 	.word	0x40020028
 8006708:	40020040 	.word	0x40020040
 800670c:	40020058 	.word	0x40020058
 8006710:	40020070 	.word	0x40020070
 8006714:	40020088 	.word	0x40020088
 8006718:	400200a0 	.word	0x400200a0
 800671c:	400200b8 	.word	0x400200b8
 8006720:	40020410 	.word	0x40020410
 8006724:	40020428 	.word	0x40020428
 8006728:	40020440 	.word	0x40020440
 800672c:	40020458 	.word	0x40020458
 8006730:	40020470 	.word	0x40020470
 8006734:	40020488 	.word	0x40020488
 8006738:	400204a0 	.word	0x400204a0
 800673c:	400204b8 	.word	0x400204b8

08006740 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006740:	b480      	push	{r7}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
 800674c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006752:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006758:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a7f      	ldr	r2, [pc, #508]	; (800695c <DMA_SetConfig+0x21c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d072      	beq.n	800684a <DMA_SetConfig+0x10a>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a7d      	ldr	r2, [pc, #500]	; (8006960 <DMA_SetConfig+0x220>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d06d      	beq.n	800684a <DMA_SetConfig+0x10a>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a7c      	ldr	r2, [pc, #496]	; (8006964 <DMA_SetConfig+0x224>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d068      	beq.n	800684a <DMA_SetConfig+0x10a>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a7a      	ldr	r2, [pc, #488]	; (8006968 <DMA_SetConfig+0x228>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d063      	beq.n	800684a <DMA_SetConfig+0x10a>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a79      	ldr	r2, [pc, #484]	; (800696c <DMA_SetConfig+0x22c>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d05e      	beq.n	800684a <DMA_SetConfig+0x10a>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a77      	ldr	r2, [pc, #476]	; (8006970 <DMA_SetConfig+0x230>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d059      	beq.n	800684a <DMA_SetConfig+0x10a>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a76      	ldr	r2, [pc, #472]	; (8006974 <DMA_SetConfig+0x234>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d054      	beq.n	800684a <DMA_SetConfig+0x10a>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a74      	ldr	r2, [pc, #464]	; (8006978 <DMA_SetConfig+0x238>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d04f      	beq.n	800684a <DMA_SetConfig+0x10a>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a73      	ldr	r2, [pc, #460]	; (800697c <DMA_SetConfig+0x23c>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d04a      	beq.n	800684a <DMA_SetConfig+0x10a>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a71      	ldr	r2, [pc, #452]	; (8006980 <DMA_SetConfig+0x240>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d045      	beq.n	800684a <DMA_SetConfig+0x10a>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a70      	ldr	r2, [pc, #448]	; (8006984 <DMA_SetConfig+0x244>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d040      	beq.n	800684a <DMA_SetConfig+0x10a>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a6e      	ldr	r2, [pc, #440]	; (8006988 <DMA_SetConfig+0x248>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d03b      	beq.n	800684a <DMA_SetConfig+0x10a>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a6d      	ldr	r2, [pc, #436]	; (800698c <DMA_SetConfig+0x24c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d036      	beq.n	800684a <DMA_SetConfig+0x10a>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a6b      	ldr	r2, [pc, #428]	; (8006990 <DMA_SetConfig+0x250>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d031      	beq.n	800684a <DMA_SetConfig+0x10a>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a6a      	ldr	r2, [pc, #424]	; (8006994 <DMA_SetConfig+0x254>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d02c      	beq.n	800684a <DMA_SetConfig+0x10a>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a68      	ldr	r2, [pc, #416]	; (8006998 <DMA_SetConfig+0x258>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d027      	beq.n	800684a <DMA_SetConfig+0x10a>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a67      	ldr	r2, [pc, #412]	; (800699c <DMA_SetConfig+0x25c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d022      	beq.n	800684a <DMA_SetConfig+0x10a>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a65      	ldr	r2, [pc, #404]	; (80069a0 <DMA_SetConfig+0x260>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d01d      	beq.n	800684a <DMA_SetConfig+0x10a>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a64      	ldr	r2, [pc, #400]	; (80069a4 <DMA_SetConfig+0x264>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d018      	beq.n	800684a <DMA_SetConfig+0x10a>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a62      	ldr	r2, [pc, #392]	; (80069a8 <DMA_SetConfig+0x268>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d013      	beq.n	800684a <DMA_SetConfig+0x10a>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a61      	ldr	r2, [pc, #388]	; (80069ac <DMA_SetConfig+0x26c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d00e      	beq.n	800684a <DMA_SetConfig+0x10a>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a5f      	ldr	r2, [pc, #380]	; (80069b0 <DMA_SetConfig+0x270>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d009      	beq.n	800684a <DMA_SetConfig+0x10a>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a5e      	ldr	r2, [pc, #376]	; (80069b4 <DMA_SetConfig+0x274>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d004      	beq.n	800684a <DMA_SetConfig+0x10a>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a5c      	ldr	r2, [pc, #368]	; (80069b8 <DMA_SetConfig+0x278>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d101      	bne.n	800684e <DMA_SetConfig+0x10e>
 800684a:	2301      	movs	r3, #1
 800684c:	e000      	b.n	8006850 <DMA_SetConfig+0x110>
 800684e:	2300      	movs	r3, #0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00d      	beq.n	8006870 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800685c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006862:	2b00      	cmp	r3, #0
 8006864:	d004      	beq.n	8006870 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800686e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a39      	ldr	r2, [pc, #228]	; (800695c <DMA_SetConfig+0x21c>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d04a      	beq.n	8006910 <DMA_SetConfig+0x1d0>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a38      	ldr	r2, [pc, #224]	; (8006960 <DMA_SetConfig+0x220>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d045      	beq.n	8006910 <DMA_SetConfig+0x1d0>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a36      	ldr	r2, [pc, #216]	; (8006964 <DMA_SetConfig+0x224>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d040      	beq.n	8006910 <DMA_SetConfig+0x1d0>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a35      	ldr	r2, [pc, #212]	; (8006968 <DMA_SetConfig+0x228>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d03b      	beq.n	8006910 <DMA_SetConfig+0x1d0>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a33      	ldr	r2, [pc, #204]	; (800696c <DMA_SetConfig+0x22c>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d036      	beq.n	8006910 <DMA_SetConfig+0x1d0>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a32      	ldr	r2, [pc, #200]	; (8006970 <DMA_SetConfig+0x230>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d031      	beq.n	8006910 <DMA_SetConfig+0x1d0>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a30      	ldr	r2, [pc, #192]	; (8006974 <DMA_SetConfig+0x234>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d02c      	beq.n	8006910 <DMA_SetConfig+0x1d0>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a2f      	ldr	r2, [pc, #188]	; (8006978 <DMA_SetConfig+0x238>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d027      	beq.n	8006910 <DMA_SetConfig+0x1d0>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a2d      	ldr	r2, [pc, #180]	; (800697c <DMA_SetConfig+0x23c>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d022      	beq.n	8006910 <DMA_SetConfig+0x1d0>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a2c      	ldr	r2, [pc, #176]	; (8006980 <DMA_SetConfig+0x240>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d01d      	beq.n	8006910 <DMA_SetConfig+0x1d0>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a2a      	ldr	r2, [pc, #168]	; (8006984 <DMA_SetConfig+0x244>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d018      	beq.n	8006910 <DMA_SetConfig+0x1d0>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a29      	ldr	r2, [pc, #164]	; (8006988 <DMA_SetConfig+0x248>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d013      	beq.n	8006910 <DMA_SetConfig+0x1d0>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a27      	ldr	r2, [pc, #156]	; (800698c <DMA_SetConfig+0x24c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d00e      	beq.n	8006910 <DMA_SetConfig+0x1d0>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a26      	ldr	r2, [pc, #152]	; (8006990 <DMA_SetConfig+0x250>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d009      	beq.n	8006910 <DMA_SetConfig+0x1d0>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a24      	ldr	r2, [pc, #144]	; (8006994 <DMA_SetConfig+0x254>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d004      	beq.n	8006910 <DMA_SetConfig+0x1d0>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a23      	ldr	r2, [pc, #140]	; (8006998 <DMA_SetConfig+0x258>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d101      	bne.n	8006914 <DMA_SetConfig+0x1d4>
 8006910:	2301      	movs	r3, #1
 8006912:	e000      	b.n	8006916 <DMA_SetConfig+0x1d6>
 8006914:	2300      	movs	r3, #0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d059      	beq.n	80069ce <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800691e:	f003 031f 	and.w	r3, r3, #31
 8006922:	223f      	movs	r2, #63	; 0x3f
 8006924:	409a      	lsls	r2, r3
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006938:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2b40      	cmp	r3, #64	; 0x40
 8006948:	d138      	bne.n	80069bc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800695a:	e086      	b.n	8006a6a <DMA_SetConfig+0x32a>
 800695c:	40020010 	.word	0x40020010
 8006960:	40020028 	.word	0x40020028
 8006964:	40020040 	.word	0x40020040
 8006968:	40020058 	.word	0x40020058
 800696c:	40020070 	.word	0x40020070
 8006970:	40020088 	.word	0x40020088
 8006974:	400200a0 	.word	0x400200a0
 8006978:	400200b8 	.word	0x400200b8
 800697c:	40020410 	.word	0x40020410
 8006980:	40020428 	.word	0x40020428
 8006984:	40020440 	.word	0x40020440
 8006988:	40020458 	.word	0x40020458
 800698c:	40020470 	.word	0x40020470
 8006990:	40020488 	.word	0x40020488
 8006994:	400204a0 	.word	0x400204a0
 8006998:	400204b8 	.word	0x400204b8
 800699c:	58025408 	.word	0x58025408
 80069a0:	5802541c 	.word	0x5802541c
 80069a4:	58025430 	.word	0x58025430
 80069a8:	58025444 	.word	0x58025444
 80069ac:	58025458 	.word	0x58025458
 80069b0:	5802546c 	.word	0x5802546c
 80069b4:	58025480 	.word	0x58025480
 80069b8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	60da      	str	r2, [r3, #12]
}
 80069cc:	e04d      	b.n	8006a6a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a29      	ldr	r2, [pc, #164]	; (8006a78 <DMA_SetConfig+0x338>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d022      	beq.n	8006a1e <DMA_SetConfig+0x2de>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a27      	ldr	r2, [pc, #156]	; (8006a7c <DMA_SetConfig+0x33c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d01d      	beq.n	8006a1e <DMA_SetConfig+0x2de>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a26      	ldr	r2, [pc, #152]	; (8006a80 <DMA_SetConfig+0x340>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d018      	beq.n	8006a1e <DMA_SetConfig+0x2de>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a24      	ldr	r2, [pc, #144]	; (8006a84 <DMA_SetConfig+0x344>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d013      	beq.n	8006a1e <DMA_SetConfig+0x2de>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a23      	ldr	r2, [pc, #140]	; (8006a88 <DMA_SetConfig+0x348>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d00e      	beq.n	8006a1e <DMA_SetConfig+0x2de>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a21      	ldr	r2, [pc, #132]	; (8006a8c <DMA_SetConfig+0x34c>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d009      	beq.n	8006a1e <DMA_SetConfig+0x2de>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a20      	ldr	r2, [pc, #128]	; (8006a90 <DMA_SetConfig+0x350>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d004      	beq.n	8006a1e <DMA_SetConfig+0x2de>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a1e      	ldr	r2, [pc, #120]	; (8006a94 <DMA_SetConfig+0x354>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d101      	bne.n	8006a22 <DMA_SetConfig+0x2e2>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e000      	b.n	8006a24 <DMA_SetConfig+0x2e4>
 8006a22:	2300      	movs	r3, #0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d020      	beq.n	8006a6a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a2c:	f003 031f 	and.w	r3, r3, #31
 8006a30:	2201      	movs	r2, #1
 8006a32:	409a      	lsls	r2, r3
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	2b40      	cmp	r3, #64	; 0x40
 8006a46:	d108      	bne.n	8006a5a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	60da      	str	r2, [r3, #12]
}
 8006a58:	e007      	b.n	8006a6a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	60da      	str	r2, [r3, #12]
}
 8006a6a:	bf00      	nop
 8006a6c:	371c      	adds	r7, #28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	58025408 	.word	0x58025408
 8006a7c:	5802541c 	.word	0x5802541c
 8006a80:	58025430 	.word	0x58025430
 8006a84:	58025444 	.word	0x58025444
 8006a88:	58025458 	.word	0x58025458
 8006a8c:	5802546c 	.word	0x5802546c
 8006a90:	58025480 	.word	0x58025480
 8006a94:	58025494 	.word	0x58025494

08006a98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a42      	ldr	r2, [pc, #264]	; (8006bb0 <DMA_CalcBaseAndBitshift+0x118>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d04a      	beq.n	8006b40 <DMA_CalcBaseAndBitshift+0xa8>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a41      	ldr	r2, [pc, #260]	; (8006bb4 <DMA_CalcBaseAndBitshift+0x11c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d045      	beq.n	8006b40 <DMA_CalcBaseAndBitshift+0xa8>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a3f      	ldr	r2, [pc, #252]	; (8006bb8 <DMA_CalcBaseAndBitshift+0x120>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d040      	beq.n	8006b40 <DMA_CalcBaseAndBitshift+0xa8>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a3e      	ldr	r2, [pc, #248]	; (8006bbc <DMA_CalcBaseAndBitshift+0x124>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d03b      	beq.n	8006b40 <DMA_CalcBaseAndBitshift+0xa8>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a3c      	ldr	r2, [pc, #240]	; (8006bc0 <DMA_CalcBaseAndBitshift+0x128>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d036      	beq.n	8006b40 <DMA_CalcBaseAndBitshift+0xa8>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a3b      	ldr	r2, [pc, #236]	; (8006bc4 <DMA_CalcBaseAndBitshift+0x12c>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d031      	beq.n	8006b40 <DMA_CalcBaseAndBitshift+0xa8>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a39      	ldr	r2, [pc, #228]	; (8006bc8 <DMA_CalcBaseAndBitshift+0x130>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d02c      	beq.n	8006b40 <DMA_CalcBaseAndBitshift+0xa8>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a38      	ldr	r2, [pc, #224]	; (8006bcc <DMA_CalcBaseAndBitshift+0x134>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d027      	beq.n	8006b40 <DMA_CalcBaseAndBitshift+0xa8>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a36      	ldr	r2, [pc, #216]	; (8006bd0 <DMA_CalcBaseAndBitshift+0x138>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d022      	beq.n	8006b40 <DMA_CalcBaseAndBitshift+0xa8>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a35      	ldr	r2, [pc, #212]	; (8006bd4 <DMA_CalcBaseAndBitshift+0x13c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d01d      	beq.n	8006b40 <DMA_CalcBaseAndBitshift+0xa8>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a33      	ldr	r2, [pc, #204]	; (8006bd8 <DMA_CalcBaseAndBitshift+0x140>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d018      	beq.n	8006b40 <DMA_CalcBaseAndBitshift+0xa8>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a32      	ldr	r2, [pc, #200]	; (8006bdc <DMA_CalcBaseAndBitshift+0x144>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d013      	beq.n	8006b40 <DMA_CalcBaseAndBitshift+0xa8>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a30      	ldr	r2, [pc, #192]	; (8006be0 <DMA_CalcBaseAndBitshift+0x148>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d00e      	beq.n	8006b40 <DMA_CalcBaseAndBitshift+0xa8>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a2f      	ldr	r2, [pc, #188]	; (8006be4 <DMA_CalcBaseAndBitshift+0x14c>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d009      	beq.n	8006b40 <DMA_CalcBaseAndBitshift+0xa8>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a2d      	ldr	r2, [pc, #180]	; (8006be8 <DMA_CalcBaseAndBitshift+0x150>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d004      	beq.n	8006b40 <DMA_CalcBaseAndBitshift+0xa8>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a2c      	ldr	r2, [pc, #176]	; (8006bec <DMA_CalcBaseAndBitshift+0x154>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d101      	bne.n	8006b44 <DMA_CalcBaseAndBitshift+0xac>
 8006b40:	2301      	movs	r3, #1
 8006b42:	e000      	b.n	8006b46 <DMA_CalcBaseAndBitshift+0xae>
 8006b44:	2300      	movs	r3, #0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d024      	beq.n	8006b94 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	3b10      	subs	r3, #16
 8006b52:	4a27      	ldr	r2, [pc, #156]	; (8006bf0 <DMA_CalcBaseAndBitshift+0x158>)
 8006b54:	fba2 2303 	umull	r2, r3, r2, r3
 8006b58:	091b      	lsrs	r3, r3, #4
 8006b5a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f003 0307 	and.w	r3, r3, #7
 8006b62:	4a24      	ldr	r2, [pc, #144]	; (8006bf4 <DMA_CalcBaseAndBitshift+0x15c>)
 8006b64:	5cd3      	ldrb	r3, [r2, r3]
 8006b66:	461a      	mov	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2b03      	cmp	r3, #3
 8006b70:	d908      	bls.n	8006b84 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	4b1f      	ldr	r3, [pc, #124]	; (8006bf8 <DMA_CalcBaseAndBitshift+0x160>)
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	1d1a      	adds	r2, r3, #4
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	659a      	str	r2, [r3, #88]	; 0x58
 8006b82:	e00d      	b.n	8006ba0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4b1b      	ldr	r3, [pc, #108]	; (8006bf8 <DMA_CalcBaseAndBitshift+0x160>)
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	6593      	str	r3, [r2, #88]	; 0x58
 8006b92:	e005      	b.n	8006ba0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr
 8006bb0:	40020010 	.word	0x40020010
 8006bb4:	40020028 	.word	0x40020028
 8006bb8:	40020040 	.word	0x40020040
 8006bbc:	40020058 	.word	0x40020058
 8006bc0:	40020070 	.word	0x40020070
 8006bc4:	40020088 	.word	0x40020088
 8006bc8:	400200a0 	.word	0x400200a0
 8006bcc:	400200b8 	.word	0x400200b8
 8006bd0:	40020410 	.word	0x40020410
 8006bd4:	40020428 	.word	0x40020428
 8006bd8:	40020440 	.word	0x40020440
 8006bdc:	40020458 	.word	0x40020458
 8006be0:	40020470 	.word	0x40020470
 8006be4:	40020488 	.word	0x40020488
 8006be8:	400204a0 	.word	0x400204a0
 8006bec:	400204b8 	.word	0x400204b8
 8006bf0:	aaaaaaab 	.word	0xaaaaaaab
 8006bf4:	0800ed5c 	.word	0x0800ed5c
 8006bf8:	fffffc00 	.word	0xfffffc00

08006bfc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d120      	bne.n	8006c52 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d858      	bhi.n	8006cca <DMA_CheckFifoParam+0xce>
 8006c18:	a201      	add	r2, pc, #4	; (adr r2, 8006c20 <DMA_CheckFifoParam+0x24>)
 8006c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1e:	bf00      	nop
 8006c20:	08006c31 	.word	0x08006c31
 8006c24:	08006c43 	.word	0x08006c43
 8006c28:	08006c31 	.word	0x08006c31
 8006c2c:	08006ccb 	.word	0x08006ccb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d048      	beq.n	8006cce <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c40:	e045      	b.n	8006cce <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c4a:	d142      	bne.n	8006cd2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c50:	e03f      	b.n	8006cd2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c5a:	d123      	bne.n	8006ca4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c60:	2b03      	cmp	r3, #3
 8006c62:	d838      	bhi.n	8006cd6 <DMA_CheckFifoParam+0xda>
 8006c64:	a201      	add	r2, pc, #4	; (adr r2, 8006c6c <DMA_CheckFifoParam+0x70>)
 8006c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6a:	bf00      	nop
 8006c6c:	08006c7d 	.word	0x08006c7d
 8006c70:	08006c83 	.word	0x08006c83
 8006c74:	08006c7d 	.word	0x08006c7d
 8006c78:	08006c95 	.word	0x08006c95
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	73fb      	strb	r3, [r7, #15]
        break;
 8006c80:	e030      	b.n	8006ce4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d025      	beq.n	8006cda <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c92:	e022      	b.n	8006cda <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c9c:	d11f      	bne.n	8006cde <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ca2:	e01c      	b.n	8006cde <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d902      	bls.n	8006cb2 <DMA_CheckFifoParam+0xb6>
 8006cac:	2b03      	cmp	r3, #3
 8006cae:	d003      	beq.n	8006cb8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006cb0:	e018      	b.n	8006ce4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	73fb      	strb	r3, [r7, #15]
        break;
 8006cb6:	e015      	b.n	8006ce4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00e      	beq.n	8006ce2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	73fb      	strb	r3, [r7, #15]
    break;
 8006cc8:	e00b      	b.n	8006ce2 <DMA_CheckFifoParam+0xe6>
        break;
 8006cca:	bf00      	nop
 8006ccc:	e00a      	b.n	8006ce4 <DMA_CheckFifoParam+0xe8>
        break;
 8006cce:	bf00      	nop
 8006cd0:	e008      	b.n	8006ce4 <DMA_CheckFifoParam+0xe8>
        break;
 8006cd2:	bf00      	nop
 8006cd4:	e006      	b.n	8006ce4 <DMA_CheckFifoParam+0xe8>
        break;
 8006cd6:	bf00      	nop
 8006cd8:	e004      	b.n	8006ce4 <DMA_CheckFifoParam+0xe8>
        break;
 8006cda:	bf00      	nop
 8006cdc:	e002      	b.n	8006ce4 <DMA_CheckFifoParam+0xe8>
        break;
 8006cde:	bf00      	nop
 8006ce0:	e000      	b.n	8006ce4 <DMA_CheckFifoParam+0xe8>
    break;
 8006ce2:	bf00      	nop
    }
  }

  return status;
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop

08006cf4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a38      	ldr	r2, [pc, #224]	; (8006de8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d022      	beq.n	8006d52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a36      	ldr	r2, [pc, #216]	; (8006dec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d01d      	beq.n	8006d52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a35      	ldr	r2, [pc, #212]	; (8006df0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d018      	beq.n	8006d52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a33      	ldr	r2, [pc, #204]	; (8006df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d013      	beq.n	8006d52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a32      	ldr	r2, [pc, #200]	; (8006df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d00e      	beq.n	8006d52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a30      	ldr	r2, [pc, #192]	; (8006dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d009      	beq.n	8006d52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a2f      	ldr	r2, [pc, #188]	; (8006e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d004      	beq.n	8006d52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a2d      	ldr	r2, [pc, #180]	; (8006e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d101      	bne.n	8006d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006d52:	2301      	movs	r3, #1
 8006d54:	e000      	b.n	8006d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006d56:	2300      	movs	r3, #0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d01a      	beq.n	8006d92 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	3b08      	subs	r3, #8
 8006d64:	4a28      	ldr	r2, [pc, #160]	; (8006e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006d66:	fba2 2303 	umull	r2, r3, r2, r3
 8006d6a:	091b      	lsrs	r3, r3, #4
 8006d6c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	4b26      	ldr	r3, [pc, #152]	; (8006e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006d72:	4413      	add	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	461a      	mov	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a24      	ldr	r2, [pc, #144]	; (8006e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006d80:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f003 031f 	and.w	r3, r3, #31
 8006d88:	2201      	movs	r2, #1
 8006d8a:	409a      	lsls	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006d90:	e024      	b.n	8006ddc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	3b10      	subs	r3, #16
 8006d9a:	4a1e      	ldr	r2, [pc, #120]	; (8006e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006da0:	091b      	lsrs	r3, r3, #4
 8006da2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	4a1c      	ldr	r2, [pc, #112]	; (8006e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d806      	bhi.n	8006dba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	4a1b      	ldr	r2, [pc, #108]	; (8006e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d902      	bls.n	8006dba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	3308      	adds	r3, #8
 8006db8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	4b18      	ldr	r3, [pc, #96]	; (8006e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006dbe:	4413      	add	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a16      	ldr	r2, [pc, #88]	; (8006e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006dcc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f003 031f 	and.w	r3, r3, #31
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	409a      	lsls	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006ddc:	bf00      	nop
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	58025408 	.word	0x58025408
 8006dec:	5802541c 	.word	0x5802541c
 8006df0:	58025430 	.word	0x58025430
 8006df4:	58025444 	.word	0x58025444
 8006df8:	58025458 	.word	0x58025458
 8006dfc:	5802546c 	.word	0x5802546c
 8006e00:	58025480 	.word	0x58025480
 8006e04:	58025494 	.word	0x58025494
 8006e08:	cccccccd 	.word	0xcccccccd
 8006e0c:	16009600 	.word	0x16009600
 8006e10:	58025880 	.word	0x58025880
 8006e14:	aaaaaaab 	.word	0xaaaaaaab
 8006e18:	400204b8 	.word	0x400204b8
 8006e1c:	4002040f 	.word	0x4002040f
 8006e20:	10008200 	.word	0x10008200
 8006e24:	40020880 	.word	0x40020880

08006e28 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d04a      	beq.n	8006ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b08      	cmp	r3, #8
 8006e42:	d847      	bhi.n	8006ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a25      	ldr	r2, [pc, #148]	; (8006ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d022      	beq.n	8006e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a24      	ldr	r2, [pc, #144]	; (8006ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d01d      	beq.n	8006e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a22      	ldr	r2, [pc, #136]	; (8006ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d018      	beq.n	8006e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a21      	ldr	r2, [pc, #132]	; (8006eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d013      	beq.n	8006e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a1f      	ldr	r2, [pc, #124]	; (8006ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d00e      	beq.n	8006e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a1e      	ldr	r2, [pc, #120]	; (8006ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d009      	beq.n	8006e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a1c      	ldr	r2, [pc, #112]	; (8006ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d004      	beq.n	8006e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a1b      	ldr	r2, [pc, #108]	; (8006efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d101      	bne.n	8006e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006e94:	2301      	movs	r3, #1
 8006e96:	e000      	b.n	8006e9a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006e98:	2300      	movs	r3, #0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00a      	beq.n	8006eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	4b17      	ldr	r3, [pc, #92]	; (8006f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006ea2:	4413      	add	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a15      	ldr	r2, [pc, #84]	; (8006f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006eb0:	671a      	str	r2, [r3, #112]	; 0x70
 8006eb2:	e009      	b.n	8006ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	4b14      	ldr	r3, [pc, #80]	; (8006f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006eb8:	4413      	add	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a11      	ldr	r2, [pc, #68]	; (8006f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006ec6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	2201      	movs	r2, #1
 8006ece:	409a      	lsls	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006ed4:	bf00      	nop
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	58025408 	.word	0x58025408
 8006ee4:	5802541c 	.word	0x5802541c
 8006ee8:	58025430 	.word	0x58025430
 8006eec:	58025444 	.word	0x58025444
 8006ef0:	58025458 	.word	0x58025458
 8006ef4:	5802546c 	.word	0x5802546c
 8006ef8:	58025480 	.word	0x58025480
 8006efc:	58025494 	.word	0x58025494
 8006f00:	1600963f 	.word	0x1600963f
 8006f04:	58025940 	.word	0x58025940
 8006f08:	1000823f 	.word	0x1000823f
 8006f0c:	40020940 	.word	0x40020940

08006f10 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b098      	sub	sp, #96	; 0x60
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006f18:	4a84      	ldr	r2, [pc, #528]	; (800712c <HAL_FDCAN_Init+0x21c>)
 8006f1a:	f107 030c 	add.w	r3, r7, #12
 8006f1e:	4611      	mov	r1, r2
 8006f20:	224c      	movs	r2, #76	; 0x4c
 8006f22:	4618      	mov	r0, r3
 8006f24:	f007 fa68 	bl	800e3f8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e1c6      	b.n	80072c0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a7e      	ldr	r2, [pc, #504]	; (8007130 <HAL_FDCAN_Init+0x220>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d106      	bne.n	8006f4a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006f44:	461a      	mov	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d106      	bne.n	8006f64 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7f9 feb0 	bl	8000cc4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	699a      	ldr	r2, [r3, #24]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f022 0210 	bic.w	r2, r2, #16
 8006f72:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f74:	f7fd f868 	bl	8004048 <HAL_GetTick>
 8006f78:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006f7a:	e014      	b.n	8006fa6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006f7c:	f7fd f864 	bl	8004048 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b0a      	cmp	r3, #10
 8006f88:	d90d      	bls.n	8006fa6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f90:	f043 0201 	orr.w	r2, r3, #1
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2203      	movs	r2, #3
 8006f9e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e18c      	b.n	80072c0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	f003 0308 	and.w	r3, r3, #8
 8006fb0:	2b08      	cmp	r3, #8
 8006fb2:	d0e3      	beq.n	8006f7c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	699a      	ldr	r2, [r3, #24]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0201 	orr.w	r2, r2, #1
 8006fc2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fc4:	f7fd f840 	bl	8004048 <HAL_GetTick>
 8006fc8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006fca:	e014      	b.n	8006ff6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006fcc:	f7fd f83c 	bl	8004048 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	2b0a      	cmp	r3, #10
 8006fd8:	d90d      	bls.n	8006ff6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fe0:	f043 0201 	orr.w	r2, r3, #1
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2203      	movs	r2, #3
 8006fee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e164      	b.n	80072c0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b00      	cmp	r3, #0
 8007002:	d0e3      	beq.n	8006fcc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	699a      	ldr	r2, [r3, #24]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f042 0202 	orr.w	r2, r2, #2
 8007012:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	7c1b      	ldrb	r3, [r3, #16]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d108      	bne.n	800702e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	699a      	ldr	r2, [r3, #24]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800702a:	619a      	str	r2, [r3, #24]
 800702c:	e007      	b.n	800703e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	699a      	ldr	r2, [r3, #24]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800703c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	7c5b      	ldrb	r3, [r3, #17]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d108      	bne.n	8007058 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	699a      	ldr	r2, [r3, #24]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007054:	619a      	str	r2, [r3, #24]
 8007056:	e007      	b.n	8007068 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	699a      	ldr	r2, [r3, #24]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007066:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	7c9b      	ldrb	r3, [r3, #18]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d108      	bne.n	8007082 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	699a      	ldr	r2, [r3, #24]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800707e:	619a      	str	r2, [r3, #24]
 8007080:	e007      	b.n	8007092 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	699a      	ldr	r2, [r3, #24]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007090:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	699a      	ldr	r2, [r3, #24]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80070b6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	691a      	ldr	r2, [r3, #16]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f022 0210 	bic.w	r2, r2, #16
 80070c6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d108      	bne.n	80070e2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	699a      	ldr	r2, [r3, #24]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f042 0204 	orr.w	r2, r2, #4
 80070de:	619a      	str	r2, [r3, #24]
 80070e0:	e030      	b.n	8007144 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d02c      	beq.n	8007144 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d020      	beq.n	8007134 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	699a      	ldr	r2, [r3, #24]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007100:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	691a      	ldr	r2, [r3, #16]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f042 0210 	orr.w	r2, r2, #16
 8007110:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	2b03      	cmp	r3, #3
 8007118:	d114      	bne.n	8007144 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	699a      	ldr	r2, [r3, #24]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f042 0220 	orr.w	r2, r2, #32
 8007128:	619a      	str	r2, [r3, #24]
 800712a:	e00b      	b.n	8007144 <HAL_FDCAN_Init+0x234>
 800712c:	0800ed00 	.word	0x0800ed00
 8007130:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	699a      	ldr	r2, [r3, #24]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f042 0220 	orr.w	r2, r2, #32
 8007142:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	3b01      	subs	r3, #1
 800714a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	69db      	ldr	r3, [r3, #28]
 8007150:	3b01      	subs	r3, #1
 8007152:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007154:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800715c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	695b      	ldr	r3, [r3, #20]
 8007164:	3b01      	subs	r3, #1
 8007166:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800716c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800716e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007178:	d115      	bne.n	80071a6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007184:	3b01      	subs	r3, #1
 8007186:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007188:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718e:	3b01      	subs	r3, #1
 8007190:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007192:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719a:	3b01      	subs	r3, #1
 800719c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80071a2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80071a4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071cc:	4413      	add	r3, r2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d011      	beq.n	80071f6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80071da:	f023 0107 	bic.w	r1, r3, #7
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	3360      	adds	r3, #96	; 0x60
 80071e6:	443b      	add	r3, r7
 80071e8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	430a      	orrs	r2, r1
 80071f2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d011      	beq.n	8007222 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007206:	f023 0107 	bic.w	r1, r3, #7
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	3360      	adds	r3, #96	; 0x60
 8007212:	443b      	add	r3, r7
 8007214:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007226:	2b00      	cmp	r3, #0
 8007228:	d012      	beq.n	8007250 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007232:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	3360      	adds	r3, #96	; 0x60
 800723e:	443b      	add	r3, r7
 8007240:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007244:	011a      	lsls	r2, r3, #4
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007254:	2b00      	cmp	r3, #0
 8007256:	d012      	beq.n	800727e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007260:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	3360      	adds	r3, #96	; 0x60
 800726c:	443b      	add	r3, r7
 800726e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007272:	021a      	lsls	r2, r3, #8
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a11      	ldr	r2, [pc, #68]	; (80072c8 <HAL_FDCAN_Init+0x3b8>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d107      	bne.n	8007298 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	689a      	ldr	r2, [r3, #8]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f022 0203 	bic.w	r2, r2, #3
 8007296:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fe5d 	bl	8007f70 <FDCAN_CalcultateRamBlockAddresses>
 80072b6:	4603      	mov	r3, r0
 80072b8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80072bc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3760      	adds	r7, #96	; 0x60
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	4000a000 	.word	0x4000a000

080072cc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80072dc:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80072de:	7bfb      	ldrb	r3, [r7, #15]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d002      	beq.n	80072ea <HAL_FDCAN_ConfigFilter+0x1e>
 80072e4:	7bfb      	ldrb	r3, [r7, #15]
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d157      	bne.n	800739a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d12b      	bne.n	800734a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	2b07      	cmp	r3, #7
 80072f8:	d10d      	bne.n	8007316 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	69db      	ldr	r3, [r3, #28]
 8007304:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8007306:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800730c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800730e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8007312:	617b      	str	r3, [r7, #20]
 8007314:	e00e      	b.n	8007334 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007322:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800732a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007330:	4313      	orrs	r3, r2
 8007332:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	4413      	add	r3, r2
 8007340:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	e025      	b.n	8007396 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	075a      	lsls	r2, r3, #29
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	4313      	orrs	r3, r2
 8007356:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	2b07      	cmp	r3, #7
 800735e:	d103      	bne.n	8007368 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	613b      	str	r3, [r7, #16]
 8007366:	e006      	b.n	8007376 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	079a      	lsls	r2, r3, #30
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	4313      	orrs	r3, r2
 8007374:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	00db      	lsls	r3, r3, #3
 8007380:	4413      	add	r3, r2
 8007382:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	3304      	adds	r3, #4
 800738e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	e008      	b.n	80073ac <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073a0:	f043 0202 	orr.w	r2, r3, #2
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
  }
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	371c      	adds	r7, #28
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
 80073c4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d110      	bne.n	80073f4 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80073da:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80073e0:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80073e8:	69ba      	ldr	r2, [r7, #24]
 80073ea:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80073ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	e008      	b.n	8007406 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073fa:	f043 0204 	orr.w	r2, r3, #4
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
  }
}
 8007406:	4618      	mov	r0, r3
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007412:	b480      	push	{r7}
 8007414:	b083      	sub	sp, #12
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b01      	cmp	r3, #1
 8007424:	d111      	bne.n	800744a <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2202      	movs	r2, #2
 800742a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	699a      	ldr	r2, [r3, #24]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f022 0201 	bic.w	r2, r2, #1
 800743c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	e008      	b.n	800745c <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007450:	f043 0204 	orr.w	r2, r3, #4
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
  }
}
 800745c:	4618      	mov	r0, r3
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b02      	cmp	r3, #2
 800747e:	d141      	bne.n	8007504 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007488:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d109      	bne.n	80074a4 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007496:	f043 0220 	orr.w	r2, r3, #32
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e038      	b.n	8007516 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80074ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d009      	beq.n	80074c8 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e026      	b.n	8007516 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80074d0:	0c1b      	lsrs	r3, r3, #16
 80074d2:	f003 031f 	and.w	r3, r3, #31
 80074d6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	68b9      	ldr	r1, [r7, #8]
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 fecc 	bl	800827c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2101      	movs	r1, #1
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	fa01 f202 	lsl.w	r2, r1, r2
 80074f0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80074f4:	2201      	movs	r2, #1
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	409a      	lsls	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8007500:	2300      	movs	r3, #0
 8007502:	e008      	b.n	8007516 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800750a:	f043 0208 	orr.w	r2, r3, #8
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
  }
}
 8007516:	4618      	mov	r0, r3
 8007518:	3718      	adds	r7, #24
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
	...

08007520 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007520:	b480      	push	{r7}
 8007522:	b08b      	sub	sp, #44	; 0x2c
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
 800752c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800752e:	2300      	movs	r3, #0
 8007530:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007538:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800753a:	7efb      	ldrb	r3, [r7, #27]
 800753c:	2b02      	cmp	r3, #2
 800753e:	f040 814b 	bne.w	80077d8 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	2b40      	cmp	r3, #64	; 0x40
 8007546:	d14d      	bne.n	80075e4 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007550:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d109      	bne.n	800756c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800755e:	f043 0220 	orr.w	r2, r3, #32
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e13e      	b.n	80077ea <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007578:	2b00      	cmp	r3, #0
 800757a:	d109      	bne.n	8007590 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007582:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e12c      	b.n	80077ea <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007598:	0e1b      	lsrs	r3, r3, #24
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d10b      	bne.n	80075ba <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80075aa:	0fdb      	lsrs	r3, r3, #31
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075b4:	d101      	bne.n	80075ba <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80075b6:	2301      	movs	r3, #1
 80075b8:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80075c2:	0a1b      	lsrs	r3, r3, #8
 80075c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075c8:	69fa      	ldr	r2, [r7, #28]
 80075ca:	4413      	add	r3, r2
 80075cc:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d6:	69f9      	ldr	r1, [r7, #28]
 80075d8:	fb01 f303 	mul.w	r3, r1, r3
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	627b      	str	r3, [r7, #36]	; 0x24
 80075e2:	e069      	b.n	80076b8 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2b41      	cmp	r3, #65	; 0x41
 80075e8:	d14d      	bne.n	8007686 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d109      	bne.n	800760e <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007600:	f043 0220 	orr.w	r2, r3, #32
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e0ed      	b.n	80077ea <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800761a:	2b00      	cmp	r3, #0
 800761c:	d109      	bne.n	8007632 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007624:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e0db      	b.n	80077ea <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800763a:	0e1b      	lsrs	r3, r3, #24
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b01      	cmp	r3, #1
 8007642:	d10b      	bne.n	800765c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800764c:	0fdb      	lsrs	r3, r3, #31
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007656:	d101      	bne.n	800765c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007658:	2301      	movs	r3, #1
 800765a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007664:	0a1b      	lsrs	r3, r3, #8
 8007666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800766a:	69fa      	ldr	r2, [r7, #28]
 800766c:	4413      	add	r3, r2
 800766e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007678:	69f9      	ldr	r1, [r7, #28]
 800767a:	fb01 f303 	mul.w	r3, r1, r3
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	627b      	str	r3, [r7, #36]	; 0x24
 8007684:	e018      	b.n	80076b8 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	429a      	cmp	r2, r3
 800768e:	d309      	bcc.n	80076a4 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007696:	f043 0220 	orr.w	r2, r3, #32
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e0a2      	b.n	80077ea <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ac:	68b9      	ldr	r1, [r7, #8]
 80076ae:	fb01 f303 	mul.w	r3, r1, r3
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d107      	bne.n	80076dc <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80076cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	0c9b      	lsrs	r3, r3, #18
 80076d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	e005      	b.n	80076e8 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80076dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80076f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007702:	3304      	adds	r3, #4
 8007704:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	b29a      	uxth	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	0e1b      	lsrs	r3, r3, #24
 800773a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8007742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	0fda      	lsrs	r2, r3, #31
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774e:	3304      	adds	r3, #4
 8007750:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007754:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8007756:	2300      	movs	r3, #0
 8007758:	623b      	str	r3, [r7, #32]
 800775a:	e00a      	b.n	8007772 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	6a3b      	ldr	r3, [r7, #32]
 8007760:	441a      	add	r2, r3
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	440b      	add	r3, r1
 8007768:	7812      	ldrb	r2, [r2, #0]
 800776a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800776c:	6a3b      	ldr	r3, [r7, #32]
 800776e:	3301      	adds	r3, #1
 8007770:	623b      	str	r3, [r7, #32]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	0c1b      	lsrs	r3, r3, #16
 8007778:	4a1f      	ldr	r2, [pc, #124]	; (80077f8 <HAL_FDCAN_GetRxMessage+0x2d8>)
 800777a:	5cd3      	ldrb	r3, [r2, r3]
 800777c:	461a      	mov	r2, r3
 800777e:	6a3b      	ldr	r3, [r7, #32]
 8007780:	4293      	cmp	r3, r2
 8007782:	d3eb      	bcc.n	800775c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2b40      	cmp	r3, #64	; 0x40
 8007788:	d105      	bne.n	8007796 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8007794:	e01e      	b.n	80077d4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2b41      	cmp	r3, #65	; 0x41
 800779a:	d105      	bne.n	80077a8 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	69fa      	ldr	r2, [r7, #28]
 80077a2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80077a6:	e015      	b.n	80077d4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2b1f      	cmp	r3, #31
 80077ac:	d808      	bhi.n	80077c0 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2101      	movs	r1, #1
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	fa01 f202 	lsl.w	r2, r1, r2
 80077ba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80077be:	e009      	b.n	80077d4 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	f003 021f 	and.w	r2, r3, #31
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2101      	movs	r1, #1
 80077cc:	fa01 f202 	lsl.w	r2, r1, r2
 80077d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	e008      	b.n	80077ea <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077de:	f043 0208 	orr.w	r2, r3, #8
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
  }
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	372c      	adds	r7, #44	; 0x2c
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	0800ed64 	.word	0x0800ed64

080077fc <HAL_FDCAN_ConfigInterruptLines>:
  * @param  InterruptLine Interrupt line.
  *         This parameter can be a value of @arg FDCAN_Interrupt_Line.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigInterruptLines(FDCAN_HandleTypeDef *hfdcan, uint32_t ITList, uint32_t InterruptLine)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b087      	sub	sp, #28
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800780e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ITList));
  assert_param(IS_FDCAN_IT_LINE(InterruptLine));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007810:	7dfb      	ldrb	r3, [r7, #23]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d002      	beq.n	800781c <HAL_FDCAN_ConfigInterruptLines+0x20>
 8007816:	7dfb      	ldrb	r3, [r7, #23]
 8007818:	2b02      	cmp	r3, #2
 800781a:	d116      	bne.n	800784a <HAL_FDCAN_ConfigInterruptLines+0x4e>
  {
    /* Assign list of interrupts to the selected line */
    if (InterruptLine == FDCAN_INTERRUPT_LINE0)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d109      	bne.n	8007836 <HAL_FDCAN_ConfigInterruptLines+0x3a>
    {
      CLEAR_BIT(hfdcan->Instance->ILS, ITList);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	43da      	mvns	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	400a      	ands	r2, r1
 8007832:	659a      	str	r2, [r3, #88]	; 0x58
 8007834:	e007      	b.n	8007846 <HAL_FDCAN_ConfigInterruptLines+0x4a>
    }
    else /* InterruptLine == FDCAN_INTERRUPT_LINE1 */
    {
      SET_BIT(hfdcan->Instance->ILS, ITList);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	430a      	orrs	r2, r1
 8007844:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	e008      	b.n	800785c <HAL_FDCAN_ConfigInterruptLines+0x60>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007850:	f043 0202 	orr.w	r2, r3, #2
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
  }
}
 800785c:	4618      	mov	r0, r3
 800785e:	371c      	adds	r7, #28
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8007868:	b480      	push	{r7}
 800786a:	b087      	sub	sp, #28
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800787a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800787c:	7dfb      	ldrb	r3, [r7, #23]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d002      	beq.n	8007888 <HAL_FDCAN_ActivateNotification+0x20>
 8007882:	7dfb      	ldrb	r3, [r7, #23]
 8007884:	2b02      	cmp	r3, #2
 8007886:	d155      	bne.n	8007934 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	4013      	ands	r3, r2
 8007892:	2b00      	cmp	r3, #0
 8007894:	d108      	bne.n	80078a8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f042 0201 	orr.w	r2, r2, #1
 80078a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80078a6:	e014      	b.n	80078d2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	4013      	ands	r3, r2
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d108      	bne.n	80078ca <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f042 0202 	orr.w	r2, r2, #2
 80078c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80078c8:	e003      	b.n	80078d2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2203      	movs	r2, #3
 80078d0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d009      	beq.n	80078f0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	430a      	orrs	r2, r1
 80078ec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d009      	beq.n	800790e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	430a      	orrs	r2, r1
 800790a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	4b0f      	ldr	r3, [pc, #60]	; (8007954 <HAL_FDCAN_ActivateNotification+0xec>)
 8007918:	4013      	ands	r3, r2
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	6812      	ldr	r2, [r2, #0]
 800791e:	430b      	orrs	r3, r1
 8007920:	6553      	str	r3, [r2, #84]	; 0x54
 8007922:	4b0d      	ldr	r3, [pc, #52]	; (8007958 <HAL_FDCAN_ActivateNotification+0xf0>)
 8007924:	695a      	ldr	r2, [r3, #20]
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	0f9b      	lsrs	r3, r3, #30
 800792a:	490b      	ldr	r1, [pc, #44]	; (8007958 <HAL_FDCAN_ActivateNotification+0xf0>)
 800792c:	4313      	orrs	r3, r2
 800792e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8007930:	2300      	movs	r3, #0
 8007932:	e008      	b.n	8007946 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800793a:	f043 0202 	orr.w	r2, r3, #2
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
  }
}
 8007946:	4618      	mov	r0, r3
 8007948:	371c      	adds	r7, #28
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	3fcfffff 	.word	0x3fcfffff
 8007958:	4000a800 	.word	0x4000a800

0800795c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b096      	sub	sp, #88	; 0x58
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8007964:	4b9a      	ldr	r3, [pc, #616]	; (8007bd0 <HAL_FDCAN_IRQHandler+0x274>)
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	079b      	lsls	r3, r3, #30
 800796a:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800796c:	4b98      	ldr	r3, [pc, #608]	; (8007bd0 <HAL_FDCAN_IRQHandler+0x274>)
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	079b      	lsls	r3, r3, #30
 8007972:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007974:	4013      	ands	r3, r2
 8007976:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800797e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007982:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800798a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800798c:	4013      	ands	r3, r2
 800798e:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007996:	f003 030f 	and.w	r3, r3, #15
 800799a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079a4:	4013      	ands	r3, r2
 80079a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079bc:	4013      	ands	r3, r2
 80079be:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079c6:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80079ca:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079d4:	4013      	ands	r3, r2
 80079d6:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079de:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80079e2:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079ec:	4013      	ands	r3, r2
 80079ee:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8007a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a02:	0a1b      	lsrs	r3, r3, #8
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d010      	beq.n	8007a2e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8007a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0e:	0a1b      	lsrs	r3, r3, #8
 8007a10:	f003 0301 	and.w	r3, r3, #1
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00a      	beq.n	8007a2e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a20:	651a      	str	r2, [r3, #80]	; 0x50
 8007a22:	4b6b      	ldr	r3, [pc, #428]	; (8007bd0 <HAL_FDCAN_IRQHandler+0x274>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fa54 	bl	8007ed6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8007a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a30:	0a9b      	lsrs	r3, r3, #10
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d01d      	beq.n	8007a76 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8007a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3c:	0a9b      	lsrs	r3, r3, #10
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d017      	beq.n	8007a76 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007a4e:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a66:	651a      	str	r2, [r3, #80]	; 0x50
 8007a68:	4b59      	ldr	r3, [pc, #356]	; (8007bd0 <HAL_FDCAN_IRQHandler+0x274>)
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007a6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fa07 	bl	8007e84 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8007a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00d      	beq.n	8007a98 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a82:	4b54      	ldr	r3, [pc, #336]	; (8007bd4 <HAL_FDCAN_IRQHandler+0x278>)
 8007a84:	400b      	ands	r3, r1
 8007a86:	6513      	str	r3, [r2, #80]	; 0x50
 8007a88:	4a51      	ldr	r2, [pc, #324]	; (8007bd0 <HAL_FDCAN_IRQHandler+0x274>)
 8007a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a8c:	0f9b      	lsrs	r3, r3, #30
 8007a8e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8007a90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f9c0 	bl	8007e18 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00d      	beq.n	8007aba <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007aa4:	4b4b      	ldr	r3, [pc, #300]	; (8007bd4 <HAL_FDCAN_IRQHandler+0x278>)
 8007aa6:	400b      	ands	r3, r1
 8007aa8:	6513      	str	r3, [r2, #80]	; 0x50
 8007aaa:	4a49      	ldr	r2, [pc, #292]	; (8007bd0 <HAL_FDCAN_IRQHandler+0x274>)
 8007aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aae:	0f9b      	lsrs	r3, r3, #30
 8007ab0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007ab2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f9ba 	bl	8007e2e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00d      	beq.n	8007adc <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007ac6:	4b43      	ldr	r3, [pc, #268]	; (8007bd4 <HAL_FDCAN_IRQHandler+0x278>)
 8007ac8:	400b      	ands	r3, r1
 8007aca:	6513      	str	r3, [r2, #80]	; 0x50
 8007acc:	4a40      	ldr	r2, [pc, #256]	; (8007bd0 <HAL_FDCAN_IRQHandler+0x274>)
 8007ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ad0:	0f9b      	lsrs	r3, r3, #30
 8007ad2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007ad4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7f9 fb10 	bl	80010fc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00d      	beq.n	8007afe <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007ae8:	4b3a      	ldr	r3, [pc, #232]	; (8007bd4 <HAL_FDCAN_IRQHandler+0x278>)
 8007aea:	400b      	ands	r3, r1
 8007aec:	6513      	str	r3, [r2, #80]	; 0x50
 8007aee:	4a38      	ldr	r2, [pc, #224]	; (8007bd0 <HAL_FDCAN_IRQHandler+0x274>)
 8007af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007af2:	0f9b      	lsrs	r3, r3, #30
 8007af4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007af6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f9a3 	bl	8007e44 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8007afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b00:	0adb      	lsrs	r3, r3, #11
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d010      	beq.n	8007b2c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8007b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0c:	0adb      	lsrs	r3, r3, #11
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00a      	beq.n	8007b2c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b1e:	651a      	str	r2, [r3, #80]	; 0x50
 8007b20:	4b2b      	ldr	r3, [pc, #172]	; (8007bd0 <HAL_FDCAN_IRQHandler+0x274>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f997 	bl	8007e5a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8007b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b2e:	0a5b      	lsrs	r3, r3, #9
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d01d      	beq.n	8007b74 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8007b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3a:	0a5b      	lsrs	r3, r3, #9
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d017      	beq.n	8007b74 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007b4c:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b58:	4013      	ands	r3, r2
 8007b5a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b64:	651a      	str	r2, [r3, #80]	; 0x50
 8007b66:	4b1a      	ldr	r3, [pc, #104]	; (8007bd0 <HAL_FDCAN_IRQHandler+0x274>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007b6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f97d 	bl	8007e6e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8007b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b76:	0cdb      	lsrs	r3, r3, #19
 8007b78:	f003 0301 	and.w	r3, r3, #1
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d010      	beq.n	8007ba2 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8007b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b82:	0cdb      	lsrs	r3, r3, #19
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00a      	beq.n	8007ba2 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007b94:	651a      	str	r2, [r3, #80]	; 0x50
 8007b96:	4b0e      	ldr	r3, [pc, #56]	; (8007bd0 <HAL_FDCAN_IRQHandler+0x274>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f97c 	bl	8007e9a <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8007ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba4:	0c1b      	lsrs	r3, r3, #16
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d016      	beq.n	8007bdc <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8007bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb0:	0c1b      	lsrs	r3, r3, #16
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d010      	beq.n	8007bdc <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007bc2:	651a      	str	r2, [r3, #80]	; 0x50
 8007bc4:	4b02      	ldr	r3, [pc, #8]	; (8007bd0 <HAL_FDCAN_IRQHandler+0x274>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	e004      	b.n	8007bd8 <HAL_FDCAN_IRQHandler+0x27c>
 8007bce:	bf00      	nop
 8007bd0:	4000a800 	.word	0x4000a800
 8007bd4:	3fcfffff 	.word	0x3fcfffff
 8007bd8:	f000 f969 	bl	8007eae <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bde:	0c9b      	lsrs	r3, r3, #18
 8007be0:	f003 0301 	and.w	r3, r3, #1
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d010      	beq.n	8007c0a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8007be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bea:	0c9b      	lsrs	r3, r3, #18
 8007bec:	f003 0301 	and.w	r3, r3, #1
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00a      	beq.n	8007c0a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007bfc:	651a      	str	r2, [r3, #80]	; 0x50
 8007bfe:	4b83      	ldr	r3, [pc, #524]	; (8007e0c <HAL_FDCAN_IRQHandler+0x4b0>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f95c 	bl	8007ec2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c0c:	0c5b      	lsrs	r3, r3, #17
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d015      	beq.n	8007c42 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8007c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c18:	0c5b      	lsrs	r3, r3, #17
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00f      	beq.n	8007c42 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007c2a:	651a      	str	r2, [r3, #80]	; 0x50
 8007c2c:	4b77      	ldr	r3, [pc, #476]	; (8007e0c <HAL_FDCAN_IRQHandler+0x4b0>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00d      	beq.n	8007c64 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c4e:	4b70      	ldr	r3, [pc, #448]	; (8007e10 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007c50:	400b      	ands	r3, r1
 8007c52:	6513      	str	r3, [r2, #80]	; 0x50
 8007c54:	4a6d      	ldr	r2, [pc, #436]	; (8007e0c <HAL_FDCAN_IRQHandler+0x4b0>)
 8007c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c58:	0f9b      	lsrs	r3, r3, #30
 8007c5a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007c5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f94d 	bl	8007efe <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d011      	beq.n	8007c8e <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c70:	4b67      	ldr	r3, [pc, #412]	; (8007e10 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007c72:	400b      	ands	r3, r1
 8007c74:	6513      	str	r3, [r2, #80]	; 0x50
 8007c76:	4a65      	ldr	r2, [pc, #404]	; (8007e0c <HAL_FDCAN_IRQHandler+0x4b0>)
 8007c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c7a:	0f9b      	lsrs	r3, r3, #30
 8007c7c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8007c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c86:	431a      	orrs	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a60      	ldr	r2, [pc, #384]	; (8007e14 <HAL_FDCAN_IRQHandler+0x4b8>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	f040 80ac 	bne.w	8007df2 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f003 0303 	and.w	r3, r3, #3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 80a4 	beq.w	8007df2 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	6a1b      	ldr	r3, [r3, #32]
 8007cb0:	f003 030f 	and.w	r3, r3, #15
 8007cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	6a1b      	ldr	r3, [r3, #32]
 8007cc8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ccc:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8007ce4:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cee:	4013      	ands	r3, r2
 8007cf0:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	6a1b      	ldr	r3, [r3, #32]
 8007cf8:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8007cfc:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d04:	6a3a      	ldr	r2, [r7, #32]
 8007d06:	4013      	ands	r3, r2
 8007d08:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	6a1b      	ldr	r3, [r3, #32]
 8007d10:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8007d14:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1c:	69fa      	ldr	r2, [r7, #28]
 8007d1e:	4013      	ands	r3, r2
 8007d20:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d28:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	6a1b      	ldr	r3, [r3, #32]
 8007d30:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8007d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d007      	beq.n	8007d48 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d3e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8007d40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f8e6 	bl	8007f14 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8007d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d007      	beq.n	8007d5e <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d54:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8007d56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f8e6 	bl	8007f2a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	099b      	lsrs	r3, r3, #6
 8007d62:	f003 0301 	and.w	r3, r3, #1
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d01a      	beq.n	8007da0 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	099b      	lsrs	r3, r3, #6
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d014      	beq.n	8007da0 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d7c:	0c1b      	lsrs	r3, r3, #16
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d8c:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	2240      	movs	r2, #64	; 0x40
 8007d94:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	6939      	ldr	r1, [r7, #16]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f8d0 	bl	8007f40 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d007      	beq.n	8007db6 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dac:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8007dae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f8d1 	bl	8007f58 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00b      	beq.n	8007dd4 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	6a3a      	ldr	r2, [r7, #32]
 8007dc2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8007dca:	6a3b      	ldr	r3, [r7, #32]
 8007dcc:	431a      	orrs	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00b      	beq.n	8007df2 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	69fa      	ldr	r2, [r7, #28]
 8007de0:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	431a      	orrs	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f874 	bl	8007eea <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007e02:	bf00      	nop
 8007e04:	3758      	adds	r7, #88	; 0x58
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	4000a800 	.word	0x4000a800
 8007e10:	3fcfffff 	.word	0x3fcfffff
 8007e14:	4000a000 	.word	0x4000a000

08007e18 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8007e22:	bf00      	nop
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b083      	sub	sp, #12
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007e38:	bf00      	nop
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007e4e:	bf00      	nop
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b083      	sub	sp, #12
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007e62:	bf00      	nop
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b083      	sub	sp, #12
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8007ea2:	bf00      	nop
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b083      	sub	sp, #12
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007eb6:	bf00      	nop
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b083      	sub	sp, #12
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007eca:	bf00      	nop
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b083      	sub	sp, #12
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007ede:	bf00      	nop
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b083      	sub	sp, #12
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007ef2:	bf00      	nop
 8007ef4:	370c      	adds	r7, #12
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007efe:	b480      	push	{r7}
 8007f00:	b083      	sub	sp, #12
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8007f1e:	bf00      	nop
 8007f20:	370c      	adds	r7, #12
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8007f4c:	bf00      	nop
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8007f62:	bf00      	nop
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
	...

08007f70 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f7c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007f86:	4ba7      	ldr	r3, [pc, #668]	; (8008224 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f88:	4013      	ands	r3, r2
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	0091      	lsls	r1, r2, #2
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	6812      	ldr	r2, [r2, #0]
 8007f92:	430b      	orrs	r3, r1
 8007f94:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fa0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa8:	041a      	lsls	r2, r3, #16
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb8:	68ba      	ldr	r2, [r7, #8]
 8007fba:	4413      	add	r3, r2
 8007fbc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007fc6:	4b97      	ldr	r3, [pc, #604]	; (8008224 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007fc8:	4013      	ands	r3, r2
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	0091      	lsls	r1, r2, #2
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	6812      	ldr	r2, [r2, #0]
 8007fd2:	430b      	orrs	r3, r1
 8007fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fe0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe8:	041a      	lsls	r2, r3, #16
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	430a      	orrs	r2, r1
 8007ff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff8:	005b      	lsls	r3, r3, #1
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008008:	4b86      	ldr	r3, [pc, #536]	; (8008224 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800800a:	4013      	ands	r3, r2
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	0091      	lsls	r1, r2, #2
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	6812      	ldr	r2, [r2, #0]
 8008014:	430b      	orrs	r3, r1
 8008016:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008022:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802a:	041a      	lsls	r2, r3, #16
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	430a      	orrs	r2, r1
 8008032:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800803e:	fb02 f303 	mul.w	r3, r2, r3
 8008042:	68ba      	ldr	r2, [r7, #8]
 8008044:	4413      	add	r3, r2
 8008046:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008050:	4b74      	ldr	r3, [pc, #464]	; (8008224 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008052:	4013      	ands	r3, r2
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	0091      	lsls	r1, r2, #2
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	6812      	ldr	r2, [r2, #0]
 800805c:	430b      	orrs	r3, r1
 800805e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800806a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008072:	041a      	lsls	r2, r3, #16
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	430a      	orrs	r2, r1
 800807a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008086:	fb02 f303 	mul.w	r3, r2, r3
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	4413      	add	r3, r2
 800808e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008098:	4b62      	ldr	r3, [pc, #392]	; (8008224 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800809a:	4013      	ands	r3, r2
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	0091      	lsls	r1, r2, #2
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	6812      	ldr	r2, [r2, #0]
 80080a4:	430b      	orrs	r3, r1
 80080a6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80080b2:	fb02 f303 	mul.w	r3, r2, r3
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	4413      	add	r3, r2
 80080ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80080c4:	4b57      	ldr	r3, [pc, #348]	; (8008224 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80080c6:	4013      	ands	r3, r2
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	0091      	lsls	r1, r2, #2
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	6812      	ldr	r2, [r2, #0]
 80080d0:	430b      	orrs	r3, r1
 80080d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080de:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080e6:	041a      	lsls	r2, r3, #16
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	430a      	orrs	r2, r1
 80080ee:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f6:	005b      	lsls	r3, r3, #1
 80080f8:	68ba      	ldr	r2, [r7, #8]
 80080fa:	4413      	add	r3, r2
 80080fc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8008106:	4b47      	ldr	r3, [pc, #284]	; (8008224 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008108:	4013      	ands	r3, r2
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	0091      	lsls	r1, r2, #2
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	6812      	ldr	r2, [r2, #0]
 8008112:	430b      	orrs	r3, r1
 8008114:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008120:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008128:	041a      	lsls	r2, r3, #16
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	430a      	orrs	r2, r1
 8008130:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800813c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008144:	061a      	lsls	r2, r3, #24
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	430a      	orrs	r2, r1
 800814c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008154:	4b34      	ldr	r3, [pc, #208]	; (8008228 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008156:	4413      	add	r3, r2
 8008158:	009a      	lsls	r2, r3, #2
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	441a      	add	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008176:	00db      	lsls	r3, r3, #3
 8008178:	441a      	add	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008186:	6879      	ldr	r1, [r7, #4]
 8008188:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800818a:	fb01 f303 	mul.w	r3, r1, r3
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	441a      	add	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80081a2:	fb01 f303 	mul.w	r3, r1, r3
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	441a      	add	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081b6:	6879      	ldr	r1, [r7, #4]
 80081b8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80081ba:	fb01 f303 	mul.w	r3, r1, r3
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	441a      	add	r2, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081d2:	00db      	lsls	r3, r3, #3
 80081d4:	441a      	add	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081e6:	6879      	ldr	r1, [r7, #4]
 80081e8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80081ea:	fb01 f303 	mul.w	r3, r1, r3
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	441a      	add	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008202:	6879      	ldr	r1, [r7, #4]
 8008204:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008206:	fb01 f303 	mul.w	r3, r1, r3
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	441a      	add	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800821a:	4a04      	ldr	r2, [pc, #16]	; (800822c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d915      	bls.n	800824c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008220:	e006      	b.n	8008230 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008222:	bf00      	nop
 8008224:	ffff0003 	.word	0xffff0003
 8008228:	10002b00 	.word	0x10002b00
 800822c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008236:	f043 0220 	orr.w	r2, r3, #32
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2203      	movs	r2, #3
 8008244:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	e010      	b.n	800826e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008250:	60fb      	str	r3, [r7, #12]
 8008252:	e005      	b.n	8008260 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	3304      	adds	r3, #4
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	429a      	cmp	r2, r3
 800826a:	d3f3      	bcc.n	8008254 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3714      	adds	r7, #20
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop

0800827c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 800827c:	b480      	push	{r7}
 800827e:	b089      	sub	sp, #36	; 0x24
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
 8008288:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10a      	bne.n	80082a8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800829a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80082a2:	4313      	orrs	r3, r2
 80082a4:	61fb      	str	r3, [r7, #28]
 80082a6:	e00a      	b.n	80082be <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80082b0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80082b6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80082b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082bc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80082c8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80082ce:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80082d4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80082da:	4313      	orrs	r3, r2
 80082dc:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082e8:	6839      	ldr	r1, [r7, #0]
 80082ea:	fb01 f303 	mul.w	r3, r1, r3
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	69fa      	ldr	r2, [r7, #28]
 80082f8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	3304      	adds	r3, #4
 80082fe:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	3304      	adds	r3, #4
 800830a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800830c:	2300      	movs	r3, #0
 800830e:	617b      	str	r3, [r7, #20]
 8008310:	e020      	b.n	8008354 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	3303      	adds	r3, #3
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	4413      	add	r3, r2
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	3302      	adds	r3, #2
 8008322:	6879      	ldr	r1, [r7, #4]
 8008324:	440b      	add	r3, r1
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800832a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	3301      	adds	r3, #1
 8008330:	6879      	ldr	r1, [r7, #4]
 8008332:	440b      	add	r3, r1
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8008338:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800833a:	6879      	ldr	r1, [r7, #4]
 800833c:	697a      	ldr	r2, [r7, #20]
 800833e:	440a      	add	r2, r1
 8008340:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8008342:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	3304      	adds	r3, #4
 800834c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	3304      	adds	r3, #4
 8008352:	617b      	str	r3, [r7, #20]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	0c1b      	lsrs	r3, r3, #16
 800835a:	4a06      	ldr	r2, [pc, #24]	; (8008374 <FDCAN_CopyMessageToRAM+0xf8>)
 800835c:	5cd3      	ldrb	r3, [r2, r3]
 800835e:	461a      	mov	r2, r3
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	4293      	cmp	r3, r2
 8008364:	d3d5      	bcc.n	8008312 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8008366:	bf00      	nop
 8008368:	bf00      	nop
 800836a:	3724      	adds	r7, #36	; 0x24
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	0800ed64 	.word	0x0800ed64

08008378 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008378:	b480      	push	{r7}
 800837a:	b089      	sub	sp, #36	; 0x24
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008382:	2300      	movs	r3, #0
 8008384:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008386:	4b89      	ldr	r3, [pc, #548]	; (80085ac <HAL_GPIO_Init+0x234>)
 8008388:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800838a:	e194      	b.n	80086b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	2101      	movs	r1, #1
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	fa01 f303 	lsl.w	r3, r1, r3
 8008398:	4013      	ands	r3, r2
 800839a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f000 8186 	beq.w	80086b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	f003 0303 	and.w	r3, r3, #3
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d005      	beq.n	80083bc <HAL_GPIO_Init+0x44>
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	f003 0303 	and.w	r3, r3, #3
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d130      	bne.n	800841e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	005b      	lsls	r3, r3, #1
 80083c6:	2203      	movs	r2, #3
 80083c8:	fa02 f303 	lsl.w	r3, r2, r3
 80083cc:	43db      	mvns	r3, r3
 80083ce:	69ba      	ldr	r2, [r7, #24]
 80083d0:	4013      	ands	r3, r2
 80083d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	68da      	ldr	r2, [r3, #12]
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	005b      	lsls	r3, r3, #1
 80083dc:	fa02 f303 	lsl.w	r3, r2, r3
 80083e0:	69ba      	ldr	r2, [r7, #24]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	69ba      	ldr	r2, [r7, #24]
 80083ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80083f2:	2201      	movs	r2, #1
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	fa02 f303 	lsl.w	r3, r2, r3
 80083fa:	43db      	mvns	r3, r3
 80083fc:	69ba      	ldr	r2, [r7, #24]
 80083fe:	4013      	ands	r3, r2
 8008400:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	091b      	lsrs	r3, r3, #4
 8008408:	f003 0201 	and.w	r2, r3, #1
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	fa02 f303 	lsl.w	r3, r2, r3
 8008412:	69ba      	ldr	r2, [r7, #24]
 8008414:	4313      	orrs	r3, r2
 8008416:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	69ba      	ldr	r2, [r7, #24]
 800841c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	f003 0303 	and.w	r3, r3, #3
 8008426:	2b03      	cmp	r3, #3
 8008428:	d017      	beq.n	800845a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	005b      	lsls	r3, r3, #1
 8008434:	2203      	movs	r2, #3
 8008436:	fa02 f303 	lsl.w	r3, r2, r3
 800843a:	43db      	mvns	r3, r3
 800843c:	69ba      	ldr	r2, [r7, #24]
 800843e:	4013      	ands	r3, r2
 8008440:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	689a      	ldr	r2, [r3, #8]
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	005b      	lsls	r3, r3, #1
 800844a:	fa02 f303 	lsl.w	r3, r2, r3
 800844e:	69ba      	ldr	r2, [r7, #24]
 8008450:	4313      	orrs	r3, r2
 8008452:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	69ba      	ldr	r2, [r7, #24]
 8008458:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	f003 0303 	and.w	r3, r3, #3
 8008462:	2b02      	cmp	r3, #2
 8008464:	d123      	bne.n	80084ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	08da      	lsrs	r2, r3, #3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	3208      	adds	r2, #8
 800846e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	f003 0307 	and.w	r3, r3, #7
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	220f      	movs	r2, #15
 800847e:	fa02 f303 	lsl.w	r3, r2, r3
 8008482:	43db      	mvns	r3, r3
 8008484:	69ba      	ldr	r2, [r7, #24]
 8008486:	4013      	ands	r3, r2
 8008488:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	691a      	ldr	r2, [r3, #16]
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	f003 0307 	and.w	r3, r3, #7
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	fa02 f303 	lsl.w	r3, r2, r3
 800849a:	69ba      	ldr	r2, [r7, #24]
 800849c:	4313      	orrs	r3, r2
 800849e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	08da      	lsrs	r2, r3, #3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	3208      	adds	r2, #8
 80084a8:	69b9      	ldr	r1, [r7, #24]
 80084aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	005b      	lsls	r3, r3, #1
 80084b8:	2203      	movs	r2, #3
 80084ba:	fa02 f303 	lsl.w	r3, r2, r3
 80084be:	43db      	mvns	r3, r3
 80084c0:	69ba      	ldr	r2, [r7, #24]
 80084c2:	4013      	ands	r3, r2
 80084c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	f003 0203 	and.w	r2, r3, #3
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	005b      	lsls	r3, r3, #1
 80084d2:	fa02 f303 	lsl.w	r3, r2, r3
 80084d6:	69ba      	ldr	r2, [r7, #24]
 80084d8:	4313      	orrs	r3, r2
 80084da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	69ba      	ldr	r2, [r7, #24]
 80084e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 80e0 	beq.w	80086b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084f0:	4b2f      	ldr	r3, [pc, #188]	; (80085b0 <HAL_GPIO_Init+0x238>)
 80084f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80084f6:	4a2e      	ldr	r2, [pc, #184]	; (80085b0 <HAL_GPIO_Init+0x238>)
 80084f8:	f043 0302 	orr.w	r3, r3, #2
 80084fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008500:	4b2b      	ldr	r3, [pc, #172]	; (80085b0 <HAL_GPIO_Init+0x238>)
 8008502:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008506:	f003 0302 	and.w	r3, r3, #2
 800850a:	60fb      	str	r3, [r7, #12]
 800850c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800850e:	4a29      	ldr	r2, [pc, #164]	; (80085b4 <HAL_GPIO_Init+0x23c>)
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	089b      	lsrs	r3, r3, #2
 8008514:	3302      	adds	r3, #2
 8008516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800851a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	f003 0303 	and.w	r3, r3, #3
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	220f      	movs	r2, #15
 8008526:	fa02 f303 	lsl.w	r3, r2, r3
 800852a:	43db      	mvns	r3, r3
 800852c:	69ba      	ldr	r2, [r7, #24]
 800852e:	4013      	ands	r3, r2
 8008530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a20      	ldr	r2, [pc, #128]	; (80085b8 <HAL_GPIO_Init+0x240>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d052      	beq.n	80085e0 <HAL_GPIO_Init+0x268>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a1f      	ldr	r2, [pc, #124]	; (80085bc <HAL_GPIO_Init+0x244>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d031      	beq.n	80085a6 <HAL_GPIO_Init+0x22e>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a1e      	ldr	r2, [pc, #120]	; (80085c0 <HAL_GPIO_Init+0x248>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d02b      	beq.n	80085a2 <HAL_GPIO_Init+0x22a>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a1d      	ldr	r2, [pc, #116]	; (80085c4 <HAL_GPIO_Init+0x24c>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d025      	beq.n	800859e <HAL_GPIO_Init+0x226>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a1c      	ldr	r2, [pc, #112]	; (80085c8 <HAL_GPIO_Init+0x250>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d01f      	beq.n	800859a <HAL_GPIO_Init+0x222>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a1b      	ldr	r2, [pc, #108]	; (80085cc <HAL_GPIO_Init+0x254>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d019      	beq.n	8008596 <HAL_GPIO_Init+0x21e>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a1a      	ldr	r2, [pc, #104]	; (80085d0 <HAL_GPIO_Init+0x258>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d013      	beq.n	8008592 <HAL_GPIO_Init+0x21a>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a19      	ldr	r2, [pc, #100]	; (80085d4 <HAL_GPIO_Init+0x25c>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d00d      	beq.n	800858e <HAL_GPIO_Init+0x216>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a18      	ldr	r2, [pc, #96]	; (80085d8 <HAL_GPIO_Init+0x260>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d007      	beq.n	800858a <HAL_GPIO_Init+0x212>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a17      	ldr	r2, [pc, #92]	; (80085dc <HAL_GPIO_Init+0x264>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d101      	bne.n	8008586 <HAL_GPIO_Init+0x20e>
 8008582:	2309      	movs	r3, #9
 8008584:	e02d      	b.n	80085e2 <HAL_GPIO_Init+0x26a>
 8008586:	230a      	movs	r3, #10
 8008588:	e02b      	b.n	80085e2 <HAL_GPIO_Init+0x26a>
 800858a:	2308      	movs	r3, #8
 800858c:	e029      	b.n	80085e2 <HAL_GPIO_Init+0x26a>
 800858e:	2307      	movs	r3, #7
 8008590:	e027      	b.n	80085e2 <HAL_GPIO_Init+0x26a>
 8008592:	2306      	movs	r3, #6
 8008594:	e025      	b.n	80085e2 <HAL_GPIO_Init+0x26a>
 8008596:	2305      	movs	r3, #5
 8008598:	e023      	b.n	80085e2 <HAL_GPIO_Init+0x26a>
 800859a:	2304      	movs	r3, #4
 800859c:	e021      	b.n	80085e2 <HAL_GPIO_Init+0x26a>
 800859e:	2303      	movs	r3, #3
 80085a0:	e01f      	b.n	80085e2 <HAL_GPIO_Init+0x26a>
 80085a2:	2302      	movs	r3, #2
 80085a4:	e01d      	b.n	80085e2 <HAL_GPIO_Init+0x26a>
 80085a6:	2301      	movs	r3, #1
 80085a8:	e01b      	b.n	80085e2 <HAL_GPIO_Init+0x26a>
 80085aa:	bf00      	nop
 80085ac:	58000080 	.word	0x58000080
 80085b0:	58024400 	.word	0x58024400
 80085b4:	58000400 	.word	0x58000400
 80085b8:	58020000 	.word	0x58020000
 80085bc:	58020400 	.word	0x58020400
 80085c0:	58020800 	.word	0x58020800
 80085c4:	58020c00 	.word	0x58020c00
 80085c8:	58021000 	.word	0x58021000
 80085cc:	58021400 	.word	0x58021400
 80085d0:	58021800 	.word	0x58021800
 80085d4:	58021c00 	.word	0x58021c00
 80085d8:	58022000 	.word	0x58022000
 80085dc:	58022400 	.word	0x58022400
 80085e0:	2300      	movs	r3, #0
 80085e2:	69fa      	ldr	r2, [r7, #28]
 80085e4:	f002 0203 	and.w	r2, r2, #3
 80085e8:	0092      	lsls	r2, r2, #2
 80085ea:	4093      	lsls	r3, r2
 80085ec:	69ba      	ldr	r2, [r7, #24]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80085f2:	4938      	ldr	r1, [pc, #224]	; (80086d4 <HAL_GPIO_Init+0x35c>)
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	089b      	lsrs	r3, r3, #2
 80085f8:	3302      	adds	r3, #2
 80085fa:	69ba      	ldr	r2, [r7, #24]
 80085fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	43db      	mvns	r3, r3
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	4013      	ands	r3, r2
 8008610:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800861e:	69ba      	ldr	r2, [r7, #24]
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	4313      	orrs	r3, r2
 8008624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008626:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800862e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	43db      	mvns	r3, r3
 800863a:	69ba      	ldr	r2, [r7, #24]
 800863c:	4013      	ands	r3, r2
 800863e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d003      	beq.n	8008654 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800864c:	69ba      	ldr	r2, [r7, #24]
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	4313      	orrs	r3, r2
 8008652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	43db      	mvns	r3, r3
 8008666:	69ba      	ldr	r2, [r7, #24]
 8008668:	4013      	ands	r3, r2
 800866a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d003      	beq.n	8008680 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	4313      	orrs	r3, r2
 800867e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	69ba      	ldr	r2, [r7, #24]
 8008684:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	43db      	mvns	r3, r3
 8008690:	69ba      	ldr	r2, [r7, #24]
 8008692:	4013      	ands	r3, r2
 8008694:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d003      	beq.n	80086aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80086a2:	69ba      	ldr	r2, [r7, #24]
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	69ba      	ldr	r2, [r7, #24]
 80086ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	3301      	adds	r3, #1
 80086b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	fa22 f303 	lsr.w	r3, r2, r3
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f47f ae63 	bne.w	800838c <HAL_GPIO_Init+0x14>
  }
}
 80086c6:	bf00      	nop
 80086c8:	bf00      	nop
 80086ca:	3724      	adds	r7, #36	; 0x24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr
 80086d4:	58000400 	.word	0x58000400

080086d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	460b      	mov	r3, r1
 80086e2:	807b      	strh	r3, [r7, #2]
 80086e4:	4613      	mov	r3, r2
 80086e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80086e8:	787b      	ldrb	r3, [r7, #1]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d003      	beq.n	80086f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80086ee:	887a      	ldrh	r2, [r7, #2]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80086f4:	e003      	b.n	80086fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80086f6:	887b      	ldrh	r3, [r7, #2]
 80086f8:	041a      	lsls	r2, r3, #16
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	619a      	str	r2, [r3, #24]
}
 80086fe:	bf00      	nop
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
	...

0800870c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8008714:	4a08      	ldr	r2, [pc, #32]	; (8008738 <HAL_HSEM_FastTake+0x2c>)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	3320      	adds	r3, #32
 800871a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800871e:	4a07      	ldr	r2, [pc, #28]	; (800873c <HAL_HSEM_FastTake+0x30>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d101      	bne.n	8008728 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	e000      	b.n	800872a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
}
 800872a:	4618      	mov	r0, r3
 800872c:	370c      	adds	r7, #12
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	58026400 	.word	0x58026400
 800873c:	80000300 	.word	0x80000300

08008740 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800874a:	4906      	ldr	r1, [pc, #24]	; (8008764 <HAL_HSEM_Release+0x24>)
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8008758:	bf00      	nop
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr
 8008764:	58026400 	.word	0x58026400

08008768 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008770:	4b29      	ldr	r3, [pc, #164]	; (8008818 <HAL_PWREx_ConfigSupply+0xb0>)
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	f003 0307 	and.w	r3, r3, #7
 8008778:	2b06      	cmp	r3, #6
 800877a:	d00a      	beq.n	8008792 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800877c:	4b26      	ldr	r3, [pc, #152]	; (8008818 <HAL_PWREx_ConfigSupply+0xb0>)
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	429a      	cmp	r2, r3
 8008788:	d001      	beq.n	800878e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e040      	b.n	8008810 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	e03e      	b.n	8008810 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008792:	4b21      	ldr	r3, [pc, #132]	; (8008818 <HAL_PWREx_ConfigSupply+0xb0>)
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800879a:	491f      	ldr	r1, [pc, #124]	; (8008818 <HAL_PWREx_ConfigSupply+0xb0>)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4313      	orrs	r3, r2
 80087a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80087a2:	f7fb fc51 	bl	8004048 <HAL_GetTick>
 80087a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80087a8:	e009      	b.n	80087be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80087aa:	f7fb fc4d 	bl	8004048 <HAL_GetTick>
 80087ae:	4602      	mov	r2, r0
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087b8:	d901      	bls.n	80087be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e028      	b.n	8008810 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80087be:	4b16      	ldr	r3, [pc, #88]	; (8008818 <HAL_PWREx_ConfigSupply+0xb0>)
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087ca:	d1ee      	bne.n	80087aa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b1e      	cmp	r3, #30
 80087d0:	d008      	beq.n	80087e4 <HAL_PWREx_ConfigSupply+0x7c>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2b2e      	cmp	r3, #46	; 0x2e
 80087d6:	d005      	beq.n	80087e4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2b1d      	cmp	r3, #29
 80087dc:	d002      	beq.n	80087e4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2b2d      	cmp	r3, #45	; 0x2d
 80087e2:	d114      	bne.n	800880e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80087e4:	f7fb fc30 	bl	8004048 <HAL_GetTick>
 80087e8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80087ea:	e009      	b.n	8008800 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80087ec:	f7fb fc2c 	bl	8004048 <HAL_GetTick>
 80087f0:	4602      	mov	r2, r0
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087fa:	d901      	bls.n	8008800 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	e007      	b.n	8008810 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008800:	4b05      	ldr	r3, [pc, #20]	; (8008818 <HAL_PWREx_ConfigSupply+0xb0>)
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800880c:	d1ee      	bne.n	80087ec <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	58024800 	.word	0x58024800

0800881c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b08c      	sub	sp, #48	; 0x30
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d102      	bne.n	8008830 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	f000 bc48 	b.w	80090c0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	2b00      	cmp	r3, #0
 800883a:	f000 8088 	beq.w	800894e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800883e:	4b99      	ldr	r3, [pc, #612]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008846:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008848:	4b96      	ldr	r3, [pc, #600]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 800884a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800884e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008850:	2b10      	cmp	r3, #16
 8008852:	d007      	beq.n	8008864 <HAL_RCC_OscConfig+0x48>
 8008854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008856:	2b18      	cmp	r3, #24
 8008858:	d111      	bne.n	800887e <HAL_RCC_OscConfig+0x62>
 800885a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885c:	f003 0303 	and.w	r3, r3, #3
 8008860:	2b02      	cmp	r3, #2
 8008862:	d10c      	bne.n	800887e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008864:	4b8f      	ldr	r3, [pc, #572]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d06d      	beq.n	800894c <HAL_RCC_OscConfig+0x130>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d169      	bne.n	800894c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	f000 bc21 	b.w	80090c0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008886:	d106      	bne.n	8008896 <HAL_RCC_OscConfig+0x7a>
 8008888:	4b86      	ldr	r3, [pc, #536]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a85      	ldr	r2, [pc, #532]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 800888e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008892:	6013      	str	r3, [r2, #0]
 8008894:	e02e      	b.n	80088f4 <HAL_RCC_OscConfig+0xd8>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10c      	bne.n	80088b8 <HAL_RCC_OscConfig+0x9c>
 800889e:	4b81      	ldr	r3, [pc, #516]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a80      	ldr	r2, [pc, #512]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 80088a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088a8:	6013      	str	r3, [r2, #0]
 80088aa:	4b7e      	ldr	r3, [pc, #504]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a7d      	ldr	r2, [pc, #500]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 80088b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088b4:	6013      	str	r3, [r2, #0]
 80088b6:	e01d      	b.n	80088f4 <HAL_RCC_OscConfig+0xd8>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088c0:	d10c      	bne.n	80088dc <HAL_RCC_OscConfig+0xc0>
 80088c2:	4b78      	ldr	r3, [pc, #480]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a77      	ldr	r2, [pc, #476]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 80088c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088cc:	6013      	str	r3, [r2, #0]
 80088ce:	4b75      	ldr	r3, [pc, #468]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a74      	ldr	r2, [pc, #464]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 80088d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088d8:	6013      	str	r3, [r2, #0]
 80088da:	e00b      	b.n	80088f4 <HAL_RCC_OscConfig+0xd8>
 80088dc:	4b71      	ldr	r3, [pc, #452]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a70      	ldr	r2, [pc, #448]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 80088e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088e6:	6013      	str	r3, [r2, #0]
 80088e8:	4b6e      	ldr	r3, [pc, #440]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a6d      	ldr	r2, [pc, #436]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 80088ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d013      	beq.n	8008924 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088fc:	f7fb fba4 	bl	8004048 <HAL_GetTick>
 8008900:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008902:	e008      	b.n	8008916 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008904:	f7fb fba0 	bl	8004048 <HAL_GetTick>
 8008908:	4602      	mov	r2, r0
 800890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	2b64      	cmp	r3, #100	; 0x64
 8008910:	d901      	bls.n	8008916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e3d4      	b.n	80090c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008916:	4b63      	ldr	r3, [pc, #396]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0f0      	beq.n	8008904 <HAL_RCC_OscConfig+0xe8>
 8008922:	e014      	b.n	800894e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008924:	f7fb fb90 	bl	8004048 <HAL_GetTick>
 8008928:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800892a:	e008      	b.n	800893e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800892c:	f7fb fb8c 	bl	8004048 <HAL_GetTick>
 8008930:	4602      	mov	r2, r0
 8008932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	2b64      	cmp	r3, #100	; 0x64
 8008938:	d901      	bls.n	800893e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800893a:	2303      	movs	r3, #3
 800893c:	e3c0      	b.n	80090c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800893e:	4b59      	ldr	r3, [pc, #356]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1f0      	bne.n	800892c <HAL_RCC_OscConfig+0x110>
 800894a:	e000      	b.n	800894e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800894c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 0302 	and.w	r3, r3, #2
 8008956:	2b00      	cmp	r3, #0
 8008958:	f000 80ca 	beq.w	8008af0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800895c:	4b51      	ldr	r3, [pc, #324]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008964:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008966:	4b4f      	ldr	r3, [pc, #316]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 8008968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800896c:	6a3b      	ldr	r3, [r7, #32]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d007      	beq.n	8008982 <HAL_RCC_OscConfig+0x166>
 8008972:	6a3b      	ldr	r3, [r7, #32]
 8008974:	2b18      	cmp	r3, #24
 8008976:	d156      	bne.n	8008a26 <HAL_RCC_OscConfig+0x20a>
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	f003 0303 	and.w	r3, r3, #3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d151      	bne.n	8008a26 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008982:	4b48      	ldr	r3, [pc, #288]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 0304 	and.w	r3, r3, #4
 800898a:	2b00      	cmp	r3, #0
 800898c:	d005      	beq.n	800899a <HAL_RCC_OscConfig+0x17e>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	e392      	b.n	80090c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800899a:	4b42      	ldr	r3, [pc, #264]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f023 0219 	bic.w	r2, r3, #25
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	493f      	ldr	r1, [pc, #252]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 80089a8:	4313      	orrs	r3, r2
 80089aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ac:	f7fb fb4c 	bl	8004048 <HAL_GetTick>
 80089b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089b2:	e008      	b.n	80089c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089b4:	f7fb fb48 	bl	8004048 <HAL_GetTick>
 80089b8:	4602      	mov	r2, r0
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d901      	bls.n	80089c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e37c      	b.n	80090c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089c6:	4b37      	ldr	r3, [pc, #220]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 0304 	and.w	r3, r3, #4
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d0f0      	beq.n	80089b4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089d2:	f7fb fb45 	bl	8004060 <HAL_GetREVID>
 80089d6:	4603      	mov	r3, r0
 80089d8:	f241 0203 	movw	r2, #4099	; 0x1003
 80089dc:	4293      	cmp	r3, r2
 80089de:	d817      	bhi.n	8008a10 <HAL_RCC_OscConfig+0x1f4>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	2b40      	cmp	r3, #64	; 0x40
 80089e6:	d108      	bne.n	80089fa <HAL_RCC_OscConfig+0x1de>
 80089e8:	4b2e      	ldr	r3, [pc, #184]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80089f0:	4a2c      	ldr	r2, [pc, #176]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 80089f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089f6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089f8:	e07a      	b.n	8008af0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089fa:	4b2a      	ldr	r3, [pc, #168]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	031b      	lsls	r3, r3, #12
 8008a08:	4926      	ldr	r1, [pc, #152]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a0e:	e06f      	b.n	8008af0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a10:	4b24      	ldr	r3, [pc, #144]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	061b      	lsls	r3, r3, #24
 8008a1e:	4921      	ldr	r1, [pc, #132]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 8008a20:	4313      	orrs	r3, r2
 8008a22:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a24:	e064      	b.n	8008af0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d047      	beq.n	8008abe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008a2e:	4b1d      	ldr	r3, [pc, #116]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f023 0219 	bic.w	r2, r3, #25
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	491a      	ldr	r1, [pc, #104]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a40:	f7fb fb02 	bl	8004048 <HAL_GetTick>
 8008a44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a46:	e008      	b.n	8008a5a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a48:	f7fb fafe 	bl	8004048 <HAL_GetTick>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d901      	bls.n	8008a5a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	e332      	b.n	80090c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a5a:	4b12      	ldr	r3, [pc, #72]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 0304 	and.w	r3, r3, #4
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d0f0      	beq.n	8008a48 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a66:	f7fb fafb 	bl	8004060 <HAL_GetREVID>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d819      	bhi.n	8008aa8 <HAL_RCC_OscConfig+0x28c>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	2b40      	cmp	r3, #64	; 0x40
 8008a7a:	d108      	bne.n	8008a8e <HAL_RCC_OscConfig+0x272>
 8008a7c:	4b09      	ldr	r3, [pc, #36]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008a84:	4a07      	ldr	r2, [pc, #28]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 8008a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a8a:	6053      	str	r3, [r2, #4]
 8008a8c:	e030      	b.n	8008af0 <HAL_RCC_OscConfig+0x2d4>
 8008a8e:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	031b      	lsls	r3, r3, #12
 8008a9c:	4901      	ldr	r1, [pc, #4]	; (8008aa4 <HAL_RCC_OscConfig+0x288>)
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	604b      	str	r3, [r1, #4]
 8008aa2:	e025      	b.n	8008af0 <HAL_RCC_OscConfig+0x2d4>
 8008aa4:	58024400 	.word	0x58024400
 8008aa8:	4b9a      	ldr	r3, [pc, #616]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	061b      	lsls	r3, r3, #24
 8008ab6:	4997      	ldr	r1, [pc, #604]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	604b      	str	r3, [r1, #4]
 8008abc:	e018      	b.n	8008af0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008abe:	4b95      	ldr	r3, [pc, #596]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a94      	ldr	r2, [pc, #592]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008ac4:	f023 0301 	bic.w	r3, r3, #1
 8008ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aca:	f7fb fabd 	bl	8004048 <HAL_GetTick>
 8008ace:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ad0:	e008      	b.n	8008ae4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ad2:	f7fb fab9 	bl	8004048 <HAL_GetTick>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d901      	bls.n	8008ae4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e2ed      	b.n	80090c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ae4:	4b8b      	ldr	r3, [pc, #556]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0304 	and.w	r3, r3, #4
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1f0      	bne.n	8008ad2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 0310 	and.w	r3, r3, #16
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f000 80a9 	beq.w	8008c50 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008afe:	4b85      	ldr	r3, [pc, #532]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b08:	4b82      	ldr	r3, [pc, #520]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	2b08      	cmp	r3, #8
 8008b12:	d007      	beq.n	8008b24 <HAL_RCC_OscConfig+0x308>
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	2b18      	cmp	r3, #24
 8008b18:	d13a      	bne.n	8008b90 <HAL_RCC_OscConfig+0x374>
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f003 0303 	and.w	r3, r3, #3
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d135      	bne.n	8008b90 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b24:	4b7b      	ldr	r3, [pc, #492]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d005      	beq.n	8008b3c <HAL_RCC_OscConfig+0x320>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	69db      	ldr	r3, [r3, #28]
 8008b34:	2b80      	cmp	r3, #128	; 0x80
 8008b36:	d001      	beq.n	8008b3c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e2c1      	b.n	80090c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b3c:	f7fb fa90 	bl	8004060 <HAL_GetREVID>
 8008b40:	4603      	mov	r3, r0
 8008b42:	f241 0203 	movw	r2, #4099	; 0x1003
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d817      	bhi.n	8008b7a <HAL_RCC_OscConfig+0x35e>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a1b      	ldr	r3, [r3, #32]
 8008b4e:	2b20      	cmp	r3, #32
 8008b50:	d108      	bne.n	8008b64 <HAL_RCC_OscConfig+0x348>
 8008b52:	4b70      	ldr	r3, [pc, #448]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008b5a:	4a6e      	ldr	r2, [pc, #440]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008b5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b60:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b62:	e075      	b.n	8008c50 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b64:	4b6b      	ldr	r3, [pc, #428]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a1b      	ldr	r3, [r3, #32]
 8008b70:	069b      	lsls	r3, r3, #26
 8008b72:	4968      	ldr	r1, [pc, #416]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008b74:	4313      	orrs	r3, r2
 8008b76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b78:	e06a      	b.n	8008c50 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b7a:	4b66      	ldr	r3, [pc, #408]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	061b      	lsls	r3, r3, #24
 8008b88:	4962      	ldr	r1, [pc, #392]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b8e:	e05f      	b.n	8008c50 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	69db      	ldr	r3, [r3, #28]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d042      	beq.n	8008c1e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008b98:	4b5e      	ldr	r3, [pc, #376]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a5d      	ldr	r2, [pc, #372]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ba4:	f7fb fa50 	bl	8004048 <HAL_GetTick>
 8008ba8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008baa:	e008      	b.n	8008bbe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008bac:	f7fb fa4c 	bl	8004048 <HAL_GetTick>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb4:	1ad3      	subs	r3, r2, r3
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d901      	bls.n	8008bbe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e280      	b.n	80090c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008bbe:	4b55      	ldr	r3, [pc, #340]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d0f0      	beq.n	8008bac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008bca:	f7fb fa49 	bl	8004060 <HAL_GetREVID>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	f241 0203 	movw	r2, #4099	; 0x1003
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d817      	bhi.n	8008c08 <HAL_RCC_OscConfig+0x3ec>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a1b      	ldr	r3, [r3, #32]
 8008bdc:	2b20      	cmp	r3, #32
 8008bde:	d108      	bne.n	8008bf2 <HAL_RCC_OscConfig+0x3d6>
 8008be0:	4b4c      	ldr	r3, [pc, #304]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008be8:	4a4a      	ldr	r2, [pc, #296]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008bea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bee:	6053      	str	r3, [r2, #4]
 8008bf0:	e02e      	b.n	8008c50 <HAL_RCC_OscConfig+0x434>
 8008bf2:	4b48      	ldr	r3, [pc, #288]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	069b      	lsls	r3, r3, #26
 8008c00:	4944      	ldr	r1, [pc, #272]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008c02:	4313      	orrs	r3, r2
 8008c04:	604b      	str	r3, [r1, #4]
 8008c06:	e023      	b.n	8008c50 <HAL_RCC_OscConfig+0x434>
 8008c08:	4b42      	ldr	r3, [pc, #264]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a1b      	ldr	r3, [r3, #32]
 8008c14:	061b      	lsls	r3, r3, #24
 8008c16:	493f      	ldr	r1, [pc, #252]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	60cb      	str	r3, [r1, #12]
 8008c1c:	e018      	b.n	8008c50 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008c1e:	4b3d      	ldr	r3, [pc, #244]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a3c      	ldr	r2, [pc, #240]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008c24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c2a:	f7fb fa0d 	bl	8004048 <HAL_GetTick>
 8008c2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c30:	e008      	b.n	8008c44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008c32:	f7fb fa09 	bl	8004048 <HAL_GetTick>
 8008c36:	4602      	mov	r2, r0
 8008c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	d901      	bls.n	8008c44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e23d      	b.n	80090c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c44:	4b33      	ldr	r3, [pc, #204]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d1f0      	bne.n	8008c32 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 0308 	and.w	r3, r3, #8
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d036      	beq.n	8008cca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	695b      	ldr	r3, [r3, #20]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d019      	beq.n	8008c98 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c64:	4b2b      	ldr	r3, [pc, #172]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c68:	4a2a      	ldr	r2, [pc, #168]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008c6a:	f043 0301 	orr.w	r3, r3, #1
 8008c6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c70:	f7fb f9ea 	bl	8004048 <HAL_GetTick>
 8008c74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008c76:	e008      	b.n	8008c8a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c78:	f7fb f9e6 	bl	8004048 <HAL_GetTick>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d901      	bls.n	8008c8a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008c86:	2303      	movs	r3, #3
 8008c88:	e21a      	b.n	80090c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008c8a:	4b22      	ldr	r3, [pc, #136]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c8e:	f003 0302 	and.w	r3, r3, #2
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d0f0      	beq.n	8008c78 <HAL_RCC_OscConfig+0x45c>
 8008c96:	e018      	b.n	8008cca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c98:	4b1e      	ldr	r3, [pc, #120]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c9c:	4a1d      	ldr	r2, [pc, #116]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008c9e:	f023 0301 	bic.w	r3, r3, #1
 8008ca2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ca4:	f7fb f9d0 	bl	8004048 <HAL_GetTick>
 8008ca8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008caa:	e008      	b.n	8008cbe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cac:	f7fb f9cc 	bl	8004048 <HAL_GetTick>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d901      	bls.n	8008cbe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	e200      	b.n	80090c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008cbe:	4b15      	ldr	r3, [pc, #84]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cc2:	f003 0302 	and.w	r3, r3, #2
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1f0      	bne.n	8008cac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0320 	and.w	r3, r3, #32
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d039      	beq.n	8008d4a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	699b      	ldr	r3, [r3, #24]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d01c      	beq.n	8008d18 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008cde:	4b0d      	ldr	r3, [pc, #52]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a0c      	ldr	r2, [pc, #48]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008ce4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008ce8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008cea:	f7fb f9ad 	bl	8004048 <HAL_GetTick>
 8008cee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008cf0:	e008      	b.n	8008d04 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008cf2:	f7fb f9a9 	bl	8004048 <HAL_GetTick>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d901      	bls.n	8008d04 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e1dd      	b.n	80090c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008d04:	4b03      	ldr	r3, [pc, #12]	; (8008d14 <HAL_RCC_OscConfig+0x4f8>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d0f0      	beq.n	8008cf2 <HAL_RCC_OscConfig+0x4d6>
 8008d10:	e01b      	b.n	8008d4a <HAL_RCC_OscConfig+0x52e>
 8008d12:	bf00      	nop
 8008d14:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008d18:	4b9b      	ldr	r3, [pc, #620]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a9a      	ldr	r2, [pc, #616]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008d1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008d24:	f7fb f990 	bl	8004048 <HAL_GetTick>
 8008d28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d2a:	e008      	b.n	8008d3e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d2c:	f7fb f98c 	bl	8004048 <HAL_GetTick>
 8008d30:	4602      	mov	r2, r0
 8008d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d901      	bls.n	8008d3e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e1c0      	b.n	80090c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d3e:	4b92      	ldr	r3, [pc, #584]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1f0      	bne.n	8008d2c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 0304 	and.w	r3, r3, #4
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f000 8081 	beq.w	8008e5a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008d58:	4b8c      	ldr	r3, [pc, #560]	; (8008f8c <HAL_RCC_OscConfig+0x770>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a8b      	ldr	r2, [pc, #556]	; (8008f8c <HAL_RCC_OscConfig+0x770>)
 8008d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d64:	f7fb f970 	bl	8004048 <HAL_GetTick>
 8008d68:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d6a:	e008      	b.n	8008d7e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d6c:	f7fb f96c 	bl	8004048 <HAL_GetTick>
 8008d70:	4602      	mov	r2, r0
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	2b64      	cmp	r3, #100	; 0x64
 8008d78:	d901      	bls.n	8008d7e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e1a0      	b.n	80090c0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d7e:	4b83      	ldr	r3, [pc, #524]	; (8008f8c <HAL_RCC_OscConfig+0x770>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d0f0      	beq.n	8008d6c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d106      	bne.n	8008da0 <HAL_RCC_OscConfig+0x584>
 8008d92:	4b7d      	ldr	r3, [pc, #500]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d96:	4a7c      	ldr	r2, [pc, #496]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008d98:	f043 0301 	orr.w	r3, r3, #1
 8008d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8008d9e:	e02d      	b.n	8008dfc <HAL_RCC_OscConfig+0x5e0>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10c      	bne.n	8008dc2 <HAL_RCC_OscConfig+0x5a6>
 8008da8:	4b77      	ldr	r3, [pc, #476]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dac:	4a76      	ldr	r2, [pc, #472]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008dae:	f023 0301 	bic.w	r3, r3, #1
 8008db2:	6713      	str	r3, [r2, #112]	; 0x70
 8008db4:	4b74      	ldr	r3, [pc, #464]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db8:	4a73      	ldr	r2, [pc, #460]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008dba:	f023 0304 	bic.w	r3, r3, #4
 8008dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8008dc0:	e01c      	b.n	8008dfc <HAL_RCC_OscConfig+0x5e0>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	2b05      	cmp	r3, #5
 8008dc8:	d10c      	bne.n	8008de4 <HAL_RCC_OscConfig+0x5c8>
 8008dca:	4b6f      	ldr	r3, [pc, #444]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dce:	4a6e      	ldr	r2, [pc, #440]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008dd0:	f043 0304 	orr.w	r3, r3, #4
 8008dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8008dd6:	4b6c      	ldr	r3, [pc, #432]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dda:	4a6b      	ldr	r2, [pc, #428]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008ddc:	f043 0301 	orr.w	r3, r3, #1
 8008de0:	6713      	str	r3, [r2, #112]	; 0x70
 8008de2:	e00b      	b.n	8008dfc <HAL_RCC_OscConfig+0x5e0>
 8008de4:	4b68      	ldr	r3, [pc, #416]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de8:	4a67      	ldr	r2, [pc, #412]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008dea:	f023 0301 	bic.w	r3, r3, #1
 8008dee:	6713      	str	r3, [r2, #112]	; 0x70
 8008df0:	4b65      	ldr	r3, [pc, #404]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008df4:	4a64      	ldr	r2, [pc, #400]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008df6:	f023 0304 	bic.w	r3, r3, #4
 8008dfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d015      	beq.n	8008e30 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e04:	f7fb f920 	bl	8004048 <HAL_GetTick>
 8008e08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e0a:	e00a      	b.n	8008e22 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e0c:	f7fb f91c 	bl	8004048 <HAL_GetTick>
 8008e10:	4602      	mov	r2, r0
 8008e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d901      	bls.n	8008e22 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e14e      	b.n	80090c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e22:	4b59      	ldr	r3, [pc, #356]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e26:	f003 0302 	and.w	r3, r3, #2
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d0ee      	beq.n	8008e0c <HAL_RCC_OscConfig+0x5f0>
 8008e2e:	e014      	b.n	8008e5a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e30:	f7fb f90a 	bl	8004048 <HAL_GetTick>
 8008e34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e36:	e00a      	b.n	8008e4e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e38:	f7fb f906 	bl	8004048 <HAL_GetTick>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d901      	bls.n	8008e4e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e138      	b.n	80090c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e4e:	4b4e      	ldr	r3, [pc, #312]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e52:	f003 0302 	and.w	r3, r3, #2
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d1ee      	bne.n	8008e38 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f000 812d 	beq.w	80090be <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008e64:	4b48      	ldr	r3, [pc, #288]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e6c:	2b18      	cmp	r3, #24
 8008e6e:	f000 80bd 	beq.w	8008fec <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	f040 809e 	bne.w	8008fb8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e7c:	4b42      	ldr	r3, [pc, #264]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a41      	ldr	r2, [pc, #260]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e88:	f7fb f8de 	bl	8004048 <HAL_GetTick>
 8008e8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e8e:	e008      	b.n	8008ea2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e90:	f7fb f8da 	bl	8004048 <HAL_GetTick>
 8008e94:	4602      	mov	r2, r0
 8008e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	d901      	bls.n	8008ea2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e10e      	b.n	80090c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ea2:	4b39      	ldr	r3, [pc, #228]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1f0      	bne.n	8008e90 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008eae:	4b36      	ldr	r3, [pc, #216]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008eb2:	4b37      	ldr	r3, [pc, #220]	; (8008f90 <HAL_RCC_OscConfig+0x774>)
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008ebe:	0112      	lsls	r2, r2, #4
 8008ec0:	430a      	orrs	r2, r1
 8008ec2:	4931      	ldr	r1, [pc, #196]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	628b      	str	r3, [r1, #40]	; 0x28
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	025b      	lsls	r3, r3, #9
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	431a      	orrs	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	041b      	lsls	r3, r3, #16
 8008ee6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008eea:	431a      	orrs	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	061b      	lsls	r3, r3, #24
 8008ef4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ef8:	4923      	ldr	r1, [pc, #140]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008efa:	4313      	orrs	r3, r2
 8008efc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008efe:	4b22      	ldr	r3, [pc, #136]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f02:	4a21      	ldr	r2, [pc, #132]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008f04:	f023 0301 	bic.w	r3, r3, #1
 8008f08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008f0a:	4b1f      	ldr	r3, [pc, #124]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f0e:	4b21      	ldr	r3, [pc, #132]	; (8008f94 <HAL_RCC_OscConfig+0x778>)
 8008f10:	4013      	ands	r3, r2
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008f16:	00d2      	lsls	r2, r2, #3
 8008f18:	491b      	ldr	r1, [pc, #108]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008f1e:	4b1a      	ldr	r3, [pc, #104]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f22:	f023 020c 	bic.w	r2, r3, #12
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2a:	4917      	ldr	r1, [pc, #92]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008f30:	4b15      	ldr	r3, [pc, #84]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f34:	f023 0202 	bic.w	r2, r3, #2
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f3c:	4912      	ldr	r1, [pc, #72]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008f42:	4b11      	ldr	r3, [pc, #68]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f46:	4a10      	ldr	r2, [pc, #64]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f4e:	4b0e      	ldr	r3, [pc, #56]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f52:	4a0d      	ldr	r2, [pc, #52]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008f5a:	4b0b      	ldr	r3, [pc, #44]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5e:	4a0a      	ldr	r2, [pc, #40]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008f66:	4b08      	ldr	r3, [pc, #32]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6a:	4a07      	ldr	r2, [pc, #28]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008f6c:	f043 0301 	orr.w	r3, r3, #1
 8008f70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f72:	4b05      	ldr	r3, [pc, #20]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a04      	ldr	r2, [pc, #16]	; (8008f88 <HAL_RCC_OscConfig+0x76c>)
 8008f78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f7e:	f7fb f863 	bl	8004048 <HAL_GetTick>
 8008f82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f84:	e011      	b.n	8008faa <HAL_RCC_OscConfig+0x78e>
 8008f86:	bf00      	nop
 8008f88:	58024400 	.word	0x58024400
 8008f8c:	58024800 	.word	0x58024800
 8008f90:	fffffc0c 	.word	0xfffffc0c
 8008f94:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f98:	f7fb f856 	bl	8004048 <HAL_GetTick>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d901      	bls.n	8008faa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	e08a      	b.n	80090c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008faa:	4b47      	ldr	r3, [pc, #284]	; (80090c8 <HAL_RCC_OscConfig+0x8ac>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d0f0      	beq.n	8008f98 <HAL_RCC_OscConfig+0x77c>
 8008fb6:	e082      	b.n	80090be <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fb8:	4b43      	ldr	r3, [pc, #268]	; (80090c8 <HAL_RCC_OscConfig+0x8ac>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a42      	ldr	r2, [pc, #264]	; (80090c8 <HAL_RCC_OscConfig+0x8ac>)
 8008fbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fc4:	f7fb f840 	bl	8004048 <HAL_GetTick>
 8008fc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008fca:	e008      	b.n	8008fde <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fcc:	f7fb f83c 	bl	8004048 <HAL_GetTick>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d901      	bls.n	8008fde <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e070      	b.n	80090c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008fde:	4b3a      	ldr	r3, [pc, #232]	; (80090c8 <HAL_RCC_OscConfig+0x8ac>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1f0      	bne.n	8008fcc <HAL_RCC_OscConfig+0x7b0>
 8008fea:	e068      	b.n	80090be <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008fec:	4b36      	ldr	r3, [pc, #216]	; (80090c8 <HAL_RCC_OscConfig+0x8ac>)
 8008fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008ff2:	4b35      	ldr	r3, [pc, #212]	; (80090c8 <HAL_RCC_OscConfig+0x8ac>)
 8008ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d031      	beq.n	8009064 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	f003 0203 	and.w	r2, r3, #3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800900a:	429a      	cmp	r2, r3
 800900c:	d12a      	bne.n	8009064 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	091b      	lsrs	r3, r3, #4
 8009012:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800901a:	429a      	cmp	r2, r3
 800901c:	d122      	bne.n	8009064 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009028:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800902a:	429a      	cmp	r2, r3
 800902c:	d11a      	bne.n	8009064 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	0a5b      	lsrs	r3, r3, #9
 8009032:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800903a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800903c:	429a      	cmp	r2, r3
 800903e:	d111      	bne.n	8009064 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	0c1b      	lsrs	r3, r3, #16
 8009044:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800904e:	429a      	cmp	r2, r3
 8009050:	d108      	bne.n	8009064 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	0e1b      	lsrs	r3, r3, #24
 8009056:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800905e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009060:	429a      	cmp	r2, r3
 8009062:	d001      	beq.n	8009068 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e02b      	b.n	80090c0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009068:	4b17      	ldr	r3, [pc, #92]	; (80090c8 <HAL_RCC_OscConfig+0x8ac>)
 800906a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800906c:	08db      	lsrs	r3, r3, #3
 800906e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009072:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009078:	693a      	ldr	r2, [r7, #16]
 800907a:	429a      	cmp	r2, r3
 800907c:	d01f      	beq.n	80090be <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800907e:	4b12      	ldr	r3, [pc, #72]	; (80090c8 <HAL_RCC_OscConfig+0x8ac>)
 8009080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009082:	4a11      	ldr	r2, [pc, #68]	; (80090c8 <HAL_RCC_OscConfig+0x8ac>)
 8009084:	f023 0301 	bic.w	r3, r3, #1
 8009088:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800908a:	f7fa ffdd 	bl	8004048 <HAL_GetTick>
 800908e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009090:	bf00      	nop
 8009092:	f7fa ffd9 	bl	8004048 <HAL_GetTick>
 8009096:	4602      	mov	r2, r0
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909a:	4293      	cmp	r3, r2
 800909c:	d0f9      	beq.n	8009092 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800909e:	4b0a      	ldr	r3, [pc, #40]	; (80090c8 <HAL_RCC_OscConfig+0x8ac>)
 80090a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090a2:	4b0a      	ldr	r3, [pc, #40]	; (80090cc <HAL_RCC_OscConfig+0x8b0>)
 80090a4:	4013      	ands	r3, r2
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80090aa:	00d2      	lsls	r2, r2, #3
 80090ac:	4906      	ldr	r1, [pc, #24]	; (80090c8 <HAL_RCC_OscConfig+0x8ac>)
 80090ae:	4313      	orrs	r3, r2
 80090b0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80090b2:	4b05      	ldr	r3, [pc, #20]	; (80090c8 <HAL_RCC_OscConfig+0x8ac>)
 80090b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b6:	4a04      	ldr	r2, [pc, #16]	; (80090c8 <HAL_RCC_OscConfig+0x8ac>)
 80090b8:	f043 0301 	orr.w	r3, r3, #1
 80090bc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3730      	adds	r7, #48	; 0x30
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	58024400 	.word	0x58024400
 80090cc:	ffff0007 	.word	0xffff0007

080090d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d101      	bne.n	80090e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	e19c      	b.n	800941e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80090e4:	4b8a      	ldr	r3, [pc, #552]	; (8009310 <HAL_RCC_ClockConfig+0x240>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f003 030f 	and.w	r3, r3, #15
 80090ec:	683a      	ldr	r2, [r7, #0]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d910      	bls.n	8009114 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090f2:	4b87      	ldr	r3, [pc, #540]	; (8009310 <HAL_RCC_ClockConfig+0x240>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f023 020f 	bic.w	r2, r3, #15
 80090fa:	4985      	ldr	r1, [pc, #532]	; (8009310 <HAL_RCC_ClockConfig+0x240>)
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	4313      	orrs	r3, r2
 8009100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009102:	4b83      	ldr	r3, [pc, #524]	; (8009310 <HAL_RCC_ClockConfig+0x240>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 030f 	and.w	r3, r3, #15
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	429a      	cmp	r2, r3
 800910e:	d001      	beq.n	8009114 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	e184      	b.n	800941e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 0304 	and.w	r3, r3, #4
 800911c:	2b00      	cmp	r3, #0
 800911e:	d010      	beq.n	8009142 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	691a      	ldr	r2, [r3, #16]
 8009124:	4b7b      	ldr	r3, [pc, #492]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 8009126:	699b      	ldr	r3, [r3, #24]
 8009128:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800912c:	429a      	cmp	r2, r3
 800912e:	d908      	bls.n	8009142 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009130:	4b78      	ldr	r3, [pc, #480]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	4975      	ldr	r1, [pc, #468]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 800913e:	4313      	orrs	r3, r2
 8009140:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 0308 	and.w	r3, r3, #8
 800914a:	2b00      	cmp	r3, #0
 800914c:	d010      	beq.n	8009170 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	695a      	ldr	r2, [r3, #20]
 8009152:	4b70      	ldr	r3, [pc, #448]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 8009154:	69db      	ldr	r3, [r3, #28]
 8009156:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800915a:	429a      	cmp	r2, r3
 800915c:	d908      	bls.n	8009170 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800915e:	4b6d      	ldr	r3, [pc, #436]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 8009160:	69db      	ldr	r3, [r3, #28]
 8009162:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	695b      	ldr	r3, [r3, #20]
 800916a:	496a      	ldr	r1, [pc, #424]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 800916c:	4313      	orrs	r3, r2
 800916e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f003 0310 	and.w	r3, r3, #16
 8009178:	2b00      	cmp	r3, #0
 800917a:	d010      	beq.n	800919e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	699a      	ldr	r2, [r3, #24]
 8009180:	4b64      	ldr	r3, [pc, #400]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 8009182:	69db      	ldr	r3, [r3, #28]
 8009184:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009188:	429a      	cmp	r2, r3
 800918a:	d908      	bls.n	800919e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800918c:	4b61      	ldr	r3, [pc, #388]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 800918e:	69db      	ldr	r3, [r3, #28]
 8009190:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	699b      	ldr	r3, [r3, #24]
 8009198:	495e      	ldr	r1, [pc, #376]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 800919a:	4313      	orrs	r3, r2
 800919c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f003 0320 	and.w	r3, r3, #32
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d010      	beq.n	80091cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	69da      	ldr	r2, [r3, #28]
 80091ae:	4b59      	ldr	r3, [pc, #356]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d908      	bls.n	80091cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80091ba:	4b56      	ldr	r3, [pc, #344]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 80091bc:	6a1b      	ldr	r3, [r3, #32]
 80091be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	69db      	ldr	r3, [r3, #28]
 80091c6:	4953      	ldr	r1, [pc, #332]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 80091c8:	4313      	orrs	r3, r2
 80091ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 0302 	and.w	r3, r3, #2
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d010      	beq.n	80091fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68da      	ldr	r2, [r3, #12]
 80091dc:	4b4d      	ldr	r3, [pc, #308]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	f003 030f 	and.w	r3, r3, #15
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d908      	bls.n	80091fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091e8:	4b4a      	ldr	r3, [pc, #296]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	f023 020f 	bic.w	r2, r3, #15
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	4947      	ldr	r1, [pc, #284]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 80091f6:	4313      	orrs	r3, r2
 80091f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 0301 	and.w	r3, r3, #1
 8009202:	2b00      	cmp	r3, #0
 8009204:	d055      	beq.n	80092b2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009206:	4b43      	ldr	r3, [pc, #268]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 8009208:	699b      	ldr	r3, [r3, #24]
 800920a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	4940      	ldr	r1, [pc, #256]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 8009214:	4313      	orrs	r3, r2
 8009216:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	2b02      	cmp	r3, #2
 800921e:	d107      	bne.n	8009230 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009220:	4b3c      	ldr	r3, [pc, #240]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d121      	bne.n	8009270 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	e0f6      	b.n	800941e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	2b03      	cmp	r3, #3
 8009236:	d107      	bne.n	8009248 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009238:	4b36      	ldr	r3, [pc, #216]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d115      	bne.n	8009270 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	e0ea      	b.n	800941e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d107      	bne.n	8009260 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009250:	4b30      	ldr	r3, [pc, #192]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009258:	2b00      	cmp	r3, #0
 800925a:	d109      	bne.n	8009270 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	e0de      	b.n	800941e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009260:	4b2c      	ldr	r3, [pc, #176]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 0304 	and.w	r3, r3, #4
 8009268:	2b00      	cmp	r3, #0
 800926a:	d101      	bne.n	8009270 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	e0d6      	b.n	800941e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009270:	4b28      	ldr	r3, [pc, #160]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	f023 0207 	bic.w	r2, r3, #7
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	4925      	ldr	r1, [pc, #148]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 800927e:	4313      	orrs	r3, r2
 8009280:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009282:	f7fa fee1 	bl	8004048 <HAL_GetTick>
 8009286:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009288:	e00a      	b.n	80092a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800928a:	f7fa fedd 	bl	8004048 <HAL_GetTick>
 800928e:	4602      	mov	r2, r0
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	1ad3      	subs	r3, r2, r3
 8009294:	f241 3288 	movw	r2, #5000	; 0x1388
 8009298:	4293      	cmp	r3, r2
 800929a:	d901      	bls.n	80092a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800929c:	2303      	movs	r3, #3
 800929e:	e0be      	b.n	800941e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092a0:	4b1c      	ldr	r3, [pc, #112]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	00db      	lsls	r3, r3, #3
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d1eb      	bne.n	800928a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f003 0302 	and.w	r3, r3, #2
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d010      	beq.n	80092e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	68da      	ldr	r2, [r3, #12]
 80092c2:	4b14      	ldr	r3, [pc, #80]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	f003 030f 	and.w	r3, r3, #15
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d208      	bcs.n	80092e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80092ce:	4b11      	ldr	r3, [pc, #68]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 80092d0:	699b      	ldr	r3, [r3, #24]
 80092d2:	f023 020f 	bic.w	r2, r3, #15
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	490e      	ldr	r1, [pc, #56]	; (8009314 <HAL_RCC_ClockConfig+0x244>)
 80092dc:	4313      	orrs	r3, r2
 80092de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80092e0:	4b0b      	ldr	r3, [pc, #44]	; (8009310 <HAL_RCC_ClockConfig+0x240>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f003 030f 	and.w	r3, r3, #15
 80092e8:	683a      	ldr	r2, [r7, #0]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d214      	bcs.n	8009318 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092ee:	4b08      	ldr	r3, [pc, #32]	; (8009310 <HAL_RCC_ClockConfig+0x240>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f023 020f 	bic.w	r2, r3, #15
 80092f6:	4906      	ldr	r1, [pc, #24]	; (8009310 <HAL_RCC_ClockConfig+0x240>)
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092fe:	4b04      	ldr	r3, [pc, #16]	; (8009310 <HAL_RCC_ClockConfig+0x240>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 030f 	and.w	r3, r3, #15
 8009306:	683a      	ldr	r2, [r7, #0]
 8009308:	429a      	cmp	r2, r3
 800930a:	d005      	beq.n	8009318 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	e086      	b.n	800941e <HAL_RCC_ClockConfig+0x34e>
 8009310:	52002000 	.word	0x52002000
 8009314:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f003 0304 	and.w	r3, r3, #4
 8009320:	2b00      	cmp	r3, #0
 8009322:	d010      	beq.n	8009346 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	691a      	ldr	r2, [r3, #16]
 8009328:	4b3f      	ldr	r3, [pc, #252]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 800932a:	699b      	ldr	r3, [r3, #24]
 800932c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009330:	429a      	cmp	r2, r3
 8009332:	d208      	bcs.n	8009346 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009334:	4b3c      	ldr	r3, [pc, #240]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 8009336:	699b      	ldr	r3, [r3, #24]
 8009338:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	4939      	ldr	r1, [pc, #228]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 8009342:	4313      	orrs	r3, r2
 8009344:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f003 0308 	and.w	r3, r3, #8
 800934e:	2b00      	cmp	r3, #0
 8009350:	d010      	beq.n	8009374 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	695a      	ldr	r2, [r3, #20]
 8009356:	4b34      	ldr	r3, [pc, #208]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 8009358:	69db      	ldr	r3, [r3, #28]
 800935a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800935e:	429a      	cmp	r2, r3
 8009360:	d208      	bcs.n	8009374 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009362:	4b31      	ldr	r3, [pc, #196]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 8009364:	69db      	ldr	r3, [r3, #28]
 8009366:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	695b      	ldr	r3, [r3, #20]
 800936e:	492e      	ldr	r1, [pc, #184]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 8009370:	4313      	orrs	r3, r2
 8009372:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 0310 	and.w	r3, r3, #16
 800937c:	2b00      	cmp	r3, #0
 800937e:	d010      	beq.n	80093a2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	699a      	ldr	r2, [r3, #24]
 8009384:	4b28      	ldr	r3, [pc, #160]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 8009386:	69db      	ldr	r3, [r3, #28]
 8009388:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800938c:	429a      	cmp	r2, r3
 800938e:	d208      	bcs.n	80093a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009390:	4b25      	ldr	r3, [pc, #148]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 8009392:	69db      	ldr	r3, [r3, #28]
 8009394:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	699b      	ldr	r3, [r3, #24]
 800939c:	4922      	ldr	r1, [pc, #136]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 800939e:	4313      	orrs	r3, r2
 80093a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f003 0320 	and.w	r3, r3, #32
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d010      	beq.n	80093d0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	69da      	ldr	r2, [r3, #28]
 80093b2:	4b1d      	ldr	r3, [pc, #116]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d208      	bcs.n	80093d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80093be:	4b1a      	ldr	r3, [pc, #104]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 80093c0:	6a1b      	ldr	r3, [r3, #32]
 80093c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	69db      	ldr	r3, [r3, #28]
 80093ca:	4917      	ldr	r1, [pc, #92]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 80093cc:	4313      	orrs	r3, r2
 80093ce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80093d0:	f000 f834 	bl	800943c <HAL_RCC_GetSysClockFreq>
 80093d4:	4602      	mov	r2, r0
 80093d6:	4b14      	ldr	r3, [pc, #80]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	0a1b      	lsrs	r3, r3, #8
 80093dc:	f003 030f 	and.w	r3, r3, #15
 80093e0:	4912      	ldr	r1, [pc, #72]	; (800942c <HAL_RCC_ClockConfig+0x35c>)
 80093e2:	5ccb      	ldrb	r3, [r1, r3]
 80093e4:	f003 031f 	and.w	r3, r3, #31
 80093e8:	fa22 f303 	lsr.w	r3, r2, r3
 80093ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80093ee:	4b0e      	ldr	r3, [pc, #56]	; (8009428 <HAL_RCC_ClockConfig+0x358>)
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	f003 030f 	and.w	r3, r3, #15
 80093f6:	4a0d      	ldr	r2, [pc, #52]	; (800942c <HAL_RCC_ClockConfig+0x35c>)
 80093f8:	5cd3      	ldrb	r3, [r2, r3]
 80093fa:	f003 031f 	and.w	r3, r3, #31
 80093fe:	693a      	ldr	r2, [r7, #16]
 8009400:	fa22 f303 	lsr.w	r3, r2, r3
 8009404:	4a0a      	ldr	r2, [pc, #40]	; (8009430 <HAL_RCC_ClockConfig+0x360>)
 8009406:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009408:	4a0a      	ldr	r2, [pc, #40]	; (8009434 <HAL_RCC_ClockConfig+0x364>)
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800940e:	4b0a      	ldr	r3, [pc, #40]	; (8009438 <HAL_RCC_ClockConfig+0x368>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4618      	mov	r0, r3
 8009414:	f7fa fdce 	bl	8003fb4 <HAL_InitTick>
 8009418:	4603      	mov	r3, r0
 800941a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800941c:	7bfb      	ldrb	r3, [r7, #15]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3718      	adds	r7, #24
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	58024400 	.word	0x58024400
 800942c:	0800ed4c 	.word	0x0800ed4c
 8009430:	24000004 	.word	0x24000004
 8009434:	24000000 	.word	0x24000000
 8009438:	24000024 	.word	0x24000024

0800943c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800943c:	b480      	push	{r7}
 800943e:	b089      	sub	sp, #36	; 0x24
 8009440:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009442:	4bb3      	ldr	r3, [pc, #716]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800944a:	2b18      	cmp	r3, #24
 800944c:	f200 8155 	bhi.w	80096fa <HAL_RCC_GetSysClockFreq+0x2be>
 8009450:	a201      	add	r2, pc, #4	; (adr r2, 8009458 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009456:	bf00      	nop
 8009458:	080094bd 	.word	0x080094bd
 800945c:	080096fb 	.word	0x080096fb
 8009460:	080096fb 	.word	0x080096fb
 8009464:	080096fb 	.word	0x080096fb
 8009468:	080096fb 	.word	0x080096fb
 800946c:	080096fb 	.word	0x080096fb
 8009470:	080096fb 	.word	0x080096fb
 8009474:	080096fb 	.word	0x080096fb
 8009478:	080094e3 	.word	0x080094e3
 800947c:	080096fb 	.word	0x080096fb
 8009480:	080096fb 	.word	0x080096fb
 8009484:	080096fb 	.word	0x080096fb
 8009488:	080096fb 	.word	0x080096fb
 800948c:	080096fb 	.word	0x080096fb
 8009490:	080096fb 	.word	0x080096fb
 8009494:	080096fb 	.word	0x080096fb
 8009498:	080094e9 	.word	0x080094e9
 800949c:	080096fb 	.word	0x080096fb
 80094a0:	080096fb 	.word	0x080096fb
 80094a4:	080096fb 	.word	0x080096fb
 80094a8:	080096fb 	.word	0x080096fb
 80094ac:	080096fb 	.word	0x080096fb
 80094b0:	080096fb 	.word	0x080096fb
 80094b4:	080096fb 	.word	0x080096fb
 80094b8:	080094ef 	.word	0x080094ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094bc:	4b94      	ldr	r3, [pc, #592]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 0320 	and.w	r3, r3, #32
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d009      	beq.n	80094dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094c8:	4b91      	ldr	r3, [pc, #580]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	08db      	lsrs	r3, r3, #3
 80094ce:	f003 0303 	and.w	r3, r3, #3
 80094d2:	4a90      	ldr	r2, [pc, #576]	; (8009714 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80094d4:	fa22 f303 	lsr.w	r3, r2, r3
 80094d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80094da:	e111      	b.n	8009700 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80094dc:	4b8d      	ldr	r3, [pc, #564]	; (8009714 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80094de:	61bb      	str	r3, [r7, #24]
      break;
 80094e0:	e10e      	b.n	8009700 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80094e2:	4b8d      	ldr	r3, [pc, #564]	; (8009718 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80094e4:	61bb      	str	r3, [r7, #24]
      break;
 80094e6:	e10b      	b.n	8009700 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80094e8:	4b8c      	ldr	r3, [pc, #560]	; (800971c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80094ea:	61bb      	str	r3, [r7, #24]
      break;
 80094ec:	e108      	b.n	8009700 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094ee:	4b88      	ldr	r3, [pc, #544]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f2:	f003 0303 	and.w	r3, r3, #3
 80094f6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80094f8:	4b85      	ldr	r3, [pc, #532]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094fc:	091b      	lsrs	r3, r3, #4
 80094fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009502:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009504:	4b82      	ldr	r3, [pc, #520]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009508:	f003 0301 	and.w	r3, r3, #1
 800950c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800950e:	4b80      	ldr	r3, [pc, #512]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009512:	08db      	lsrs	r3, r3, #3
 8009514:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	fb02 f303 	mul.w	r3, r2, r3
 800951e:	ee07 3a90 	vmov	s15, r3
 8009522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009526:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	2b00      	cmp	r3, #0
 800952e:	f000 80e1 	beq.w	80096f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	2b02      	cmp	r3, #2
 8009536:	f000 8083 	beq.w	8009640 <HAL_RCC_GetSysClockFreq+0x204>
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	2b02      	cmp	r3, #2
 800953e:	f200 80a1 	bhi.w	8009684 <HAL_RCC_GetSysClockFreq+0x248>
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d003      	beq.n	8009550 <HAL_RCC_GetSysClockFreq+0x114>
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	2b01      	cmp	r3, #1
 800954c:	d056      	beq.n	80095fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800954e:	e099      	b.n	8009684 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009550:	4b6f      	ldr	r3, [pc, #444]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 0320 	and.w	r3, r3, #32
 8009558:	2b00      	cmp	r3, #0
 800955a:	d02d      	beq.n	80095b8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800955c:	4b6c      	ldr	r3, [pc, #432]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	08db      	lsrs	r3, r3, #3
 8009562:	f003 0303 	and.w	r3, r3, #3
 8009566:	4a6b      	ldr	r2, [pc, #428]	; (8009714 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009568:	fa22 f303 	lsr.w	r3, r2, r3
 800956c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	ee07 3a90 	vmov	s15, r3
 8009574:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	ee07 3a90 	vmov	s15, r3
 800957e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009586:	4b62      	ldr	r3, [pc, #392]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800958a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800958e:	ee07 3a90 	vmov	s15, r3
 8009592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009596:	ed97 6a02 	vldr	s12, [r7, #8]
 800959a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009720 <HAL_RCC_GetSysClockFreq+0x2e4>
 800959e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095b2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80095b6:	e087      	b.n	80096c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	ee07 3a90 	vmov	s15, r3
 80095be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009724 <HAL_RCC_GetSysClockFreq+0x2e8>
 80095c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ca:	4b51      	ldr	r3, [pc, #324]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095d2:	ee07 3a90 	vmov	s15, r3
 80095d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095da:	ed97 6a02 	vldr	s12, [r7, #8]
 80095de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009720 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80095fa:	e065      	b.n	80096c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	ee07 3a90 	vmov	s15, r3
 8009602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009606:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009728 <HAL_RCC_GetSysClockFreq+0x2ec>
 800960a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800960e:	4b40      	ldr	r3, [pc, #256]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009616:	ee07 3a90 	vmov	s15, r3
 800961a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800961e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009622:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009720 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800962a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800962e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800963a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800963e:	e043      	b.n	80096c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	ee07 3a90 	vmov	s15, r3
 8009646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800964a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800972c <HAL_RCC_GetSysClockFreq+0x2f0>
 800964e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009652:	4b2f      	ldr	r3, [pc, #188]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800965a:	ee07 3a90 	vmov	s15, r3
 800965e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009662:	ed97 6a02 	vldr	s12, [r7, #8]
 8009666:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009720 <HAL_RCC_GetSysClockFreq+0x2e4>
 800966a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800966e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800967a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800967e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009682:	e021      	b.n	80096c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	ee07 3a90 	vmov	s15, r3
 800968a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800968e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009728 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009696:	4b1e      	ldr	r3, [pc, #120]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800969e:	ee07 3a90 	vmov	s15, r3
 80096a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80096aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009720 <HAL_RCC_GetSysClockFreq+0x2e4>
 80096ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80096c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80096c8:	4b11      	ldr	r3, [pc, #68]	; (8009710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096cc:	0a5b      	lsrs	r3, r3, #9
 80096ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096d2:	3301      	adds	r3, #1
 80096d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	ee07 3a90 	vmov	s15, r3
 80096dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80096e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80096e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096ec:	ee17 3a90 	vmov	r3, s15
 80096f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80096f2:	e005      	b.n	8009700 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80096f4:	2300      	movs	r3, #0
 80096f6:	61bb      	str	r3, [r7, #24]
      break;
 80096f8:	e002      	b.n	8009700 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80096fa:	4b07      	ldr	r3, [pc, #28]	; (8009718 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80096fc:	61bb      	str	r3, [r7, #24]
      break;
 80096fe:	bf00      	nop
  }

  return sysclockfreq;
 8009700:	69bb      	ldr	r3, [r7, #24]
}
 8009702:	4618      	mov	r0, r3
 8009704:	3724      	adds	r7, #36	; 0x24
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	58024400 	.word	0x58024400
 8009714:	03d09000 	.word	0x03d09000
 8009718:	003d0900 	.word	0x003d0900
 800971c:	007a1200 	.word	0x007a1200
 8009720:	46000000 	.word	0x46000000
 8009724:	4c742400 	.word	0x4c742400
 8009728:	4a742400 	.word	0x4a742400
 800972c:	4af42400 	.word	0x4af42400

08009730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009736:	f7ff fe81 	bl	800943c <HAL_RCC_GetSysClockFreq>
 800973a:	4602      	mov	r2, r0
 800973c:	4b10      	ldr	r3, [pc, #64]	; (8009780 <HAL_RCC_GetHCLKFreq+0x50>)
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	0a1b      	lsrs	r3, r3, #8
 8009742:	f003 030f 	and.w	r3, r3, #15
 8009746:	490f      	ldr	r1, [pc, #60]	; (8009784 <HAL_RCC_GetHCLKFreq+0x54>)
 8009748:	5ccb      	ldrb	r3, [r1, r3]
 800974a:	f003 031f 	and.w	r3, r3, #31
 800974e:	fa22 f303 	lsr.w	r3, r2, r3
 8009752:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009754:	4b0a      	ldr	r3, [pc, #40]	; (8009780 <HAL_RCC_GetHCLKFreq+0x50>)
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	f003 030f 	and.w	r3, r3, #15
 800975c:	4a09      	ldr	r2, [pc, #36]	; (8009784 <HAL_RCC_GetHCLKFreq+0x54>)
 800975e:	5cd3      	ldrb	r3, [r2, r3]
 8009760:	f003 031f 	and.w	r3, r3, #31
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	fa22 f303 	lsr.w	r3, r2, r3
 800976a:	4a07      	ldr	r2, [pc, #28]	; (8009788 <HAL_RCC_GetHCLKFreq+0x58>)
 800976c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800976e:	4a07      	ldr	r2, [pc, #28]	; (800978c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009774:	4b04      	ldr	r3, [pc, #16]	; (8009788 <HAL_RCC_GetHCLKFreq+0x58>)
 8009776:	681b      	ldr	r3, [r3, #0]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	58024400 	.word	0x58024400
 8009784:	0800ed4c 	.word	0x0800ed4c
 8009788:	24000004 	.word	0x24000004
 800978c:	24000000 	.word	0x24000000

08009790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009794:	f7ff ffcc 	bl	8009730 <HAL_RCC_GetHCLKFreq>
 8009798:	4602      	mov	r2, r0
 800979a:	4b06      	ldr	r3, [pc, #24]	; (80097b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800979c:	69db      	ldr	r3, [r3, #28]
 800979e:	091b      	lsrs	r3, r3, #4
 80097a0:	f003 0307 	and.w	r3, r3, #7
 80097a4:	4904      	ldr	r1, [pc, #16]	; (80097b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80097a6:	5ccb      	ldrb	r3, [r1, r3]
 80097a8:	f003 031f 	and.w	r3, r3, #31
 80097ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	58024400 	.word	0x58024400
 80097b8:	0800ed4c 	.word	0x0800ed4c

080097bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80097c0:	f7ff ffb6 	bl	8009730 <HAL_RCC_GetHCLKFreq>
 80097c4:	4602      	mov	r2, r0
 80097c6:	4b06      	ldr	r3, [pc, #24]	; (80097e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80097c8:	69db      	ldr	r3, [r3, #28]
 80097ca:	0a1b      	lsrs	r3, r3, #8
 80097cc:	f003 0307 	and.w	r3, r3, #7
 80097d0:	4904      	ldr	r1, [pc, #16]	; (80097e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80097d2:	5ccb      	ldrb	r3, [r1, r3]
 80097d4:	f003 031f 	and.w	r3, r3, #31
 80097d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80097dc:	4618      	mov	r0, r3
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	58024400 	.word	0x58024400
 80097e4:	0800ed4c 	.word	0x0800ed4c

080097e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80097e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097ec:	b0ca      	sub	sp, #296	; 0x128
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80097f4:	2300      	movs	r3, #0
 80097f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80097fa:	2300      	movs	r3, #0
 80097fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009808:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800980c:	2500      	movs	r5, #0
 800980e:	ea54 0305 	orrs.w	r3, r4, r5
 8009812:	d049      	beq.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009818:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800981a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800981e:	d02f      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009820:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009824:	d828      	bhi.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009826:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800982a:	d01a      	beq.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800982c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009830:	d822      	bhi.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009832:	2b00      	cmp	r3, #0
 8009834:	d003      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800983a:	d007      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800983c:	e01c      	b.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800983e:	4bb8      	ldr	r3, [pc, #736]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009842:	4ab7      	ldr	r2, [pc, #732]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009848:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800984a:	e01a      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800984c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009850:	3308      	adds	r3, #8
 8009852:	2102      	movs	r1, #2
 8009854:	4618      	mov	r0, r3
 8009856:	f001 fc8f 	bl	800b178 <RCCEx_PLL2_Config>
 800985a:	4603      	mov	r3, r0
 800985c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009860:	e00f      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009866:	3328      	adds	r3, #40	; 0x28
 8009868:	2102      	movs	r1, #2
 800986a:	4618      	mov	r0, r3
 800986c:	f001 fd36 	bl	800b2dc <RCCEx_PLL3_Config>
 8009870:	4603      	mov	r3, r0
 8009872:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009876:	e004      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800987e:	e000      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009882:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009886:	2b00      	cmp	r3, #0
 8009888:	d10a      	bne.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800988a:	4ba5      	ldr	r3, [pc, #660]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800988c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800988e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009898:	4aa1      	ldr	r2, [pc, #644]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800989a:	430b      	orrs	r3, r1
 800989c:	6513      	str	r3, [r2, #80]	; 0x50
 800989e:	e003      	b.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80098a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80098b4:	f04f 0900 	mov.w	r9, #0
 80098b8:	ea58 0309 	orrs.w	r3, r8, r9
 80098bc:	d047      	beq.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80098be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098c4:	2b04      	cmp	r3, #4
 80098c6:	d82a      	bhi.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80098c8:	a201      	add	r2, pc, #4	; (adr r2, 80098d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80098ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ce:	bf00      	nop
 80098d0:	080098e5 	.word	0x080098e5
 80098d4:	080098f3 	.word	0x080098f3
 80098d8:	08009909 	.word	0x08009909
 80098dc:	08009927 	.word	0x08009927
 80098e0:	08009927 	.word	0x08009927
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098e4:	4b8e      	ldr	r3, [pc, #568]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e8:	4a8d      	ldr	r2, [pc, #564]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098f0:	e01a      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098f6:	3308      	adds	r3, #8
 80098f8:	2100      	movs	r1, #0
 80098fa:	4618      	mov	r0, r3
 80098fc:	f001 fc3c 	bl	800b178 <RCCEx_PLL2_Config>
 8009900:	4603      	mov	r3, r0
 8009902:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009906:	e00f      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800990c:	3328      	adds	r3, #40	; 0x28
 800990e:	2100      	movs	r1, #0
 8009910:	4618      	mov	r0, r3
 8009912:	f001 fce3 	bl	800b2dc <RCCEx_PLL3_Config>
 8009916:	4603      	mov	r3, r0
 8009918:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800991c:	e004      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009924:	e000      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009926:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009928:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800992c:	2b00      	cmp	r3, #0
 800992e:	d10a      	bne.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009930:	4b7b      	ldr	r3, [pc, #492]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009934:	f023 0107 	bic.w	r1, r3, #7
 8009938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800993c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800993e:	4a78      	ldr	r2, [pc, #480]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009940:	430b      	orrs	r3, r1
 8009942:	6513      	str	r3, [r2, #80]	; 0x50
 8009944:	e003      	b.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009946:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800994a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800994e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009956:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800995a:	f04f 0b00 	mov.w	fp, #0
 800995e:	ea5a 030b 	orrs.w	r3, sl, fp
 8009962:	d04c      	beq.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800996a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800996e:	d030      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009974:	d829      	bhi.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009976:	2bc0      	cmp	r3, #192	; 0xc0
 8009978:	d02d      	beq.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800997a:	2bc0      	cmp	r3, #192	; 0xc0
 800997c:	d825      	bhi.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800997e:	2b80      	cmp	r3, #128	; 0x80
 8009980:	d018      	beq.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009982:	2b80      	cmp	r3, #128	; 0x80
 8009984:	d821      	bhi.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009986:	2b00      	cmp	r3, #0
 8009988:	d002      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800998a:	2b40      	cmp	r3, #64	; 0x40
 800998c:	d007      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800998e:	e01c      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009990:	4b63      	ldr	r3, [pc, #396]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009994:	4a62      	ldr	r2, [pc, #392]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800999a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800999c:	e01c      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800999e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099a2:	3308      	adds	r3, #8
 80099a4:	2100      	movs	r1, #0
 80099a6:	4618      	mov	r0, r3
 80099a8:	f001 fbe6 	bl	800b178 <RCCEx_PLL2_Config>
 80099ac:	4603      	mov	r3, r0
 80099ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80099b2:	e011      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099b8:	3328      	adds	r3, #40	; 0x28
 80099ba:	2100      	movs	r1, #0
 80099bc:	4618      	mov	r0, r3
 80099be:	f001 fc8d 	bl	800b2dc <RCCEx_PLL3_Config>
 80099c2:	4603      	mov	r3, r0
 80099c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80099c8:	e006      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099d0:	e002      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80099d2:	bf00      	nop
 80099d4:	e000      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80099d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10a      	bne.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80099e0:	4b4f      	ldr	r3, [pc, #316]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099e4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80099e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099ee:	4a4c      	ldr	r2, [pc, #304]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099f0:	430b      	orrs	r3, r1
 80099f2:	6513      	str	r3, [r2, #80]	; 0x50
 80099f4:	e003      	b.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80099fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a06:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009a0a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009a0e:	2300      	movs	r3, #0
 8009a10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009a14:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009a18:	460b      	mov	r3, r1
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	d053      	beq.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009a26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a2a:	d035      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009a2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a30:	d82e      	bhi.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009a32:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009a36:	d031      	beq.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009a38:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009a3c:	d828      	bhi.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009a3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a42:	d01a      	beq.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009a44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a48:	d822      	bhi.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d003      	beq.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009a4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a52:	d007      	beq.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009a54:	e01c      	b.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a56:	4b32      	ldr	r3, [pc, #200]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5a:	4a31      	ldr	r2, [pc, #196]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a62:	e01c      	b.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a68:	3308      	adds	r3, #8
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f001 fb83 	bl	800b178 <RCCEx_PLL2_Config>
 8009a72:	4603      	mov	r3, r0
 8009a74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009a78:	e011      	b.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a7e:	3328      	adds	r3, #40	; 0x28
 8009a80:	2100      	movs	r1, #0
 8009a82:	4618      	mov	r0, r3
 8009a84:	f001 fc2a 	bl	800b2dc <RCCEx_PLL3_Config>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a8e:	e006      	b.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009a90:	2301      	movs	r3, #1
 8009a92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a96:	e002      	b.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009a98:	bf00      	nop
 8009a9a:	e000      	b.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d10b      	bne.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009aa6:	4b1e      	ldr	r3, [pc, #120]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aaa:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ab2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009ab6:	4a1a      	ldr	r2, [pc, #104]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ab8:	430b      	orrs	r3, r1
 8009aba:	6593      	str	r3, [r2, #88]	; 0x58
 8009abc:	e003      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009abe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ac2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ace:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009ad2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009adc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	d056      	beq.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009aee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009af2:	d038      	beq.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009af4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009af8:	d831      	bhi.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009afa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009afe:	d034      	beq.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009b00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b04:	d82b      	bhi.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b0a:	d01d      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009b0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b10:	d825      	bhi.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d006      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009b16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b1a:	d00a      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009b1c:	e01f      	b.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b1e:	bf00      	nop
 8009b20:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b24:	4ba2      	ldr	r3, [pc, #648]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b28:	4aa1      	ldr	r2, [pc, #644]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b30:	e01c      	b.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b36:	3308      	adds	r3, #8
 8009b38:	2100      	movs	r1, #0
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f001 fb1c 	bl	800b178 <RCCEx_PLL2_Config>
 8009b40:	4603      	mov	r3, r0
 8009b42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009b46:	e011      	b.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b4c:	3328      	adds	r3, #40	; 0x28
 8009b4e:	2100      	movs	r1, #0
 8009b50:	4618      	mov	r0, r3
 8009b52:	f001 fbc3 	bl	800b2dc <RCCEx_PLL3_Config>
 8009b56:	4603      	mov	r3, r0
 8009b58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b5c:	e006      	b.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b64:	e002      	b.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009b66:	bf00      	nop
 8009b68:	e000      	b.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009b6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10b      	bne.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009b74:	4b8e      	ldr	r3, [pc, #568]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b78:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b80:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b84:	4a8a      	ldr	r2, [pc, #552]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b86:	430b      	orrs	r3, r1
 8009b88:	6593      	str	r3, [r2, #88]	; 0x58
 8009b8a:	e003      	b.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009ba0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009baa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009bae:	460b      	mov	r3, r1
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	d03a      	beq.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bba:	2b30      	cmp	r3, #48	; 0x30
 8009bbc:	d01f      	beq.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009bbe:	2b30      	cmp	r3, #48	; 0x30
 8009bc0:	d819      	bhi.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009bc2:	2b20      	cmp	r3, #32
 8009bc4:	d00c      	beq.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009bc6:	2b20      	cmp	r3, #32
 8009bc8:	d815      	bhi.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d019      	beq.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009bce:	2b10      	cmp	r3, #16
 8009bd0:	d111      	bne.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bd2:	4b77      	ldr	r3, [pc, #476]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd6:	4a76      	ldr	r2, [pc, #472]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009bde:	e011      	b.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009be4:	3308      	adds	r3, #8
 8009be6:	2102      	movs	r1, #2
 8009be8:	4618      	mov	r0, r3
 8009bea:	f001 fac5 	bl	800b178 <RCCEx_PLL2_Config>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009bf4:	e006      	b.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009bfc:	e002      	b.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009bfe:	bf00      	nop
 8009c00:	e000      	b.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009c02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d10a      	bne.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009c0c:	4b68      	ldr	r3, [pc, #416]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c10:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c1a:	4a65      	ldr	r2, [pc, #404]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c1c:	430b      	orrs	r3, r1
 8009c1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c20:	e003      	b.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c32:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009c36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009c40:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009c44:	460b      	mov	r3, r1
 8009c46:	4313      	orrs	r3, r2
 8009c48:	d051      	beq.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c54:	d035      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009c56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c5a:	d82e      	bhi.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009c5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c60:	d031      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009c62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c66:	d828      	bhi.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c6c:	d01a      	beq.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c72:	d822      	bhi.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d003      	beq.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c7c:	d007      	beq.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009c7e:	e01c      	b.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c80:	4b4b      	ldr	r3, [pc, #300]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c84:	4a4a      	ldr	r2, [pc, #296]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009c8c:	e01c      	b.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c92:	3308      	adds	r3, #8
 8009c94:	2100      	movs	r1, #0
 8009c96:	4618      	mov	r0, r3
 8009c98:	f001 fa6e 	bl	800b178 <RCCEx_PLL2_Config>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009ca2:	e011      	b.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ca8:	3328      	adds	r3, #40	; 0x28
 8009caa:	2100      	movs	r1, #0
 8009cac:	4618      	mov	r0, r3
 8009cae:	f001 fb15 	bl	800b2dc <RCCEx_PLL3_Config>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009cb8:	e006      	b.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009cc0:	e002      	b.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009cc2:	bf00      	nop
 8009cc4:	e000      	b.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009cc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d10a      	bne.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009cd0:	4b37      	ldr	r3, [pc, #220]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cd4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cde:	4a34      	ldr	r2, [pc, #208]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ce0:	430b      	orrs	r3, r1
 8009ce2:	6513      	str	r3, [r2, #80]	; 0x50
 8009ce4:	e003      	b.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009cfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009cfe:	2300      	movs	r3, #0
 8009d00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009d04:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009d08:	460b      	mov	r3, r1
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	d056      	beq.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d18:	d033      	beq.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009d1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d1e:	d82c      	bhi.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d24:	d02f      	beq.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009d26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d2a:	d826      	bhi.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d30:	d02b      	beq.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009d32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d36:	d820      	bhi.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d3c:	d012      	beq.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009d3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d42:	d81a      	bhi.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d022      	beq.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d4c:	d115      	bne.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d52:	3308      	adds	r3, #8
 8009d54:	2101      	movs	r1, #1
 8009d56:	4618      	mov	r0, r3
 8009d58:	f001 fa0e 	bl	800b178 <RCCEx_PLL2_Config>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009d62:	e015      	b.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d68:	3328      	adds	r3, #40	; 0x28
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f001 fab5 	bl	800b2dc <RCCEx_PLL3_Config>
 8009d72:	4603      	mov	r3, r0
 8009d74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009d78:	e00a      	b.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d80:	e006      	b.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009d82:	bf00      	nop
 8009d84:	e004      	b.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009d86:	bf00      	nop
 8009d88:	e002      	b.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009d8a:	bf00      	nop
 8009d8c:	e000      	b.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009d8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d10d      	bne.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009d98:	4b05      	ldr	r3, [pc, #20]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d9c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009da6:	4a02      	ldr	r2, [pc, #8]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009da8:	430b      	orrs	r3, r1
 8009daa:	6513      	str	r3, [r2, #80]	; 0x50
 8009dac:	e006      	b.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009dae:	bf00      	nop
 8009db0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009db4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009db8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009dcc:	2300      	movs	r3, #0
 8009dce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009dd2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	d055      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009de0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009de8:	d033      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009dea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009dee:	d82c      	bhi.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009df4:	d02f      	beq.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dfa:	d826      	bhi.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009dfc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e00:	d02b      	beq.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009e02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e06:	d820      	bhi.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e0c:	d012      	beq.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009e0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e12:	d81a      	bhi.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d022      	beq.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009e18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e1c:	d115      	bne.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e22:	3308      	adds	r3, #8
 8009e24:	2101      	movs	r1, #1
 8009e26:	4618      	mov	r0, r3
 8009e28:	f001 f9a6 	bl	800b178 <RCCEx_PLL2_Config>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009e32:	e015      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e38:	3328      	adds	r3, #40	; 0x28
 8009e3a:	2101      	movs	r1, #1
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f001 fa4d 	bl	800b2dc <RCCEx_PLL3_Config>
 8009e42:	4603      	mov	r3, r0
 8009e44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009e48:	e00a      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e50:	e006      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009e52:	bf00      	nop
 8009e54:	e004      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009e56:	bf00      	nop
 8009e58:	e002      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009e5a:	bf00      	nop
 8009e5c:	e000      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009e5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10b      	bne.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009e68:	4ba3      	ldr	r3, [pc, #652]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e6c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e78:	4a9f      	ldr	r2, [pc, #636]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e7a:	430b      	orrs	r3, r1
 8009e7c:	6593      	str	r3, [r2, #88]	; 0x58
 8009e7e:	e003      	b.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e90:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009e94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e98:	2300      	movs	r3, #0
 8009e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009e9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	d037      	beq.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009eb2:	d00e      	beq.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009eb8:	d816      	bhi.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d018      	beq.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009ebe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ec2:	d111      	bne.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ec4:	4b8c      	ldr	r3, [pc, #560]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec8:	4a8b      	ldr	r2, [pc, #556]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ece:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009ed0:	e00f      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ed6:	3308      	adds	r3, #8
 8009ed8:	2101      	movs	r1, #1
 8009eda:	4618      	mov	r0, r3
 8009edc:	f001 f94c 	bl	800b178 <RCCEx_PLL2_Config>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009ee6:	e004      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009eee:	e000      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d10a      	bne.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009efa:	4b7f      	ldr	r3, [pc, #508]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009efe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f08:	4a7b      	ldr	r2, [pc, #492]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f0a:	430b      	orrs	r3, r1
 8009f0c:	6513      	str	r3, [r2, #80]	; 0x50
 8009f0e:	e003      	b.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f20:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009f24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f28:	2300      	movs	r3, #0
 8009f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009f2e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009f32:	460b      	mov	r3, r1
 8009f34:	4313      	orrs	r3, r2
 8009f36:	d039      	beq.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f3e:	2b03      	cmp	r3, #3
 8009f40:	d81c      	bhi.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009f42:	a201      	add	r2, pc, #4	; (adr r2, 8009f48 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f48:	08009f85 	.word	0x08009f85
 8009f4c:	08009f59 	.word	0x08009f59
 8009f50:	08009f67 	.word	0x08009f67
 8009f54:	08009f85 	.word	0x08009f85
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f58:	4b67      	ldr	r3, [pc, #412]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5c:	4a66      	ldr	r2, [pc, #408]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009f64:	e00f      	b.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f6a:	3308      	adds	r3, #8
 8009f6c:	2102      	movs	r1, #2
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f001 f902 	bl	800b178 <RCCEx_PLL2_Config>
 8009f74:	4603      	mov	r3, r0
 8009f76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009f7a:	e004      	b.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f82:	e000      	b.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009f84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10a      	bne.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009f8e:	4b5a      	ldr	r3, [pc, #360]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f92:	f023 0103 	bic.w	r1, r3, #3
 8009f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f9c:	4a56      	ldr	r2, [pc, #344]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f9e:	430b      	orrs	r3, r1
 8009fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009fa2:	e003      	b.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fa8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009fb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009fc2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	f000 809f 	beq.w	800a10c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009fce:	4b4b      	ldr	r3, [pc, #300]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a4a      	ldr	r2, [pc, #296]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009fda:	f7fa f835 	bl	8004048 <HAL_GetTick>
 8009fde:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009fe2:	e00b      	b.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009fe4:	f7fa f830 	bl	8004048 <HAL_GetTick>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009fee:	1ad3      	subs	r3, r2, r3
 8009ff0:	2b64      	cmp	r3, #100	; 0x64
 8009ff2:	d903      	bls.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ffa:	e005      	b.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ffc:	4b3f      	ldr	r3, [pc, #252]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a004:	2b00      	cmp	r3, #0
 800a006:	d0ed      	beq.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a008:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d179      	bne.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a010:	4b39      	ldr	r3, [pc, #228]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a012:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a018:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a01c:	4053      	eors	r3, r2
 800a01e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a022:	2b00      	cmp	r3, #0
 800a024:	d015      	beq.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a026:	4b34      	ldr	r3, [pc, #208]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a02a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a02e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a032:	4b31      	ldr	r3, [pc, #196]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a036:	4a30      	ldr	r2, [pc, #192]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a03c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a03e:	4b2e      	ldr	r3, [pc, #184]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a042:	4a2d      	ldr	r2, [pc, #180]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a048:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a04a:	4a2b      	ldr	r2, [pc, #172]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a04c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a050:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a056:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a05a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a05e:	d118      	bne.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a060:	f7f9 fff2 	bl	8004048 <HAL_GetTick>
 800a064:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a068:	e00d      	b.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a06a:	f7f9 ffed 	bl	8004048 <HAL_GetTick>
 800a06e:	4602      	mov	r2, r0
 800a070:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a074:	1ad2      	subs	r2, r2, r3
 800a076:	f241 3388 	movw	r3, #5000	; 0x1388
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d903      	bls.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a07e:	2303      	movs	r3, #3
 800a080:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800a084:	e005      	b.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a086:	4b1c      	ldr	r3, [pc, #112]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a08a:	f003 0302 	and.w	r3, r3, #2
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d0eb      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a092:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a096:	2b00      	cmp	r3, #0
 800a098:	d129      	bne.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a09e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0aa:	d10e      	bne.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a0ac:	4b12      	ldr	r3, [pc, #72]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a0b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0bc:	091a      	lsrs	r2, r3, #4
 800a0be:	4b10      	ldr	r3, [pc, #64]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	4a0d      	ldr	r2, [pc, #52]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0c4:	430b      	orrs	r3, r1
 800a0c6:	6113      	str	r3, [r2, #16]
 800a0c8:	e005      	b.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a0ca:	4b0b      	ldr	r3, [pc, #44]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0cc:	691b      	ldr	r3, [r3, #16]
 800a0ce:	4a0a      	ldr	r2, [pc, #40]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a0d4:	6113      	str	r3, [r2, #16]
 800a0d6:	4b08      	ldr	r3, [pc, #32]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a0da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0e6:	4a04      	ldr	r2, [pc, #16]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0e8:	430b      	orrs	r3, r1
 800a0ea:	6713      	str	r3, [r2, #112]	; 0x70
 800a0ec:	e00e      	b.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a0ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800a0f6:	e009      	b.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a0f8:	58024400 	.word	0x58024400
 800a0fc:	58024800 	.word	0x58024800
 800a100:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a104:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a108:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a10c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a114:	f002 0301 	and.w	r3, r2, #1
 800a118:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a11c:	2300      	movs	r3, #0
 800a11e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a122:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a126:	460b      	mov	r3, r1
 800a128:	4313      	orrs	r3, r2
 800a12a:	f000 8089 	beq.w	800a240 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a132:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a134:	2b28      	cmp	r3, #40	; 0x28
 800a136:	d86b      	bhi.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a138:	a201      	add	r2, pc, #4	; (adr r2, 800a140 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a13e:	bf00      	nop
 800a140:	0800a219 	.word	0x0800a219
 800a144:	0800a211 	.word	0x0800a211
 800a148:	0800a211 	.word	0x0800a211
 800a14c:	0800a211 	.word	0x0800a211
 800a150:	0800a211 	.word	0x0800a211
 800a154:	0800a211 	.word	0x0800a211
 800a158:	0800a211 	.word	0x0800a211
 800a15c:	0800a211 	.word	0x0800a211
 800a160:	0800a1e5 	.word	0x0800a1e5
 800a164:	0800a211 	.word	0x0800a211
 800a168:	0800a211 	.word	0x0800a211
 800a16c:	0800a211 	.word	0x0800a211
 800a170:	0800a211 	.word	0x0800a211
 800a174:	0800a211 	.word	0x0800a211
 800a178:	0800a211 	.word	0x0800a211
 800a17c:	0800a211 	.word	0x0800a211
 800a180:	0800a1fb 	.word	0x0800a1fb
 800a184:	0800a211 	.word	0x0800a211
 800a188:	0800a211 	.word	0x0800a211
 800a18c:	0800a211 	.word	0x0800a211
 800a190:	0800a211 	.word	0x0800a211
 800a194:	0800a211 	.word	0x0800a211
 800a198:	0800a211 	.word	0x0800a211
 800a19c:	0800a211 	.word	0x0800a211
 800a1a0:	0800a219 	.word	0x0800a219
 800a1a4:	0800a211 	.word	0x0800a211
 800a1a8:	0800a211 	.word	0x0800a211
 800a1ac:	0800a211 	.word	0x0800a211
 800a1b0:	0800a211 	.word	0x0800a211
 800a1b4:	0800a211 	.word	0x0800a211
 800a1b8:	0800a211 	.word	0x0800a211
 800a1bc:	0800a211 	.word	0x0800a211
 800a1c0:	0800a219 	.word	0x0800a219
 800a1c4:	0800a211 	.word	0x0800a211
 800a1c8:	0800a211 	.word	0x0800a211
 800a1cc:	0800a211 	.word	0x0800a211
 800a1d0:	0800a211 	.word	0x0800a211
 800a1d4:	0800a211 	.word	0x0800a211
 800a1d8:	0800a211 	.word	0x0800a211
 800a1dc:	0800a211 	.word	0x0800a211
 800a1e0:	0800a219 	.word	0x0800a219
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1e8:	3308      	adds	r3, #8
 800a1ea:	2101      	movs	r1, #1
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f000 ffc3 	bl	800b178 <RCCEx_PLL2_Config>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a1f8:	e00f      	b.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1fe:	3328      	adds	r3, #40	; 0x28
 800a200:	2101      	movs	r1, #1
 800a202:	4618      	mov	r0, r3
 800a204:	f001 f86a 	bl	800b2dc <RCCEx_PLL3_Config>
 800a208:	4603      	mov	r3, r0
 800a20a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a20e:	e004      	b.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a210:	2301      	movs	r3, #1
 800a212:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a216:	e000      	b.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a21a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d10a      	bne.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a222:	4bbf      	ldr	r3, [pc, #764]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a226:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a22a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a22e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a230:	4abb      	ldr	r2, [pc, #748]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a232:	430b      	orrs	r3, r1
 800a234:	6553      	str	r3, [r2, #84]	; 0x54
 800a236:	e003      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a238:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a23c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a248:	f002 0302 	and.w	r3, r2, #2
 800a24c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a250:	2300      	movs	r3, #0
 800a252:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a256:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a25a:	460b      	mov	r3, r1
 800a25c:	4313      	orrs	r3, r2
 800a25e:	d041      	beq.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a266:	2b05      	cmp	r3, #5
 800a268:	d824      	bhi.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a26a:	a201      	add	r2, pc, #4	; (adr r2, 800a270 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a270:	0800a2bd 	.word	0x0800a2bd
 800a274:	0800a289 	.word	0x0800a289
 800a278:	0800a29f 	.word	0x0800a29f
 800a27c:	0800a2bd 	.word	0x0800a2bd
 800a280:	0800a2bd 	.word	0x0800a2bd
 800a284:	0800a2bd 	.word	0x0800a2bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a28c:	3308      	adds	r3, #8
 800a28e:	2101      	movs	r1, #1
 800a290:	4618      	mov	r0, r3
 800a292:	f000 ff71 	bl	800b178 <RCCEx_PLL2_Config>
 800a296:	4603      	mov	r3, r0
 800a298:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a29c:	e00f      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a29e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2a2:	3328      	adds	r3, #40	; 0x28
 800a2a4:	2101      	movs	r1, #1
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f001 f818 	bl	800b2dc <RCCEx_PLL3_Config>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a2b2:	e004      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a2ba:	e000      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a2bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d10a      	bne.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a2c6:	4b96      	ldr	r3, [pc, #600]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a2c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ca:	f023 0107 	bic.w	r1, r3, #7
 800a2ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2d4:	4a92      	ldr	r2, [pc, #584]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a2d6:	430b      	orrs	r3, r1
 800a2d8:	6553      	str	r3, [r2, #84]	; 0x54
 800a2da:	e003      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a2e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ec:	f002 0304 	and.w	r3, r2, #4
 800a2f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a2fa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a2fe:	460b      	mov	r3, r1
 800a300:	4313      	orrs	r3, r2
 800a302:	d044      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a308:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a30c:	2b05      	cmp	r3, #5
 800a30e:	d825      	bhi.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a310:	a201      	add	r2, pc, #4	; (adr r2, 800a318 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a316:	bf00      	nop
 800a318:	0800a365 	.word	0x0800a365
 800a31c:	0800a331 	.word	0x0800a331
 800a320:	0800a347 	.word	0x0800a347
 800a324:	0800a365 	.word	0x0800a365
 800a328:	0800a365 	.word	0x0800a365
 800a32c:	0800a365 	.word	0x0800a365
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a334:	3308      	adds	r3, #8
 800a336:	2101      	movs	r1, #1
 800a338:	4618      	mov	r0, r3
 800a33a:	f000 ff1d 	bl	800b178 <RCCEx_PLL2_Config>
 800a33e:	4603      	mov	r3, r0
 800a340:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a344:	e00f      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a34a:	3328      	adds	r3, #40	; 0x28
 800a34c:	2101      	movs	r1, #1
 800a34e:	4618      	mov	r0, r3
 800a350:	f000 ffc4 	bl	800b2dc <RCCEx_PLL3_Config>
 800a354:	4603      	mov	r3, r0
 800a356:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a35a:	e004      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a362:	e000      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a364:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d10b      	bne.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a36e:	4b6c      	ldr	r3, [pc, #432]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a372:	f023 0107 	bic.w	r1, r3, #7
 800a376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a37a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a37e:	4a68      	ldr	r2, [pc, #416]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a380:	430b      	orrs	r3, r1
 800a382:	6593      	str	r3, [r2, #88]	; 0x58
 800a384:	e003      	b.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a386:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a38a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a38e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a396:	f002 0320 	and.w	r3, r2, #32
 800a39a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a39e:	2300      	movs	r3, #0
 800a3a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a3a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	d055      	beq.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a3ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3ba:	d033      	beq.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a3bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3c0:	d82c      	bhi.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a3c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3c6:	d02f      	beq.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a3c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3cc:	d826      	bhi.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a3ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a3d2:	d02b      	beq.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a3d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a3d8:	d820      	bhi.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a3da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3de:	d012      	beq.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a3e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3e4:	d81a      	bhi.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d022      	beq.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a3ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3ee:	d115      	bne.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a3f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3f4:	3308      	adds	r3, #8
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f000 febd 	bl	800b178 <RCCEx_PLL2_Config>
 800a3fe:	4603      	mov	r3, r0
 800a400:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a404:	e015      	b.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a40a:	3328      	adds	r3, #40	; 0x28
 800a40c:	2102      	movs	r1, #2
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 ff64 	bl	800b2dc <RCCEx_PLL3_Config>
 800a414:	4603      	mov	r3, r0
 800a416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a41a:	e00a      	b.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a422:	e006      	b.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a424:	bf00      	nop
 800a426:	e004      	b.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a428:	bf00      	nop
 800a42a:	e002      	b.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a42c:	bf00      	nop
 800a42e:	e000      	b.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a430:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a436:	2b00      	cmp	r3, #0
 800a438:	d10b      	bne.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a43a:	4b39      	ldr	r3, [pc, #228]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a43c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a43e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a44a:	4a35      	ldr	r2, [pc, #212]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a44c:	430b      	orrs	r3, r1
 800a44e:	6553      	str	r3, [r2, #84]	; 0x54
 800a450:	e003      	b.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a452:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a456:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a462:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a466:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a46a:	2300      	movs	r3, #0
 800a46c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a470:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a474:	460b      	mov	r3, r1
 800a476:	4313      	orrs	r3, r2
 800a478:	d058      	beq.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a47a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a47e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a482:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a486:	d033      	beq.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a488:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a48c:	d82c      	bhi.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a48e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a492:	d02f      	beq.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a498:	d826      	bhi.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a49a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a49e:	d02b      	beq.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a4a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4a4:	d820      	bhi.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a4a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4aa:	d012      	beq.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a4ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4b0:	d81a      	bhi.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d022      	beq.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a4b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4ba:	d115      	bne.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4c0:	3308      	adds	r3, #8
 800a4c2:	2100      	movs	r1, #0
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f000 fe57 	bl	800b178 <RCCEx_PLL2_Config>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a4d0:	e015      	b.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a4d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4d6:	3328      	adds	r3, #40	; 0x28
 800a4d8:	2102      	movs	r1, #2
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f000 fefe 	bl	800b2dc <RCCEx_PLL3_Config>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a4e6:	e00a      	b.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a4ee:	e006      	b.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a4f0:	bf00      	nop
 800a4f2:	e004      	b.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a4f4:	bf00      	nop
 800a4f6:	e002      	b.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a4f8:	bf00      	nop
 800a4fa:	e000      	b.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a4fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a502:	2b00      	cmp	r3, #0
 800a504:	d10e      	bne.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a506:	4b06      	ldr	r3, [pc, #24]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a50a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a50e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a512:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a516:	4a02      	ldr	r2, [pc, #8]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a518:	430b      	orrs	r3, r1
 800a51a:	6593      	str	r3, [r2, #88]	; 0x58
 800a51c:	e006      	b.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a51e:	bf00      	nop
 800a520:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a524:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a528:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a52c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a534:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a53c:	2300      	movs	r3, #0
 800a53e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a542:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a546:	460b      	mov	r3, r1
 800a548:	4313      	orrs	r3, r2
 800a54a:	d055      	beq.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a54c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a550:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a554:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a558:	d033      	beq.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a55a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a55e:	d82c      	bhi.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a564:	d02f      	beq.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a56a:	d826      	bhi.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a56c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a570:	d02b      	beq.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a572:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a576:	d820      	bhi.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a57c:	d012      	beq.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a57e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a582:	d81a      	bhi.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a584:	2b00      	cmp	r3, #0
 800a586:	d022      	beq.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a58c:	d115      	bne.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a58e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a592:	3308      	adds	r3, #8
 800a594:	2100      	movs	r1, #0
 800a596:	4618      	mov	r0, r3
 800a598:	f000 fdee 	bl	800b178 <RCCEx_PLL2_Config>
 800a59c:	4603      	mov	r3, r0
 800a59e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a5a2:	e015      	b.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a5a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5a8:	3328      	adds	r3, #40	; 0x28
 800a5aa:	2102      	movs	r1, #2
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f000 fe95 	bl	800b2dc <RCCEx_PLL3_Config>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a5b8:	e00a      	b.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a5c0:	e006      	b.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a5c2:	bf00      	nop
 800a5c4:	e004      	b.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a5c6:	bf00      	nop
 800a5c8:	e002      	b.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a5ca:	bf00      	nop
 800a5cc:	e000      	b.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a5ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d10b      	bne.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a5d8:	4ba1      	ldr	r3, [pc, #644]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5dc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a5e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a5e8:	4a9d      	ldr	r2, [pc, #628]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5ea:	430b      	orrs	r3, r1
 800a5ec:	6593      	str	r3, [r2, #88]	; 0x58
 800a5ee:	e003      	b.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a5f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a600:	f002 0308 	and.w	r3, r2, #8
 800a604:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a608:	2300      	movs	r3, #0
 800a60a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a60e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a612:	460b      	mov	r3, r1
 800a614:	4313      	orrs	r3, r2
 800a616:	d01e      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a61c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a624:	d10c      	bne.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a62a:	3328      	adds	r3, #40	; 0x28
 800a62c:	2102      	movs	r1, #2
 800a62e:	4618      	mov	r0, r3
 800a630:	f000 fe54 	bl	800b2dc <RCCEx_PLL3_Config>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d002      	beq.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a63a:	2301      	movs	r3, #1
 800a63c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a640:	4b87      	ldr	r3, [pc, #540]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a644:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a64c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a650:	4a83      	ldr	r2, [pc, #524]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a652:	430b      	orrs	r3, r1
 800a654:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65e:	f002 0310 	and.w	r3, r2, #16
 800a662:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a666:	2300      	movs	r3, #0
 800a668:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a66c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a670:	460b      	mov	r3, r1
 800a672:	4313      	orrs	r3, r2
 800a674:	d01e      	beq.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a67a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a67e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a682:	d10c      	bne.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a688:	3328      	adds	r3, #40	; 0x28
 800a68a:	2102      	movs	r1, #2
 800a68c:	4618      	mov	r0, r3
 800a68e:	f000 fe25 	bl	800b2dc <RCCEx_PLL3_Config>
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d002      	beq.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a69e:	4b70      	ldr	r3, [pc, #448]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a6a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6ae:	4a6c      	ldr	r2, [pc, #432]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6b0:	430b      	orrs	r3, r1
 800a6b2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a6b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6bc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a6c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a6ca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	d03e      	beq.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a6d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a6dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6e0:	d022      	beq.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a6e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6e6:	d81b      	bhi.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d003      	beq.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a6ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6f0:	d00b      	beq.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a6f2:	e015      	b.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6f8:	3308      	adds	r3, #8
 800a6fa:	2100      	movs	r1, #0
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f000 fd3b 	bl	800b178 <RCCEx_PLL2_Config>
 800a702:	4603      	mov	r3, r0
 800a704:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a708:	e00f      	b.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a70e:	3328      	adds	r3, #40	; 0x28
 800a710:	2102      	movs	r1, #2
 800a712:	4618      	mov	r0, r3
 800a714:	f000 fde2 	bl	800b2dc <RCCEx_PLL3_Config>
 800a718:	4603      	mov	r3, r0
 800a71a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a71e:	e004      	b.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a720:	2301      	movs	r3, #1
 800a722:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a726:	e000      	b.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a72a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10b      	bne.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a732:	4b4b      	ldr	r3, [pc, #300]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a736:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a73a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a73e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a742:	4a47      	ldr	r2, [pc, #284]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a744:	430b      	orrs	r3, r1
 800a746:	6593      	str	r3, [r2, #88]	; 0x58
 800a748:	e003      	b.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a74a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a74e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a75e:	67bb      	str	r3, [r7, #120]	; 0x78
 800a760:	2300      	movs	r3, #0
 800a762:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a764:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a768:	460b      	mov	r3, r1
 800a76a:	4313      	orrs	r3, r2
 800a76c:	d03b      	beq.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a76e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a776:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a77a:	d01f      	beq.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a77c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a780:	d818      	bhi.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a786:	d003      	beq.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a788:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a78c:	d007      	beq.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a78e:	e011      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a790:	4b33      	ldr	r3, [pc, #204]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a794:	4a32      	ldr	r2, [pc, #200]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a79a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a79c:	e00f      	b.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a79e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7a2:	3328      	adds	r3, #40	; 0x28
 800a7a4:	2101      	movs	r1, #1
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f000 fd98 	bl	800b2dc <RCCEx_PLL3_Config>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a7b2:	e004      	b.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a7ba:	e000      	b.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a7bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10b      	bne.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a7c6:	4b26      	ldr	r3, [pc, #152]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a7ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7d6:	4a22      	ldr	r2, [pc, #136]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7d8:	430b      	orrs	r3, r1
 800a7da:	6553      	str	r3, [r2, #84]	; 0x54
 800a7dc:	e003      	b.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a7e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ee:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a7f2:	673b      	str	r3, [r7, #112]	; 0x70
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	677b      	str	r3, [r7, #116]	; 0x74
 800a7f8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	4313      	orrs	r3, r2
 800a800:	d034      	beq.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d003      	beq.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a80c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a810:	d007      	beq.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a812:	e011      	b.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a814:	4b12      	ldr	r3, [pc, #72]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a818:	4a11      	ldr	r2, [pc, #68]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a81a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a81e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a820:	e00e      	b.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a826:	3308      	adds	r3, #8
 800a828:	2102      	movs	r1, #2
 800a82a:	4618      	mov	r0, r3
 800a82c:	f000 fca4 	bl	800b178 <RCCEx_PLL2_Config>
 800a830:	4603      	mov	r3, r0
 800a832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a836:	e003      	b.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a83e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a840:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a844:	2b00      	cmp	r3, #0
 800a846:	d10d      	bne.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a848:	4b05      	ldr	r3, [pc, #20]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a84a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a84c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a856:	4a02      	ldr	r2, [pc, #8]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a858:	430b      	orrs	r3, r1
 800a85a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a85c:	e006      	b.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a85e:	bf00      	nop
 800a860:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a864:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a868:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a86c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a874:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a878:	66bb      	str	r3, [r7, #104]	; 0x68
 800a87a:	2300      	movs	r3, #0
 800a87c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a87e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a882:	460b      	mov	r3, r1
 800a884:	4313      	orrs	r3, r2
 800a886:	d00c      	beq.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a88c:	3328      	adds	r3, #40	; 0x28
 800a88e:	2102      	movs	r1, #2
 800a890:	4618      	mov	r0, r3
 800a892:	f000 fd23 	bl	800b2dc <RCCEx_PLL3_Config>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d002      	beq.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a8a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8aa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a8ae:	663b      	str	r3, [r7, #96]	; 0x60
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	667b      	str	r3, [r7, #100]	; 0x64
 800a8b4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	d038      	beq.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a8be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8ca:	d018      	beq.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a8cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8d0:	d811      	bhi.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a8d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8d6:	d014      	beq.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a8d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8dc:	d80b      	bhi.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d011      	beq.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a8e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8e6:	d106      	bne.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8e8:	4bc3      	ldr	r3, [pc, #780]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ec:	4ac2      	ldr	r2, [pc, #776]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a8f4:	e008      	b.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a8fc:	e004      	b.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a8fe:	bf00      	nop
 800a900:	e002      	b.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a902:	bf00      	nop
 800a904:	e000      	b.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a906:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a908:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d10b      	bne.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a910:	4bb9      	ldr	r3, [pc, #740]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a914:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a91c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a920:	4ab5      	ldr	r2, [pc, #724]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a922:	430b      	orrs	r3, r1
 800a924:	6553      	str	r3, [r2, #84]	; 0x54
 800a926:	e003      	b.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a928:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a92c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a938:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a93c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a93e:	2300      	movs	r3, #0
 800a940:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a942:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a946:	460b      	mov	r3, r1
 800a948:	4313      	orrs	r3, r2
 800a94a:	d009      	beq.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a94c:	4baa      	ldr	r3, [pc, #680]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a94e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a950:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a95a:	4aa7      	ldr	r2, [pc, #668]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a95c:	430b      	orrs	r3, r1
 800a95e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a968:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a96c:	653b      	str	r3, [r7, #80]	; 0x50
 800a96e:	2300      	movs	r3, #0
 800a970:	657b      	str	r3, [r7, #84]	; 0x54
 800a972:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a976:	460b      	mov	r3, r1
 800a978:	4313      	orrs	r3, r2
 800a97a:	d00a      	beq.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a97c:	4b9e      	ldr	r3, [pc, #632]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a988:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a98c:	4a9a      	ldr	r2, [pc, #616]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a98e:	430b      	orrs	r3, r1
 800a990:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a99e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9a4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	d009      	beq.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a9ae:	4b92      	ldr	r3, [pc, #584]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9b2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a9b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9bc:	4a8e      	ldr	r2, [pc, #568]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9be:	430b      	orrs	r3, r1
 800a9c0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a9c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ca:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a9ce:	643b      	str	r3, [r7, #64]	; 0x40
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	647b      	str	r3, [r7, #68]	; 0x44
 800a9d4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a9d8:	460b      	mov	r3, r1
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	d00e      	beq.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a9de:	4b86      	ldr	r3, [pc, #536]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	4a85      	ldr	r2, [pc, #532]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a9e8:	6113      	str	r3, [r2, #16]
 800a9ea:	4b83      	ldr	r3, [pc, #524]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9ec:	6919      	ldr	r1, [r3, #16]
 800a9ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a9f6:	4a80      	ldr	r2, [pc, #512]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9f8:	430b      	orrs	r3, r1
 800a9fa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a9fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa04:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800aa08:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa0e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800aa12:	460b      	mov	r3, r1
 800aa14:	4313      	orrs	r3, r2
 800aa16:	d009      	beq.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800aa18:	4b77      	ldr	r3, [pc, #476]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa1c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800aa20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa26:	4a74      	ldr	r2, [pc, #464]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa28:	430b      	orrs	r3, r1
 800aa2a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aa2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa34:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800aa38:	633b      	str	r3, [r7, #48]	; 0x30
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	637b      	str	r3, [r7, #52]	; 0x34
 800aa3e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800aa42:	460b      	mov	r3, r1
 800aa44:	4313      	orrs	r3, r2
 800aa46:	d00a      	beq.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aa48:	4b6b      	ldr	r3, [pc, #428]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa4c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800aa50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa58:	4a67      	ldr	r2, [pc, #412]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa5a:	430b      	orrs	r3, r1
 800aa5c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800aa5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa66:	2100      	movs	r1, #0
 800aa68:	62b9      	str	r1, [r7, #40]	; 0x28
 800aa6a:	f003 0301 	and.w	r3, r3, #1
 800aa6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa70:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800aa74:	460b      	mov	r3, r1
 800aa76:	4313      	orrs	r3, r2
 800aa78:	d011      	beq.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa7e:	3308      	adds	r3, #8
 800aa80:	2100      	movs	r1, #0
 800aa82:	4618      	mov	r0, r3
 800aa84:	f000 fb78 	bl	800b178 <RCCEx_PLL2_Config>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aa8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d003      	beq.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800aa9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	6239      	str	r1, [r7, #32]
 800aaaa:	f003 0302 	and.w	r3, r3, #2
 800aaae:	627b      	str	r3, [r7, #36]	; 0x24
 800aab0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800aab4:	460b      	mov	r3, r1
 800aab6:	4313      	orrs	r3, r2
 800aab8:	d011      	beq.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aaba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aabe:	3308      	adds	r3, #8
 800aac0:	2101      	movs	r1, #1
 800aac2:	4618      	mov	r0, r3
 800aac4:	f000 fb58 	bl	800b178 <RCCEx_PLL2_Config>
 800aac8:	4603      	mov	r3, r0
 800aaca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d003      	beq.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aad6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aada:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800aade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae6:	2100      	movs	r1, #0
 800aae8:	61b9      	str	r1, [r7, #24]
 800aaea:	f003 0304 	and.w	r3, r3, #4
 800aaee:	61fb      	str	r3, [r7, #28]
 800aaf0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	d011      	beq.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aafa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aafe:	3308      	adds	r3, #8
 800ab00:	2102      	movs	r1, #2
 800ab02:	4618      	mov	r0, r3
 800ab04:	f000 fb38 	bl	800b178 <RCCEx_PLL2_Config>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ab0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d003      	beq.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ab1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab26:	2100      	movs	r1, #0
 800ab28:	6139      	str	r1, [r7, #16]
 800ab2a:	f003 0308 	and.w	r3, r3, #8
 800ab2e:	617b      	str	r3, [r7, #20]
 800ab30:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ab34:	460b      	mov	r3, r1
 800ab36:	4313      	orrs	r3, r2
 800ab38:	d011      	beq.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab3e:	3328      	adds	r3, #40	; 0x28
 800ab40:	2100      	movs	r1, #0
 800ab42:	4618      	mov	r0, r3
 800ab44:	f000 fbca 	bl	800b2dc <RCCEx_PLL3_Config>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800ab4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d003      	beq.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ab5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab66:	2100      	movs	r1, #0
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	f003 0310 	and.w	r3, r3, #16
 800ab6e:	60fb      	str	r3, [r7, #12]
 800ab70:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ab74:	460b      	mov	r3, r1
 800ab76:	4313      	orrs	r3, r2
 800ab78:	d011      	beq.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab7e:	3328      	adds	r3, #40	; 0x28
 800ab80:	2101      	movs	r1, #1
 800ab82:	4618      	mov	r0, r3
 800ab84:	f000 fbaa 	bl	800b2dc <RCCEx_PLL3_Config>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ab8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d003      	beq.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ab9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba6:	2100      	movs	r1, #0
 800aba8:	6039      	str	r1, [r7, #0]
 800abaa:	f003 0320 	and.w	r3, r3, #32
 800abae:	607b      	str	r3, [r7, #4]
 800abb0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800abb4:	460b      	mov	r3, r1
 800abb6:	4313      	orrs	r3, r2
 800abb8:	d011      	beq.n	800abde <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800abba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abbe:	3328      	adds	r3, #40	; 0x28
 800abc0:	2102      	movs	r1, #2
 800abc2:	4618      	mov	r0, r3
 800abc4:	f000 fb8a 	bl	800b2dc <RCCEx_PLL3_Config>
 800abc8:	4603      	mov	r3, r0
 800abca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800abce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d003      	beq.n	800abde <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800abde:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d101      	bne.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800abe6:	2300      	movs	r3, #0
 800abe8:	e000      	b.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800abea:	2301      	movs	r3, #1
}
 800abec:	4618      	mov	r0, r3
 800abee:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800abf2:	46bd      	mov	sp, r7
 800abf4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800abf8:	58024400 	.word	0x58024400

0800abfc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ac00:	f7fe fd96 	bl	8009730 <HAL_RCC_GetHCLKFreq>
 800ac04:	4602      	mov	r2, r0
 800ac06:	4b06      	ldr	r3, [pc, #24]	; (800ac20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ac08:	6a1b      	ldr	r3, [r3, #32]
 800ac0a:	091b      	lsrs	r3, r3, #4
 800ac0c:	f003 0307 	and.w	r3, r3, #7
 800ac10:	4904      	ldr	r1, [pc, #16]	; (800ac24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ac12:	5ccb      	ldrb	r3, [r1, r3]
 800ac14:	f003 031f 	and.w	r3, r3, #31
 800ac18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	58024400 	.word	0x58024400
 800ac24:	0800ed4c 	.word	0x0800ed4c

0800ac28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b089      	sub	sp, #36	; 0x24
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac30:	4ba1      	ldr	r3, [pc, #644]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac34:	f003 0303 	and.w	r3, r3, #3
 800ac38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ac3a:	4b9f      	ldr	r3, [pc, #636]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3e:	0b1b      	lsrs	r3, r3, #12
 800ac40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ac46:	4b9c      	ldr	r3, [pc, #624]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4a:	091b      	lsrs	r3, r3, #4
 800ac4c:	f003 0301 	and.w	r3, r3, #1
 800ac50:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ac52:	4b99      	ldr	r3, [pc, #612]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac56:	08db      	lsrs	r3, r3, #3
 800ac58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac5c:	693a      	ldr	r2, [r7, #16]
 800ac5e:	fb02 f303 	mul.w	r3, r2, r3
 800ac62:	ee07 3a90 	vmov	s15, r3
 800ac66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f000 8111 	beq.w	800ae98 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	f000 8083 	beq.w	800ad84 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	f200 80a1 	bhi.w	800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d003      	beq.n	800ac94 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d056      	beq.n	800ad40 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ac92:	e099      	b.n	800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac94:	4b88      	ldr	r3, [pc, #544]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f003 0320 	and.w	r3, r3, #32
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d02d      	beq.n	800acfc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aca0:	4b85      	ldr	r3, [pc, #532]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	08db      	lsrs	r3, r3, #3
 800aca6:	f003 0303 	and.w	r3, r3, #3
 800acaa:	4a84      	ldr	r2, [pc, #528]	; (800aebc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800acac:	fa22 f303 	lsr.w	r3, r2, r3
 800acb0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	ee07 3a90 	vmov	s15, r3
 800acb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	ee07 3a90 	vmov	s15, r3
 800acc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acca:	4b7b      	ldr	r3, [pc, #492]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800accc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acd2:	ee07 3a90 	vmov	s15, r3
 800acd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acda:	ed97 6a03 	vldr	s12, [r7, #12]
 800acde:	eddf 5a78 	vldr	s11, [pc, #480]	; 800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ace2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ace6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acf6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800acfa:	e087      	b.n	800ae0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	ee07 3a90 	vmov	s15, r3
 800ad02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800aec4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ad0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad0e:	4b6a      	ldr	r3, [pc, #424]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad16:	ee07 3a90 	vmov	s15, r3
 800ad1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad22:	eddf 5a67 	vldr	s11, [pc, #412]	; 800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad3e:	e065      	b.n	800ae0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	ee07 3a90 	vmov	s15, r3
 800ad46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800aec8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ad4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad52:	4b59      	ldr	r3, [pc, #356]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad5a:	ee07 3a90 	vmov	s15, r3
 800ad5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad66:	eddf 5a56 	vldr	s11, [pc, #344]	; 800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad82:	e043      	b.n	800ae0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	ee07 3a90 	vmov	s15, r3
 800ad8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800aecc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ad92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad96:	4b48      	ldr	r3, [pc, #288]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad9e:	ee07 3a90 	vmov	s15, r3
 800ada2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ada6:	ed97 6a03 	vldr	s12, [r7, #12]
 800adaa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800adae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adc6:	e021      	b.n	800ae0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	ee07 3a90 	vmov	s15, r3
 800adce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800add2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800aec8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800add6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adda:	4b37      	ldr	r3, [pc, #220]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800addc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ade2:	ee07 3a90 	vmov	s15, r3
 800ade6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adea:	ed97 6a03 	vldr	s12, [r7, #12]
 800adee:	eddf 5a34 	vldr	s11, [pc, #208]	; 800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800adf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae0a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ae0c:	4b2a      	ldr	r3, [pc, #168]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae10:	0a5b      	lsrs	r3, r3, #9
 800ae12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae16:	ee07 3a90 	vmov	s15, r3
 800ae1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae22:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae26:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae32:	ee17 2a90 	vmov	r2, s15
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ae3a:	4b1f      	ldr	r3, [pc, #124]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae3e:	0c1b      	lsrs	r3, r3, #16
 800ae40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae44:	ee07 3a90 	vmov	s15, r3
 800ae48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae50:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae54:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae60:	ee17 2a90 	vmov	r2, s15
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ae68:	4b13      	ldr	r3, [pc, #76]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae6c:	0e1b      	lsrs	r3, r3, #24
 800ae6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae72:	ee07 3a90 	vmov	s15, r3
 800ae76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae82:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae8e:	ee17 2a90 	vmov	r2, s15
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ae96:	e008      	b.n	800aeaa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	609a      	str	r2, [r3, #8]
}
 800aeaa:	bf00      	nop
 800aeac:	3724      	adds	r7, #36	; 0x24
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop
 800aeb8:	58024400 	.word	0x58024400
 800aebc:	03d09000 	.word	0x03d09000
 800aec0:	46000000 	.word	0x46000000
 800aec4:	4c742400 	.word	0x4c742400
 800aec8:	4a742400 	.word	0x4a742400
 800aecc:	4af42400 	.word	0x4af42400

0800aed0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b089      	sub	sp, #36	; 0x24
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aed8:	4ba1      	ldr	r3, [pc, #644]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aedc:	f003 0303 	and.w	r3, r3, #3
 800aee0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800aee2:	4b9f      	ldr	r3, [pc, #636]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aee6:	0d1b      	lsrs	r3, r3, #20
 800aee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aeec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800aeee:	4b9c      	ldr	r3, [pc, #624]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef2:	0a1b      	lsrs	r3, r3, #8
 800aef4:	f003 0301 	and.w	r3, r3, #1
 800aef8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800aefa:	4b99      	ldr	r3, [pc, #612]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aefc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aefe:	08db      	lsrs	r3, r3, #3
 800af00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af04:	693a      	ldr	r2, [r7, #16]
 800af06:	fb02 f303 	mul.w	r3, r2, r3
 800af0a:	ee07 3a90 	vmov	s15, r3
 800af0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f000 8111 	beq.w	800b140 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	2b02      	cmp	r3, #2
 800af22:	f000 8083 	beq.w	800b02c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	2b02      	cmp	r3, #2
 800af2a:	f200 80a1 	bhi.w	800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800af2e:	69bb      	ldr	r3, [r7, #24]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d003      	beq.n	800af3c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800af34:	69bb      	ldr	r3, [r7, #24]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d056      	beq.n	800afe8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800af3a:	e099      	b.n	800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af3c:	4b88      	ldr	r3, [pc, #544]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f003 0320 	and.w	r3, r3, #32
 800af44:	2b00      	cmp	r3, #0
 800af46:	d02d      	beq.n	800afa4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af48:	4b85      	ldr	r3, [pc, #532]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	08db      	lsrs	r3, r3, #3
 800af4e:	f003 0303 	and.w	r3, r3, #3
 800af52:	4a84      	ldr	r2, [pc, #528]	; (800b164 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800af54:	fa22 f303 	lsr.w	r3, r2, r3
 800af58:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	ee07 3a90 	vmov	s15, r3
 800af60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	ee07 3a90 	vmov	s15, r3
 800af6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af72:	4b7b      	ldr	r3, [pc, #492]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af7a:	ee07 3a90 	vmov	s15, r3
 800af7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af82:	ed97 6a03 	vldr	s12, [r7, #12]
 800af86:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800afa2:	e087      	b.n	800b0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	ee07 3a90 	vmov	s15, r3
 800afaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b16c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800afb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afb6:	4b6a      	ldr	r3, [pc, #424]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afbe:	ee07 3a90 	vmov	s15, r3
 800afc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800afca:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afe2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afe6:	e065      	b.n	800b0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	ee07 3a90 	vmov	s15, r3
 800afee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aff2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b170 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800affa:	4b59      	ldr	r3, [pc, #356]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800affc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b002:	ee07 3a90 	vmov	s15, r3
 800b006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b00a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b00e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b01a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b01e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b022:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b026:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b02a:	e043      	b.n	800b0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	ee07 3a90 	vmov	s15, r3
 800b032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b036:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b174 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b03a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b03e:	4b48      	ldr	r3, [pc, #288]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b046:	ee07 3a90 	vmov	s15, r3
 800b04a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b04e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b052:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b05a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b05e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b06a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b06e:	e021      	b.n	800b0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	ee07 3a90 	vmov	s15, r3
 800b076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b07a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b170 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b07e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b082:	4b37      	ldr	r3, [pc, #220]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b08a:	ee07 3a90 	vmov	s15, r3
 800b08e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b092:	ed97 6a03 	vldr	s12, [r7, #12]
 800b096:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b09a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b09e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b0b4:	4b2a      	ldr	r3, [pc, #168]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b8:	0a5b      	lsrs	r3, r3, #9
 800b0ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0be:	ee07 3a90 	vmov	s15, r3
 800b0c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0da:	ee17 2a90 	vmov	r2, s15
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b0e2:	4b1f      	ldr	r3, [pc, #124]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e6:	0c1b      	lsrs	r3, r3, #16
 800b0e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0ec:	ee07 3a90 	vmov	s15, r3
 800b0f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b108:	ee17 2a90 	vmov	r2, s15
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b110:	4b13      	ldr	r3, [pc, #76]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b114:	0e1b      	lsrs	r3, r3, #24
 800b116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b11a:	ee07 3a90 	vmov	s15, r3
 800b11e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b126:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b12a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b12e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b136:	ee17 2a90 	vmov	r2, s15
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b13e:	e008      	b.n	800b152 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	609a      	str	r2, [r3, #8]
}
 800b152:	bf00      	nop
 800b154:	3724      	adds	r7, #36	; 0x24
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	58024400 	.word	0x58024400
 800b164:	03d09000 	.word	0x03d09000
 800b168:	46000000 	.word	0x46000000
 800b16c:	4c742400 	.word	0x4c742400
 800b170:	4a742400 	.word	0x4a742400
 800b174:	4af42400 	.word	0x4af42400

0800b178 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b182:	2300      	movs	r3, #0
 800b184:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b186:	4b53      	ldr	r3, [pc, #332]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b18a:	f003 0303 	and.w	r3, r3, #3
 800b18e:	2b03      	cmp	r3, #3
 800b190:	d101      	bne.n	800b196 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b192:	2301      	movs	r3, #1
 800b194:	e099      	b.n	800b2ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b196:	4b4f      	ldr	r3, [pc, #316]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a4e      	ldr	r2, [pc, #312]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b19c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b1a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1a2:	f7f8 ff51 	bl	8004048 <HAL_GetTick>
 800b1a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b1a8:	e008      	b.n	800b1bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b1aa:	f7f8 ff4d 	bl	8004048 <HAL_GetTick>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	1ad3      	subs	r3, r2, r3
 800b1b4:	2b02      	cmp	r3, #2
 800b1b6:	d901      	bls.n	800b1bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b1b8:	2303      	movs	r3, #3
 800b1ba:	e086      	b.n	800b2ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b1bc:	4b45      	ldr	r3, [pc, #276]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d1f0      	bne.n	800b1aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b1c8:	4b42      	ldr	r3, [pc, #264]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	031b      	lsls	r3, r3, #12
 800b1d6:	493f      	ldr	r1, [pc, #252]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	628b      	str	r3, [r1, #40]	; 0x28
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	3b01      	subs	r3, #1
 800b1e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	025b      	lsls	r3, r3, #9
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	431a      	orrs	r2, r3
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	041b      	lsls	r3, r3, #16
 800b1fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b1fe:	431a      	orrs	r2, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	691b      	ldr	r3, [r3, #16]
 800b204:	3b01      	subs	r3, #1
 800b206:	061b      	lsls	r3, r3, #24
 800b208:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b20c:	4931      	ldr	r1, [pc, #196]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b20e:	4313      	orrs	r3, r2
 800b210:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b212:	4b30      	ldr	r3, [pc, #192]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b216:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	695b      	ldr	r3, [r3, #20]
 800b21e:	492d      	ldr	r1, [pc, #180]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b220:	4313      	orrs	r3, r2
 800b222:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b224:	4b2b      	ldr	r3, [pc, #172]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b228:	f023 0220 	bic.w	r2, r3, #32
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	699b      	ldr	r3, [r3, #24]
 800b230:	4928      	ldr	r1, [pc, #160]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b232:	4313      	orrs	r3, r2
 800b234:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b236:	4b27      	ldr	r3, [pc, #156]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23a:	4a26      	ldr	r2, [pc, #152]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b23c:	f023 0310 	bic.w	r3, r3, #16
 800b240:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b242:	4b24      	ldr	r3, [pc, #144]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b244:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b246:	4b24      	ldr	r3, [pc, #144]	; (800b2d8 <RCCEx_PLL2_Config+0x160>)
 800b248:	4013      	ands	r3, r2
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	69d2      	ldr	r2, [r2, #28]
 800b24e:	00d2      	lsls	r2, r2, #3
 800b250:	4920      	ldr	r1, [pc, #128]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b252:	4313      	orrs	r3, r2
 800b254:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b256:	4b1f      	ldr	r3, [pc, #124]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b25a:	4a1e      	ldr	r2, [pc, #120]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b25c:	f043 0310 	orr.w	r3, r3, #16
 800b260:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d106      	bne.n	800b276 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b268:	4b1a      	ldr	r3, [pc, #104]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26c:	4a19      	ldr	r2, [pc, #100]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b26e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b272:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b274:	e00f      	b.n	800b296 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d106      	bne.n	800b28a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b27c:	4b15      	ldr	r3, [pc, #84]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b280:	4a14      	ldr	r2, [pc, #80]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b286:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b288:	e005      	b.n	800b296 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b28a:	4b12      	ldr	r3, [pc, #72]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b28e:	4a11      	ldr	r2, [pc, #68]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b290:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b294:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b296:	4b0f      	ldr	r3, [pc, #60]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4a0e      	ldr	r2, [pc, #56]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b29c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b2a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2a2:	f7f8 fed1 	bl	8004048 <HAL_GetTick>
 800b2a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b2a8:	e008      	b.n	800b2bc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b2aa:	f7f8 fecd 	bl	8004048 <HAL_GetTick>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	1ad3      	subs	r3, r2, r3
 800b2b4:	2b02      	cmp	r3, #2
 800b2b6:	d901      	bls.n	800b2bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b2b8:	2303      	movs	r3, #3
 800b2ba:	e006      	b.n	800b2ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b2bc:	4b05      	ldr	r3, [pc, #20]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d0f0      	beq.n	800b2aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	58024400 	.word	0x58024400
 800b2d8:	ffff0007 	.word	0xffff0007

0800b2dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b2ea:	4b53      	ldr	r3, [pc, #332]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ee:	f003 0303 	and.w	r3, r3, #3
 800b2f2:	2b03      	cmp	r3, #3
 800b2f4:	d101      	bne.n	800b2fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e099      	b.n	800b42e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b2fa:	4b4f      	ldr	r3, [pc, #316]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a4e      	ldr	r2, [pc, #312]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b304:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b306:	f7f8 fe9f 	bl	8004048 <HAL_GetTick>
 800b30a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b30c:	e008      	b.n	800b320 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b30e:	f7f8 fe9b 	bl	8004048 <HAL_GetTick>
 800b312:	4602      	mov	r2, r0
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	1ad3      	subs	r3, r2, r3
 800b318:	2b02      	cmp	r3, #2
 800b31a:	d901      	bls.n	800b320 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b31c:	2303      	movs	r3, #3
 800b31e:	e086      	b.n	800b42e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b320:	4b45      	ldr	r3, [pc, #276]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d1f0      	bne.n	800b30e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b32c:	4b42      	ldr	r3, [pc, #264]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b32e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b330:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	051b      	lsls	r3, r3, #20
 800b33a:	493f      	ldr	r1, [pc, #252]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b33c:	4313      	orrs	r3, r2
 800b33e:	628b      	str	r3, [r1, #40]	; 0x28
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	3b01      	subs	r3, #1
 800b346:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	3b01      	subs	r3, #1
 800b350:	025b      	lsls	r3, r3, #9
 800b352:	b29b      	uxth	r3, r3
 800b354:	431a      	orrs	r2, r3
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	68db      	ldr	r3, [r3, #12]
 800b35a:	3b01      	subs	r3, #1
 800b35c:	041b      	lsls	r3, r3, #16
 800b35e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b362:	431a      	orrs	r2, r3
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	691b      	ldr	r3, [r3, #16]
 800b368:	3b01      	subs	r3, #1
 800b36a:	061b      	lsls	r3, r3, #24
 800b36c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b370:	4931      	ldr	r1, [pc, #196]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b372:	4313      	orrs	r3, r2
 800b374:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b376:	4b30      	ldr	r3, [pc, #192]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	695b      	ldr	r3, [r3, #20]
 800b382:	492d      	ldr	r1, [pc, #180]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b384:	4313      	orrs	r3, r2
 800b386:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b388:	4b2b      	ldr	r3, [pc, #172]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b38c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	699b      	ldr	r3, [r3, #24]
 800b394:	4928      	ldr	r1, [pc, #160]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b396:	4313      	orrs	r3, r2
 800b398:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b39a:	4b27      	ldr	r3, [pc, #156]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b39e:	4a26      	ldr	r2, [pc, #152]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b3a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b3a6:	4b24      	ldr	r3, [pc, #144]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b3a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3aa:	4b24      	ldr	r3, [pc, #144]	; (800b43c <RCCEx_PLL3_Config+0x160>)
 800b3ac:	4013      	ands	r3, r2
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	69d2      	ldr	r2, [r2, #28]
 800b3b2:	00d2      	lsls	r2, r2, #3
 800b3b4:	4920      	ldr	r1, [pc, #128]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b3ba:	4b1f      	ldr	r3, [pc, #124]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3be:	4a1e      	ldr	r2, [pc, #120]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b3c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d106      	bne.n	800b3da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b3cc:	4b1a      	ldr	r3, [pc, #104]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d0:	4a19      	ldr	r2, [pc, #100]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b3d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b3d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b3d8:	e00f      	b.n	800b3fa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d106      	bne.n	800b3ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b3e0:	4b15      	ldr	r3, [pc, #84]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e4:	4a14      	ldr	r2, [pc, #80]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b3e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b3ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b3ec:	e005      	b.n	800b3fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b3ee:	4b12      	ldr	r3, [pc, #72]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f2:	4a11      	ldr	r2, [pc, #68]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b3f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b3f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b3fa:	4b0f      	ldr	r3, [pc, #60]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4a0e      	ldr	r2, [pc, #56]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b404:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b406:	f7f8 fe1f 	bl	8004048 <HAL_GetTick>
 800b40a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b40c:	e008      	b.n	800b420 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b40e:	f7f8 fe1b 	bl	8004048 <HAL_GetTick>
 800b412:	4602      	mov	r2, r0
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	1ad3      	subs	r3, r2, r3
 800b418:	2b02      	cmp	r3, #2
 800b41a:	d901      	bls.n	800b420 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b41c:	2303      	movs	r3, #3
 800b41e:	e006      	b.n	800b42e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b420:	4b05      	ldr	r3, [pc, #20]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d0f0      	beq.n	800b40e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	58024400 	.word	0x58024400
 800b43c:	ffff0007 	.word	0xffff0007

0800b440 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d101      	bne.n	800b452 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b44e:	2301      	movs	r3, #1
 800b450:	e10f      	b.n	800b672 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2200      	movs	r2, #0
 800b456:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a87      	ldr	r2, [pc, #540]	; (800b67c <HAL_SPI_Init+0x23c>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d00f      	beq.n	800b482 <HAL_SPI_Init+0x42>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4a86      	ldr	r2, [pc, #536]	; (800b680 <HAL_SPI_Init+0x240>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d00a      	beq.n	800b482 <HAL_SPI_Init+0x42>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a84      	ldr	r2, [pc, #528]	; (800b684 <HAL_SPI_Init+0x244>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d005      	beq.n	800b482 <HAL_SPI_Init+0x42>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	68db      	ldr	r3, [r3, #12]
 800b47a:	2b0f      	cmp	r3, #15
 800b47c:	d901      	bls.n	800b482 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b47e:	2301      	movs	r3, #1
 800b480:	e0f7      	b.n	800b672 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 fbea 	bl	800bc5c <SPI_GetPacketSize>
 800b488:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a7b      	ldr	r2, [pc, #492]	; (800b67c <HAL_SPI_Init+0x23c>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d00c      	beq.n	800b4ae <HAL_SPI_Init+0x6e>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a79      	ldr	r2, [pc, #484]	; (800b680 <HAL_SPI_Init+0x240>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d007      	beq.n	800b4ae <HAL_SPI_Init+0x6e>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4a78      	ldr	r2, [pc, #480]	; (800b684 <HAL_SPI_Init+0x244>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d002      	beq.n	800b4ae <HAL_SPI_Init+0x6e>
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2b08      	cmp	r3, #8
 800b4ac:	d811      	bhi.n	800b4d2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b4b2:	4a72      	ldr	r2, [pc, #456]	; (800b67c <HAL_SPI_Init+0x23c>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d009      	beq.n	800b4cc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4a70      	ldr	r2, [pc, #448]	; (800b680 <HAL_SPI_Init+0x240>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d004      	beq.n	800b4cc <HAL_SPI_Init+0x8c>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a6f      	ldr	r2, [pc, #444]	; (800b684 <HAL_SPI_Init+0x244>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d104      	bne.n	800b4d6 <HAL_SPI_Init+0x96>
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2b10      	cmp	r3, #16
 800b4d0:	d901      	bls.n	800b4d6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e0cd      	b.n	800b672 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d106      	bne.n	800b4f0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f7f7 f830 	bl	8002550 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2202      	movs	r2, #2
 800b4f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f022 0201 	bic.w	r2, r2, #1
 800b506:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b512:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	699b      	ldr	r3, [r3, #24]
 800b518:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b51c:	d119      	bne.n	800b552 <HAL_SPI_Init+0x112>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b526:	d103      	bne.n	800b530 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d008      	beq.n	800b542 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b534:	2b00      	cmp	r3, #0
 800b536:	d10c      	bne.n	800b552 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b53c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b540:	d107      	bne.n	800b552 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b550:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00f      	beq.n	800b57e <HAL_SPI_Init+0x13e>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	68db      	ldr	r3, [r3, #12]
 800b562:	2b06      	cmp	r3, #6
 800b564:	d90b      	bls.n	800b57e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	430a      	orrs	r2, r1
 800b57a:	601a      	str	r2, [r3, #0]
 800b57c:	e007      	b.n	800b58e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b58c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	69da      	ldr	r2, [r3, #28]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b596:	431a      	orrs	r2, r3
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	431a      	orrs	r2, r3
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5a0:	ea42 0103 	orr.w	r1, r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	68da      	ldr	r2, [r3, #12]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	430a      	orrs	r2, r1
 800b5ae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b8:	431a      	orrs	r2, r3
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5be:	431a      	orrs	r2, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	699b      	ldr	r3, [r3, #24]
 800b5c4:	431a      	orrs	r2, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	431a      	orrs	r2, r3
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	695b      	ldr	r3, [r3, #20]
 800b5d0:	431a      	orrs	r2, r3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6a1b      	ldr	r3, [r3, #32]
 800b5d6:	431a      	orrs	r2, r3
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	431a      	orrs	r2, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5e2:	431a      	orrs	r2, r3
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	689b      	ldr	r3, [r3, #8]
 800b5e8:	431a      	orrs	r2, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5ee:	ea42 0103 	orr.w	r1, r2, r3
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	430a      	orrs	r2, r1
 800b5fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d113      	bne.n	800b62e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b618:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b62c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f022 0201 	bic.w	r2, r2, #1
 800b63c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00a      	beq.n	800b660 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	430a      	orrs	r2, r1
 800b65e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2200      	movs	r2, #0
 800b664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2201      	movs	r2, #1
 800b66c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b670:	2300      	movs	r3, #0
}
 800b672:	4618      	mov	r0, r3
 800b674:	3710      	adds	r7, #16
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	40013000 	.word	0x40013000
 800b680:	40003800 	.word	0x40003800
 800b684:	40003c00 	.word	0x40003c00

0800b688 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b08c      	sub	sp, #48	; 0x30
 800b68c:	af02      	add	r7, sp, #8
 800b68e:	60f8      	str	r0, [r7, #12]
 800b690:	60b9      	str	r1, [r7, #8]
 800b692:	607a      	str	r2, [r7, #4]
 800b694:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b696:	2300      	movs	r3, #0
 800b698:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	3320      	adds	r3, #32
 800b6a2:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	3330      	adds	r3, #48	; 0x30
 800b6aa:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d101      	bne.n	800b6ba <HAL_SPI_TransmitReceive+0x32>
 800b6b6:	2302      	movs	r3, #2
 800b6b8:	e1fd      	b.n	800bab6 <HAL_SPI_TransmitReceive+0x42e>
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b6c2:	f7f8 fcc1 	bl	8004048 <HAL_GetTick>
 800b6c6:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 800b6c8:	887b      	ldrh	r3, [r7, #2]
 800b6ca:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 800b6cc:	887b      	ldrh	r3, [r7, #2]
 800b6ce:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	d009      	beq.n	800b6f0 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 800b6dc:	2302      	movs	r3, #2
 800b6de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b6ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6ee:	e1e2      	b.n	800bab6 <HAL_SPI_TransmitReceive+0x42e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d005      	beq.n	800b702 <HAL_SPI_TransmitReceive+0x7a>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d002      	beq.n	800b702 <HAL_SPI_TransmitReceive+0x7a>
 800b6fc:	887b      	ldrh	r3, [r7, #2]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d109      	bne.n	800b716 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2200      	movs	r2, #0
 800b70c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b714:	e1cf      	b.n	800bab6 <HAL_SPI_TransmitReceive+0x42e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2205      	movs	r2, #5
 800b71a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2200      	movs	r2, #0
 800b722:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	887a      	ldrh	r2, [r7, #2]
 800b730:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	887a      	ldrh	r2, [r7, #2]
 800b738:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	887a      	ldrh	r2, [r7, #2]
 800b746:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	887a      	ldrh	r2, [r7, #2]
 800b74e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2200      	movs	r2, #0
 800b756:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2200      	movs	r2, #0
 800b75c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	68da      	ldr	r2, [r3, #12]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 800b76c:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	685a      	ldr	r2, [r3, #4]
 800b774:	4b82      	ldr	r3, [pc, #520]	; (800b980 <HAL_SPI_TransmitReceive+0x2f8>)
 800b776:	4013      	ands	r3, r2
 800b778:	8879      	ldrh	r1, [r7, #2]
 800b77a:	68fa      	ldr	r2, [r7, #12]
 800b77c:	6812      	ldr	r2, [r2, #0]
 800b77e:	430b      	orrs	r3, r1
 800b780:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f042 0201 	orr.w	r2, r2, #1
 800b790:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b79a:	d107      	bne.n	800b7ac <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	2b0f      	cmp	r3, #15
 800b7b2:	d970      	bls.n	800b896 <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b7b4:	e068      	b.n	800b888 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	695b      	ldr	r3, [r3, #20]
 800b7bc:	f003 0302 	and.w	r3, r3, #2
 800b7c0:	2b02      	cmp	r3, #2
 800b7c2:	d11a      	bne.n	800b7fa <HAL_SPI_TransmitReceive+0x172>
 800b7c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d017      	beq.n	800b7fa <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	6812      	ldr	r2, [r2, #0]
 800b7d4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7da:	1d1a      	adds	r2, r3, #4
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b7e6:	b29b      	uxth	r3, r3
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	b29a      	uxth	r2, r3
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b7f8:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	695a      	ldr	r2, [r3, #20]
 800b800:	f248 0308 	movw	r3, #32776	; 0x8008
 800b804:	4013      	ands	r3, r2
 800b806:	2b00      	cmp	r3, #0
 800b808:	d01a      	beq.n	800b840 <HAL_SPI_TransmitReceive+0x1b8>
 800b80a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d017      	beq.n	800b840 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b818:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b81a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b820:	1d1a      	adds	r2, r3, #4
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	3b01      	subs	r3, #1
 800b830:	b29a      	uxth	r2, r3
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b83e:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b840:	f7f8 fc02 	bl	8004048 <HAL_GetTick>
 800b844:	4602      	mov	r2, r0
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	1ad3      	subs	r3, r2, r3
 800b84a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d803      	bhi.n	800b858 <HAL_SPI_TransmitReceive+0x1d0>
 800b850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b856:	d102      	bne.n	800b85e <HAL_SPI_TransmitReceive+0x1d6>
 800b858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d114      	bne.n	800b888 <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b85e:	68f8      	ldr	r0, [r7, #12]
 800b860:	f000 f92e 	bl	800bac0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2200      	movs	r2, #0
 800b868:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b872:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2201      	movs	r2, #1
 800b880:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b884:	2303      	movs	r3, #3
 800b886:	e116      	b.n	800bab6 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b888:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d193      	bne.n	800b7b6 <HAL_SPI_TransmitReceive+0x12e>
 800b88e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b890:	2b00      	cmp	r3, #0
 800b892:	d190      	bne.n	800b7b6 <HAL_SPI_TransmitReceive+0x12e>
 800b894:	e0e8      	b.n	800ba68 <HAL_SPI_TransmitReceive+0x3e0>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	2b07      	cmp	r3, #7
 800b89c:	f240 80de 	bls.w	800ba5c <HAL_SPI_TransmitReceive+0x3d4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b8a0:	e066      	b.n	800b970 <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	695b      	ldr	r3, [r3, #20]
 800b8a8:	f003 0302 	and.w	r3, r3, #2
 800b8ac:	2b02      	cmp	r3, #2
 800b8ae:	d119      	bne.n	800b8e4 <HAL_SPI_TransmitReceive+0x25c>
 800b8b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d016      	beq.n	800b8e4 <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8ba:	881a      	ldrh	r2, [r3, #0]
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8c4:	1c9a      	adds	r2, r3, #2
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b8e2:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	695b      	ldr	r3, [r3, #20]
 800b8ea:	f003 0301 	and.w	r3, r3, #1
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d11a      	bne.n	800b928 <HAL_SPI_TransmitReceive+0x2a0>
 800b8f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d017      	beq.n	800b928 <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8fc:	69ba      	ldr	r2, [r7, #24]
 800b8fe:	8812      	ldrh	r2, [r2, #0]
 800b900:	b292      	uxth	r2, r2
 800b902:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b908:	1c9a      	adds	r2, r3, #2
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b914:	b29b      	uxth	r3, r3
 800b916:	3b01      	subs	r3, #1
 800b918:	b29a      	uxth	r2, r3
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b926:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b928:	f7f8 fb8e 	bl	8004048 <HAL_GetTick>
 800b92c:	4602      	mov	r2, r0
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	1ad3      	subs	r3, r2, r3
 800b932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b934:	429a      	cmp	r2, r3
 800b936:	d803      	bhi.n	800b940 <HAL_SPI_TransmitReceive+0x2b8>
 800b938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b93e:	d102      	bne.n	800b946 <HAL_SPI_TransmitReceive+0x2be>
 800b940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b942:	2b00      	cmp	r3, #0
 800b944:	d114      	bne.n	800b970 <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b946:	68f8      	ldr	r0, [r7, #12]
 800b948:	f000 f8ba 	bl	800bac0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2200      	movs	r2, #0
 800b950:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b95a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2201      	movs	r2, #1
 800b968:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b96c:	2303      	movs	r3, #3
 800b96e:	e0a2      	b.n	800bab6 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b970:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b972:	2b00      	cmp	r3, #0
 800b974:	d195      	bne.n	800b8a2 <HAL_SPI_TransmitReceive+0x21a>
 800b976:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d192      	bne.n	800b8a2 <HAL_SPI_TransmitReceive+0x21a>
 800b97c:	e074      	b.n	800ba68 <HAL_SPI_TransmitReceive+0x3e0>
 800b97e:	bf00      	nop
 800b980:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	695b      	ldr	r3, [r3, #20]
 800b98a:	f003 0302 	and.w	r3, r3, #2
 800b98e:	2b02      	cmp	r3, #2
 800b990:	d11b      	bne.n	800b9ca <HAL_SPI_TransmitReceive+0x342>
 800b992:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b994:	2b00      	cmp	r3, #0
 800b996:	d018      	beq.n	800b9ca <HAL_SPI_TransmitReceive+0x342>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	3320      	adds	r3, #32
 800b9a2:	7812      	ldrb	r2, [r2, #0]
 800b9a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9aa:	1c5a      	adds	r2, r3, #1
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	3b01      	subs	r3, #1
 800b9ba:	b29a      	uxth	r2, r3
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b9c8:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	695b      	ldr	r3, [r3, #20]
 800b9d0:	f003 0301 	and.w	r3, r3, #1
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d11d      	bne.n	800ba14 <HAL_SPI_TransmitReceive+0x38c>
 800b9d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d01a      	beq.n	800ba14 <HAL_SPI_TransmitReceive+0x38c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9ea:	7812      	ldrb	r2, [r2, #0]
 800b9ec:	b2d2      	uxtb	r2, r2
 800b9ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9f4:	1c5a      	adds	r2, r3, #1
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba00:	b29b      	uxth	r3, r3
 800ba02:	3b01      	subs	r3, #1
 800ba04:	b29a      	uxth	r2, r3
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba12:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba14:	f7f8 fb18 	bl	8004048 <HAL_GetTick>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	1ad3      	subs	r3, r2, r3
 800ba1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d803      	bhi.n	800ba2c <HAL_SPI_TransmitReceive+0x3a4>
 800ba24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba2a:	d102      	bne.n	800ba32 <HAL_SPI_TransmitReceive+0x3aa>
 800ba2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d114      	bne.n	800ba5c <HAL_SPI_TransmitReceive+0x3d4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ba32:	68f8      	ldr	r0, [r7, #12]
 800ba34:	f000 f844 	bl	800bac0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2201      	movs	r2, #1
 800ba54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800ba58:	2303      	movs	r3, #3
 800ba5a:	e02c      	b.n	800bab6 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ba5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d190      	bne.n	800b984 <HAL_SPI_TransmitReceive+0x2fc>
 800ba62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d18d      	bne.n	800b984 <HAL_SPI_TransmitReceive+0x2fc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	9300      	str	r3, [sp, #0]
 800ba6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6e:	2200      	movs	r2, #0
 800ba70:	2108      	movs	r1, #8
 800ba72:	68f8      	ldr	r0, [r7, #12]
 800ba74:	f000 f8c4 	bl	800bc00 <SPI_WaitOnFlagUntilTimeout>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d007      	beq.n	800ba8e <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba84:	f043 0220 	orr.w	r2, r3, #32
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ba8e:	68f8      	ldr	r0, [r7, #12]
 800ba90:	f000 f816 	bl	800bac0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2200      	movs	r2, #0
 800ba98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d001      	beq.n	800bab2 <HAL_SPI_TransmitReceive+0x42a>
  {
    return HAL_ERROR;
 800baae:	2301      	movs	r3, #1
 800bab0:	e001      	b.n	800bab6 <HAL_SPI_TransmitReceive+0x42e>
  }
  return errorcode;
 800bab2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3728      	adds	r7, #40	; 0x28
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop

0800bac0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b085      	sub	sp, #20
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	695b      	ldr	r3, [r3, #20]
 800bace:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	699a      	ldr	r2, [r3, #24]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f042 0208 	orr.w	r2, r2, #8
 800bade:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	699a      	ldr	r2, [r3, #24]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f042 0210 	orr.w	r2, r2, #16
 800baee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	681a      	ldr	r2, [r3, #0]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f022 0201 	bic.w	r2, r2, #1
 800bafe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	6919      	ldr	r1, [r3, #16]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	4b3c      	ldr	r3, [pc, #240]	; (800bbfc <SPI_CloseTransfer+0x13c>)
 800bb0c:	400b      	ands	r3, r1
 800bb0e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	689a      	ldr	r2, [r3, #8]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800bb1e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	2b04      	cmp	r3, #4
 800bb2a:	d014      	beq.n	800bb56 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f003 0320 	and.w	r3, r3, #32
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d00f      	beq.n	800bb56 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	699a      	ldr	r2, [r3, #24]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f042 0220 	orr.w	r2, r2, #32
 800bb54:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	2b03      	cmp	r3, #3
 800bb60:	d014      	beq.n	800bb8c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d00f      	beq.n	800bb8c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb72:	f043 0204 	orr.w	r2, r3, #4
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	699a      	ldr	r2, [r3, #24]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb8a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d00f      	beq.n	800bbb6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb9c:	f043 0201 	orr.w	r2, r3, #1
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	699a      	ldr	r2, [r3, #24]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbb4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d00f      	beq.n	800bbe0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbc6:	f043 0208 	orr.w	r2, r3, #8
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	699a      	ldr	r2, [r3, #24]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bbde:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800bbf0:	bf00      	nop
 800bbf2:	3714      	adds	r7, #20
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr
 800bbfc:	fffffc90 	.word	0xfffffc90

0800bc00 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	60f8      	str	r0, [r7, #12]
 800bc08:	60b9      	str	r1, [r7, #8]
 800bc0a:	603b      	str	r3, [r7, #0]
 800bc0c:	4613      	mov	r3, r2
 800bc0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bc10:	e010      	b.n	800bc34 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc12:	f7f8 fa19 	bl	8004048 <HAL_GetTick>
 800bc16:	4602      	mov	r2, r0
 800bc18:	69bb      	ldr	r3, [r7, #24]
 800bc1a:	1ad3      	subs	r3, r2, r3
 800bc1c:	683a      	ldr	r2, [r7, #0]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d803      	bhi.n	800bc2a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc28:	d102      	bne.n	800bc30 <SPI_WaitOnFlagUntilTimeout+0x30>
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d101      	bne.n	800bc34 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800bc30:	2303      	movs	r3, #3
 800bc32:	e00f      	b.n	800bc54 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	695a      	ldr	r2, [r3, #20]
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	4013      	ands	r3, r2
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	bf0c      	ite	eq
 800bc44:	2301      	moveq	r3, #1
 800bc46:	2300      	movne	r3, #0
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	79fb      	ldrb	r3, [r7, #7]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d0df      	beq.n	800bc12 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800bc52:	2300      	movs	r3, #0
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3710      	adds	r7, #16
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc68:	095b      	lsrs	r3, r3, #5
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	68db      	ldr	r3, [r3, #12]
 800bc72:	3301      	adds	r3, #1
 800bc74:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	3307      	adds	r3, #7
 800bc7a:	08db      	lsrs	r3, r3, #3
 800bc7c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	68fa      	ldr	r2, [r7, #12]
 800bc82:	fb02 f303 	mul.w	r3, r2, r3
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3714      	adds	r7, #20
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr

0800bc92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bc92:	b580      	push	{r7, lr}
 800bc94:	b082      	sub	sp, #8
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d101      	bne.n	800bca4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bca0:	2301      	movs	r3, #1
 800bca2:	e049      	b.n	800bd38 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d106      	bne.n	800bcbe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f7f7 fea7 	bl	8003a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2202      	movs	r2, #2
 800bcc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	3304      	adds	r3, #4
 800bcce:	4619      	mov	r1, r3
 800bcd0:	4610      	mov	r0, r2
 800bcd2:	f000 f9ff 	bl	800c0d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2201      	movs	r2, #1
 800bcda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2201      	movs	r2, #1
 800bce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2201      	movs	r2, #1
 800bcea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2201      	movs	r2, #1
 800bd02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2201      	movs	r2, #1
 800bd0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2201      	movs	r2, #1
 800bd12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2201      	movs	r2, #1
 800bd1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2201      	movs	r2, #1
 800bd22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2201      	movs	r2, #1
 800bd2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2201      	movs	r2, #1
 800bd32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd36:	2300      	movs	r3, #0
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3708      	adds	r7, #8
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b085      	sub	sp, #20
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d001      	beq.n	800bd58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bd54:	2301      	movs	r3, #1
 800bd56:	e054      	b.n	800be02 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2202      	movs	r2, #2
 800bd5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	68da      	ldr	r2, [r3, #12]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f042 0201 	orr.w	r2, r2, #1
 800bd6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4a26      	ldr	r2, [pc, #152]	; (800be10 <HAL_TIM_Base_Start_IT+0xd0>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d022      	beq.n	800bdc0 <HAL_TIM_Base_Start_IT+0x80>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd82:	d01d      	beq.n	800bdc0 <HAL_TIM_Base_Start_IT+0x80>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4a22      	ldr	r2, [pc, #136]	; (800be14 <HAL_TIM_Base_Start_IT+0xd4>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d018      	beq.n	800bdc0 <HAL_TIM_Base_Start_IT+0x80>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	4a21      	ldr	r2, [pc, #132]	; (800be18 <HAL_TIM_Base_Start_IT+0xd8>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d013      	beq.n	800bdc0 <HAL_TIM_Base_Start_IT+0x80>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4a1f      	ldr	r2, [pc, #124]	; (800be1c <HAL_TIM_Base_Start_IT+0xdc>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d00e      	beq.n	800bdc0 <HAL_TIM_Base_Start_IT+0x80>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4a1e      	ldr	r2, [pc, #120]	; (800be20 <HAL_TIM_Base_Start_IT+0xe0>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d009      	beq.n	800bdc0 <HAL_TIM_Base_Start_IT+0x80>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4a1c      	ldr	r2, [pc, #112]	; (800be24 <HAL_TIM_Base_Start_IT+0xe4>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d004      	beq.n	800bdc0 <HAL_TIM_Base_Start_IT+0x80>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a1b      	ldr	r2, [pc, #108]	; (800be28 <HAL_TIM_Base_Start_IT+0xe8>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d115      	bne.n	800bdec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	689a      	ldr	r2, [r3, #8]
 800bdc6:	4b19      	ldr	r3, [pc, #100]	; (800be2c <HAL_TIM_Base_Start_IT+0xec>)
 800bdc8:	4013      	ands	r3, r2
 800bdca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2b06      	cmp	r3, #6
 800bdd0:	d015      	beq.n	800bdfe <HAL_TIM_Base_Start_IT+0xbe>
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdd8:	d011      	beq.n	800bdfe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	681a      	ldr	r2, [r3, #0]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f042 0201 	orr.w	r2, r2, #1
 800bde8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdea:	e008      	b.n	800bdfe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	681a      	ldr	r2, [r3, #0]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f042 0201 	orr.w	r2, r2, #1
 800bdfa:	601a      	str	r2, [r3, #0]
 800bdfc:	e000      	b.n	800be00 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdfe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800be00:	2300      	movs	r3, #0
}
 800be02:	4618      	mov	r0, r3
 800be04:	3714      	adds	r7, #20
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr
 800be0e:	bf00      	nop
 800be10:	40010000 	.word	0x40010000
 800be14:	40000400 	.word	0x40000400
 800be18:	40000800 	.word	0x40000800
 800be1c:	40000c00 	.word	0x40000c00
 800be20:	40010400 	.word	0x40010400
 800be24:	40001800 	.word	0x40001800
 800be28:	40014000 	.word	0x40014000
 800be2c:	00010007 	.word	0x00010007

0800be30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	691b      	ldr	r3, [r3, #16]
 800be3e:	f003 0302 	and.w	r3, r3, #2
 800be42:	2b02      	cmp	r3, #2
 800be44:	d122      	bne.n	800be8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	68db      	ldr	r3, [r3, #12]
 800be4c:	f003 0302 	and.w	r3, r3, #2
 800be50:	2b02      	cmp	r3, #2
 800be52:	d11b      	bne.n	800be8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f06f 0202 	mvn.w	r2, #2
 800be5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2201      	movs	r2, #1
 800be62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	699b      	ldr	r3, [r3, #24]
 800be6a:	f003 0303 	and.w	r3, r3, #3
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d003      	beq.n	800be7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 f90f 	bl	800c096 <HAL_TIM_IC_CaptureCallback>
 800be78:	e005      	b.n	800be86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 f901 	bl	800c082 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f000 f912 	bl	800c0aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2200      	movs	r2, #0
 800be8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	691b      	ldr	r3, [r3, #16]
 800be92:	f003 0304 	and.w	r3, r3, #4
 800be96:	2b04      	cmp	r3, #4
 800be98:	d122      	bne.n	800bee0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	f003 0304 	and.w	r3, r3, #4
 800bea4:	2b04      	cmp	r3, #4
 800bea6:	d11b      	bne.n	800bee0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f06f 0204 	mvn.w	r2, #4
 800beb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2202      	movs	r2, #2
 800beb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	699b      	ldr	r3, [r3, #24]
 800bebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d003      	beq.n	800bece <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 f8e5 	bl	800c096 <HAL_TIM_IC_CaptureCallback>
 800becc:	e005      	b.n	800beda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 f8d7 	bl	800c082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 f8e8 	bl	800c0aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2200      	movs	r2, #0
 800bede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	691b      	ldr	r3, [r3, #16]
 800bee6:	f003 0308 	and.w	r3, r3, #8
 800beea:	2b08      	cmp	r3, #8
 800beec:	d122      	bne.n	800bf34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	68db      	ldr	r3, [r3, #12]
 800bef4:	f003 0308 	and.w	r3, r3, #8
 800bef8:	2b08      	cmp	r3, #8
 800befa:	d11b      	bne.n	800bf34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f06f 0208 	mvn.w	r2, #8
 800bf04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2204      	movs	r2, #4
 800bf0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	69db      	ldr	r3, [r3, #28]
 800bf12:	f003 0303 	and.w	r3, r3, #3
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d003      	beq.n	800bf22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 f8bb 	bl	800c096 <HAL_TIM_IC_CaptureCallback>
 800bf20:	e005      	b.n	800bf2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 f8ad 	bl	800c082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f000 f8be 	bl	800c0aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2200      	movs	r2, #0
 800bf32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	691b      	ldr	r3, [r3, #16]
 800bf3a:	f003 0310 	and.w	r3, r3, #16
 800bf3e:	2b10      	cmp	r3, #16
 800bf40:	d122      	bne.n	800bf88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	68db      	ldr	r3, [r3, #12]
 800bf48:	f003 0310 	and.w	r3, r3, #16
 800bf4c:	2b10      	cmp	r3, #16
 800bf4e:	d11b      	bne.n	800bf88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f06f 0210 	mvn.w	r2, #16
 800bf58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2208      	movs	r2, #8
 800bf5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	69db      	ldr	r3, [r3, #28]
 800bf66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d003      	beq.n	800bf76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 f891 	bl	800c096 <HAL_TIM_IC_CaptureCallback>
 800bf74:	e005      	b.n	800bf82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 f883 	bl	800c082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 f894 	bl	800c0aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2200      	movs	r2, #0
 800bf86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	691b      	ldr	r3, [r3, #16]
 800bf8e:	f003 0301 	and.w	r3, r3, #1
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d10e      	bne.n	800bfb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	f003 0301 	and.w	r3, r3, #1
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d107      	bne.n	800bfb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f06f 0201 	mvn.w	r2, #1
 800bfac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 f85d 	bl	800c06e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	691b      	ldr	r3, [r3, #16]
 800bfba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfbe:	2b80      	cmp	r3, #128	; 0x80
 800bfc0:	d10e      	bne.n	800bfe0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfcc:	2b80      	cmp	r3, #128	; 0x80
 800bfce:	d107      	bne.n	800bfe0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bfd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 f9ac 	bl	800c338 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	691b      	ldr	r3, [r3, #16]
 800bfe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfee:	d10e      	bne.n	800c00e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	68db      	ldr	r3, [r3, #12]
 800bff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bffa:	2b80      	cmp	r3, #128	; 0x80
 800bffc:	d107      	bne.n	800c00e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f000 f99f 	bl	800c34c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	691b      	ldr	r3, [r3, #16]
 800c014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c018:	2b40      	cmp	r3, #64	; 0x40
 800c01a:	d10e      	bne.n	800c03a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c026:	2b40      	cmp	r3, #64	; 0x40
 800c028:	d107      	bne.n	800c03a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 f842 	bl	800c0be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	691b      	ldr	r3, [r3, #16]
 800c040:	f003 0320 	and.w	r3, r3, #32
 800c044:	2b20      	cmp	r3, #32
 800c046:	d10e      	bne.n	800c066 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	f003 0320 	and.w	r3, r3, #32
 800c052:	2b20      	cmp	r3, #32
 800c054:	d107      	bne.n	800c066 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f06f 0220 	mvn.w	r2, #32
 800c05e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 f95f 	bl	800c324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c066:	bf00      	nop
 800c068:	3708      	adds	r7, #8
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}

0800c06e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c06e:	b480      	push	{r7}
 800c070:	b083      	sub	sp, #12
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c076:	bf00      	nop
 800c078:	370c      	adds	r7, #12
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr

0800c082 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c082:	b480      	push	{r7}
 800c084:	b083      	sub	sp, #12
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c08a:	bf00      	nop
 800c08c:	370c      	adds	r7, #12
 800c08e:	46bd      	mov	sp, r7
 800c090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c094:	4770      	bx	lr

0800c096 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c096:	b480      	push	{r7}
 800c098:	b083      	sub	sp, #12
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c09e:	bf00      	nop
 800c0a0:	370c      	adds	r7, #12
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr

0800c0aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c0aa:	b480      	push	{r7}
 800c0ac:	b083      	sub	sp, #12
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c0b2:	bf00      	nop
 800c0b4:	370c      	adds	r7, #12
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr

0800c0be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c0be:	b480      	push	{r7}
 800c0c0:	b083      	sub	sp, #12
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c0c6:	bf00      	nop
 800c0c8:	370c      	adds	r7, #12
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr
	...

0800c0d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b085      	sub	sp, #20
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4a40      	ldr	r2, [pc, #256]	; (800c1e8 <TIM_Base_SetConfig+0x114>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d013      	beq.n	800c114 <TIM_Base_SetConfig+0x40>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0f2:	d00f      	beq.n	800c114 <TIM_Base_SetConfig+0x40>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4a3d      	ldr	r2, [pc, #244]	; (800c1ec <TIM_Base_SetConfig+0x118>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d00b      	beq.n	800c114 <TIM_Base_SetConfig+0x40>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	4a3c      	ldr	r2, [pc, #240]	; (800c1f0 <TIM_Base_SetConfig+0x11c>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d007      	beq.n	800c114 <TIM_Base_SetConfig+0x40>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	4a3b      	ldr	r2, [pc, #236]	; (800c1f4 <TIM_Base_SetConfig+0x120>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	d003      	beq.n	800c114 <TIM_Base_SetConfig+0x40>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	4a3a      	ldr	r2, [pc, #232]	; (800c1f8 <TIM_Base_SetConfig+0x124>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d108      	bne.n	800c126 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c11a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	68fa      	ldr	r2, [r7, #12]
 800c122:	4313      	orrs	r3, r2
 800c124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	4a2f      	ldr	r2, [pc, #188]	; (800c1e8 <TIM_Base_SetConfig+0x114>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d01f      	beq.n	800c16e <TIM_Base_SetConfig+0x9a>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c134:	d01b      	beq.n	800c16e <TIM_Base_SetConfig+0x9a>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	4a2c      	ldr	r2, [pc, #176]	; (800c1ec <TIM_Base_SetConfig+0x118>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d017      	beq.n	800c16e <TIM_Base_SetConfig+0x9a>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4a2b      	ldr	r2, [pc, #172]	; (800c1f0 <TIM_Base_SetConfig+0x11c>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d013      	beq.n	800c16e <TIM_Base_SetConfig+0x9a>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	4a2a      	ldr	r2, [pc, #168]	; (800c1f4 <TIM_Base_SetConfig+0x120>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d00f      	beq.n	800c16e <TIM_Base_SetConfig+0x9a>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	4a29      	ldr	r2, [pc, #164]	; (800c1f8 <TIM_Base_SetConfig+0x124>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d00b      	beq.n	800c16e <TIM_Base_SetConfig+0x9a>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	4a28      	ldr	r2, [pc, #160]	; (800c1fc <TIM_Base_SetConfig+0x128>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d007      	beq.n	800c16e <TIM_Base_SetConfig+0x9a>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	4a27      	ldr	r2, [pc, #156]	; (800c200 <TIM_Base_SetConfig+0x12c>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d003      	beq.n	800c16e <TIM_Base_SetConfig+0x9a>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	4a26      	ldr	r2, [pc, #152]	; (800c204 <TIM_Base_SetConfig+0x130>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d108      	bne.n	800c180 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	68fa      	ldr	r2, [r7, #12]
 800c17c:	4313      	orrs	r3, r2
 800c17e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	695b      	ldr	r3, [r3, #20]
 800c18a:	4313      	orrs	r3, r2
 800c18c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	68fa      	ldr	r2, [r7, #12]
 800c192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	689a      	ldr	r2, [r3, #8]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	4a10      	ldr	r2, [pc, #64]	; (800c1e8 <TIM_Base_SetConfig+0x114>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d00f      	beq.n	800c1cc <TIM_Base_SetConfig+0xf8>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	4a12      	ldr	r2, [pc, #72]	; (800c1f8 <TIM_Base_SetConfig+0x124>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d00b      	beq.n	800c1cc <TIM_Base_SetConfig+0xf8>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	4a11      	ldr	r2, [pc, #68]	; (800c1fc <TIM_Base_SetConfig+0x128>)
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d007      	beq.n	800c1cc <TIM_Base_SetConfig+0xf8>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	4a10      	ldr	r2, [pc, #64]	; (800c200 <TIM_Base_SetConfig+0x12c>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d003      	beq.n	800c1cc <TIM_Base_SetConfig+0xf8>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	4a0f      	ldr	r2, [pc, #60]	; (800c204 <TIM_Base_SetConfig+0x130>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d103      	bne.n	800c1d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	691a      	ldr	r2, [r3, #16]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	615a      	str	r2, [r3, #20]
}
 800c1da:	bf00      	nop
 800c1dc:	3714      	adds	r7, #20
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr
 800c1e6:	bf00      	nop
 800c1e8:	40010000 	.word	0x40010000
 800c1ec:	40000400 	.word	0x40000400
 800c1f0:	40000800 	.word	0x40000800
 800c1f4:	40000c00 	.word	0x40000c00
 800c1f8:	40010400 	.word	0x40010400
 800c1fc:	40014000 	.word	0x40014000
 800c200:	40014400 	.word	0x40014400
 800c204:	40014800 	.word	0x40014800

0800c208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c208:	b480      	push	{r7}
 800c20a:	b085      	sub	sp, #20
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d101      	bne.n	800c220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c21c:	2302      	movs	r3, #2
 800c21e:	e06d      	b.n	800c2fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2201      	movs	r2, #1
 800c224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2202      	movs	r2, #2
 800c22c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	689b      	ldr	r3, [r3, #8]
 800c23e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4a30      	ldr	r2, [pc, #192]	; (800c308 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d004      	beq.n	800c254 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4a2f      	ldr	r2, [pc, #188]	; (800c30c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d108      	bne.n	800c266 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c25a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	68fa      	ldr	r2, [r7, #12]
 800c262:	4313      	orrs	r3, r2
 800c264:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c26c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	68fa      	ldr	r2, [r7, #12]
 800c274:	4313      	orrs	r3, r2
 800c276:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a20      	ldr	r2, [pc, #128]	; (800c308 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d022      	beq.n	800c2d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c292:	d01d      	beq.n	800c2d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4a1d      	ldr	r2, [pc, #116]	; (800c310 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d018      	beq.n	800c2d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	4a1c      	ldr	r2, [pc, #112]	; (800c314 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d013      	beq.n	800c2d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4a1a      	ldr	r2, [pc, #104]	; (800c318 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d00e      	beq.n	800c2d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	4a15      	ldr	r2, [pc, #84]	; (800c30c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d009      	beq.n	800c2d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4a16      	ldr	r2, [pc, #88]	; (800c31c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d004      	beq.n	800c2d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4a15      	ldr	r2, [pc, #84]	; (800c320 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d10c      	bne.n	800c2ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	68ba      	ldr	r2, [r7, #8]
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	68ba      	ldr	r2, [r7, #8]
 800c2e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c2fa:	2300      	movs	r3, #0
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3714      	adds	r7, #20
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr
 800c308:	40010000 	.word	0x40010000
 800c30c:	40010400 	.word	0x40010400
 800c310:	40000400 	.word	0x40000400
 800c314:	40000800 	.word	0x40000800
 800c318:	40000c00 	.word	0x40000c00
 800c31c:	40001800 	.word	0x40001800
 800c320:	40014000 	.word	0x40014000

0800c324 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c32c:	bf00      	nop
 800c32e:	370c      	adds	r7, #12
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c338:	b480      	push	{r7}
 800c33a:	b083      	sub	sp, #12
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c340:	bf00      	nop
 800c342:	370c      	adds	r7, #12
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b083      	sub	sp, #12
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c354:	bf00      	nop
 800c356:	370c      	adds	r7, #12
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr

0800c360 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b082      	sub	sp, #8
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d101      	bne.n	800c372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c36e:	2301      	movs	r3, #1
 800c370:	e042      	b.n	800c3f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d106      	bne.n	800c38a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2200      	movs	r2, #0
 800c380:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f7f7 fc05 	bl	8003b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2224      	movs	r2, #36	; 0x24
 800c38e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	681a      	ldr	r2, [r3, #0]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f022 0201 	bic.w	r2, r2, #1
 800c3a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 fce6 	bl	800cd74 <UART_SetConfig>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	d101      	bne.n	800c3b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	e022      	b.n	800c3f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d002      	beq.n	800c3c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f001 fa42 	bl	800d844 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	685a      	ldr	r2, [r3, #4]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c3ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	689a      	ldr	r2, [r3, #8]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c3de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	681a      	ldr	r2, [r3, #0]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f042 0201 	orr.w	r2, r2, #1
 800c3ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f001 fac9 	bl	800d988 <UART_CheckIdleState>
 800c3f6:	4603      	mov	r3, r0
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3708      	adds	r7, #8
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b08a      	sub	sp, #40	; 0x28
 800c404:	af00      	add	r7, sp, #0
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	60b9      	str	r1, [r7, #8]
 800c40a:	4613      	mov	r3, r2
 800c40c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c414:	2b20      	cmp	r3, #32
 800c416:	d167      	bne.n	800c4e8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d002      	beq.n	800c424 <HAL_UART_Transmit_DMA+0x24>
 800c41e:	88fb      	ldrh	r3, [r7, #6]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d101      	bne.n	800c428 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c424:	2301      	movs	r3, #1
 800c426:	e060      	b.n	800c4ea <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	68ba      	ldr	r2, [r7, #8]
 800c42c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	88fa      	ldrh	r2, [r7, #6]
 800c432:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	88fa      	ldrh	r2, [r7, #6]
 800c43a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2200      	movs	r2, #0
 800c442:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2221      	movs	r2, #33	; 0x21
 800c44a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c452:	2b00      	cmp	r3, #0
 800c454:	d028      	beq.n	800c4a8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c45a:	4a26      	ldr	r2, [pc, #152]	; (800c4f4 <HAL_UART_Transmit_DMA+0xf4>)
 800c45c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c462:	4a25      	ldr	r2, [pc, #148]	; (800c4f8 <HAL_UART_Transmit_DMA+0xf8>)
 800c464:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c46a:	4a24      	ldr	r2, [pc, #144]	; (800c4fc <HAL_UART_Transmit_DMA+0xfc>)
 800c46c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c472:	2200      	movs	r2, #0
 800c474:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c47e:	4619      	mov	r1, r3
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	3328      	adds	r3, #40	; 0x28
 800c486:	461a      	mov	r2, r3
 800c488:	88fb      	ldrh	r3, [r7, #6]
 800c48a:	f7f8 fa61 	bl	8004950 <HAL_DMA_Start_IT>
 800c48e:	4603      	mov	r3, r0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d009      	beq.n	800c4a8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	2210      	movs	r2, #16
 800c498:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2220      	movs	r2, #32
 800c4a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	e020      	b.n	800c4ea <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2240      	movs	r2, #64	; 0x40
 800c4ae:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	3308      	adds	r3, #8
 800c4b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	e853 3f00 	ldrex	r3, [r3]
 800c4be:	613b      	str	r3, [r7, #16]
   return(result);
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4c6:	627b      	str	r3, [r7, #36]	; 0x24
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	3308      	adds	r3, #8
 800c4ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4d0:	623a      	str	r2, [r7, #32]
 800c4d2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d4:	69f9      	ldr	r1, [r7, #28]
 800c4d6:	6a3a      	ldr	r2, [r7, #32]
 800c4d8:	e841 2300 	strex	r3, r2, [r1]
 800c4dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800c4de:	69bb      	ldr	r3, [r7, #24]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d1e5      	bne.n	800c4b0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	e000      	b.n	800c4ea <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c4e8:	2302      	movs	r3, #2
  }
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3728      	adds	r7, #40	; 0x28
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	0800de49 	.word	0x0800de49
 800c4f8:	0800dedf 	.word	0x0800dedf
 800c4fc:	0800e061 	.word	0x0800e061

0800c500 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b08a      	sub	sp, #40	; 0x28
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	4613      	mov	r3, r2
 800c50c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c514:	2b20      	cmp	r3, #32
 800c516:	d137      	bne.n	800c588 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d002      	beq.n	800c524 <HAL_UART_Receive_DMA+0x24>
 800c51e:	88fb      	ldrh	r3, [r7, #6]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d101      	bne.n	800c528 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c524:	2301      	movs	r3, #1
 800c526:	e030      	b.n	800c58a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2200      	movs	r2, #0
 800c52c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	4a18      	ldr	r2, [pc, #96]	; (800c594 <HAL_UART_Receive_DMA+0x94>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d01f      	beq.n	800c578 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c542:	2b00      	cmp	r3, #0
 800c544:	d018      	beq.n	800c578 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	e853 3f00 	ldrex	r3, [r3]
 800c552:	613b      	str	r3, [r7, #16]
   return(result);
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c55a:	627b      	str	r3, [r7, #36]	; 0x24
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	461a      	mov	r2, r3
 800c562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c564:	623b      	str	r3, [r7, #32]
 800c566:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c568:	69f9      	ldr	r1, [r7, #28]
 800c56a:	6a3a      	ldr	r2, [r7, #32]
 800c56c:	e841 2300 	strex	r3, r2, [r1]
 800c570:	61bb      	str	r3, [r7, #24]
   return(result);
 800c572:	69bb      	ldr	r3, [r7, #24]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d1e6      	bne.n	800c546 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c578:	88fb      	ldrh	r3, [r7, #6]
 800c57a:	461a      	mov	r2, r3
 800c57c:	68b9      	ldr	r1, [r7, #8]
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	f001 fb14 	bl	800dbac <UART_Start_Receive_DMA>
 800c584:	4603      	mov	r3, r0
 800c586:	e000      	b.n	800c58a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c588:	2302      	movs	r3, #2
  }
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3728      	adds	r7, #40	; 0x28
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	58000c00 	.word	0x58000c00

0800c598 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b0ba      	sub	sp, #232	; 0xe8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	69db      	ldr	r3, [r3, #28]
 800c5a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c5be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c5c2:	f640 030f 	movw	r3, #2063	; 0x80f
 800c5c6:	4013      	ands	r3, r2
 800c5c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c5cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d11b      	bne.n	800c60c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c5d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5d8:	f003 0320 	and.w	r3, r3, #32
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d015      	beq.n	800c60c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c5e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5e4:	f003 0320 	and.w	r3, r3, #32
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d105      	bne.n	800c5f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c5ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d009      	beq.n	800c60c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	f000 8377 	beq.w	800ccf0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	4798      	blx	r3
      }
      return;
 800c60a:	e371      	b.n	800ccf0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c60c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c610:	2b00      	cmp	r3, #0
 800c612:	f000 8123 	beq.w	800c85c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c616:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c61a:	4b8d      	ldr	r3, [pc, #564]	; (800c850 <HAL_UART_IRQHandler+0x2b8>)
 800c61c:	4013      	ands	r3, r2
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d106      	bne.n	800c630 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c622:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c626:	4b8b      	ldr	r3, [pc, #556]	; (800c854 <HAL_UART_IRQHandler+0x2bc>)
 800c628:	4013      	ands	r3, r2
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	f000 8116 	beq.w	800c85c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c634:	f003 0301 	and.w	r3, r3, #1
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d011      	beq.n	800c660 <HAL_UART_IRQHandler+0xc8>
 800c63c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c644:	2b00      	cmp	r3, #0
 800c646:	d00b      	beq.n	800c660 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	2201      	movs	r2, #1
 800c64e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c656:	f043 0201 	orr.w	r2, r3, #1
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c664:	f003 0302 	and.w	r3, r3, #2
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d011      	beq.n	800c690 <HAL_UART_IRQHandler+0xf8>
 800c66c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c670:	f003 0301 	and.w	r3, r3, #1
 800c674:	2b00      	cmp	r3, #0
 800c676:	d00b      	beq.n	800c690 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	2202      	movs	r2, #2
 800c67e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c686:	f043 0204 	orr.w	r2, r3, #4
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c694:	f003 0304 	and.w	r3, r3, #4
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d011      	beq.n	800c6c0 <HAL_UART_IRQHandler+0x128>
 800c69c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6a0:	f003 0301 	and.w	r3, r3, #1
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d00b      	beq.n	800c6c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	2204      	movs	r2, #4
 800c6ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6b6:	f043 0202 	orr.w	r2, r3, #2
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c6c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6c4:	f003 0308 	and.w	r3, r3, #8
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d017      	beq.n	800c6fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c6cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6d0:	f003 0320 	and.w	r3, r3, #32
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d105      	bne.n	800c6e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c6d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c6dc:	4b5c      	ldr	r3, [pc, #368]	; (800c850 <HAL_UART_IRQHandler+0x2b8>)
 800c6de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d00b      	beq.n	800c6fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	2208      	movs	r2, #8
 800c6ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6f2:	f043 0208 	orr.w	r2, r3, #8
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c6fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c704:	2b00      	cmp	r3, #0
 800c706:	d012      	beq.n	800c72e <HAL_UART_IRQHandler+0x196>
 800c708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c70c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c710:	2b00      	cmp	r3, #0
 800c712:	d00c      	beq.n	800c72e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c71c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c724:	f043 0220 	orr.w	r2, r3, #32
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c734:	2b00      	cmp	r3, #0
 800c736:	f000 82dd 	beq.w	800ccf4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c73a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c73e:	f003 0320 	and.w	r3, r3, #32
 800c742:	2b00      	cmp	r3, #0
 800c744:	d013      	beq.n	800c76e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c74a:	f003 0320 	and.w	r3, r3, #32
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d105      	bne.n	800c75e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d007      	beq.n	800c76e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c762:	2b00      	cmp	r3, #0
 800c764:	d003      	beq.n	800c76e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c774:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	689b      	ldr	r3, [r3, #8]
 800c77e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c782:	2b40      	cmp	r3, #64	; 0x40
 800c784:	d005      	beq.n	800c792 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c78a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d054      	beq.n	800c83c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f001 faf2 	bl	800dd7c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	689b      	ldr	r3, [r3, #8]
 800c79e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7a2:	2b40      	cmp	r3, #64	; 0x40
 800c7a4:	d146      	bne.n	800c834 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	3308      	adds	r3, #8
 800c7ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c7b4:	e853 3f00 	ldrex	r3, [r3]
 800c7b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c7bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c7c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	3308      	adds	r3, #8
 800c7ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c7d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c7d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c7de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c7e2:	e841 2300 	strex	r3, r2, [r1]
 800c7e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c7ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d1d9      	bne.n	800c7a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d017      	beq.n	800c82c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c802:	4a15      	ldr	r2, [pc, #84]	; (800c858 <HAL_UART_IRQHandler+0x2c0>)
 800c804:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7f8 fe27 	bl	8005460 <HAL_DMA_Abort_IT>
 800c812:	4603      	mov	r3, r0
 800c814:	2b00      	cmp	r3, #0
 800c816:	d019      	beq.n	800c84c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c81e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800c826:	4610      	mov	r0, r2
 800c828:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c82a:	e00f      	b.n	800c84c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f000 fa8b 	bl	800cd48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c832:	e00b      	b.n	800c84c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 fa87 	bl	800cd48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c83a:	e007      	b.n	800c84c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f000 fa83 	bl	800cd48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800c84a:	e253      	b.n	800ccf4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c84c:	bf00      	nop
    return;
 800c84e:	e251      	b.n	800ccf4 <HAL_UART_IRQHandler+0x75c>
 800c850:	10000001 	.word	0x10000001
 800c854:	04000120 	.word	0x04000120
 800c858:	0800e0e1 	.word	0x0800e0e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c860:	2b01      	cmp	r3, #1
 800c862:	f040 81e7 	bne.w	800cc34 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c86a:	f003 0310 	and.w	r3, r3, #16
 800c86e:	2b00      	cmp	r3, #0
 800c870:	f000 81e0 	beq.w	800cc34 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c878:	f003 0310 	and.w	r3, r3, #16
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f000 81d9 	beq.w	800cc34 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	2210      	movs	r2, #16
 800c888:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	689b      	ldr	r3, [r3, #8]
 800c890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c894:	2b40      	cmp	r3, #64	; 0x40
 800c896:	f040 8151 	bne.w	800cb3c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4a96      	ldr	r2, [pc, #600]	; (800cafc <HAL_UART_IRQHandler+0x564>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d068      	beq.n	800c97a <HAL_UART_IRQHandler+0x3e2>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a93      	ldr	r2, [pc, #588]	; (800cb00 <HAL_UART_IRQHandler+0x568>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d061      	beq.n	800c97a <HAL_UART_IRQHandler+0x3e2>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a91      	ldr	r2, [pc, #580]	; (800cb04 <HAL_UART_IRQHandler+0x56c>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d05a      	beq.n	800c97a <HAL_UART_IRQHandler+0x3e2>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a8e      	ldr	r2, [pc, #568]	; (800cb08 <HAL_UART_IRQHandler+0x570>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d053      	beq.n	800c97a <HAL_UART_IRQHandler+0x3e2>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	4a8c      	ldr	r2, [pc, #560]	; (800cb0c <HAL_UART_IRQHandler+0x574>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d04c      	beq.n	800c97a <HAL_UART_IRQHandler+0x3e2>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a89      	ldr	r2, [pc, #548]	; (800cb10 <HAL_UART_IRQHandler+0x578>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d045      	beq.n	800c97a <HAL_UART_IRQHandler+0x3e2>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4a87      	ldr	r2, [pc, #540]	; (800cb14 <HAL_UART_IRQHandler+0x57c>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d03e      	beq.n	800c97a <HAL_UART_IRQHandler+0x3e2>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	4a84      	ldr	r2, [pc, #528]	; (800cb18 <HAL_UART_IRQHandler+0x580>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d037      	beq.n	800c97a <HAL_UART_IRQHandler+0x3e2>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4a82      	ldr	r2, [pc, #520]	; (800cb1c <HAL_UART_IRQHandler+0x584>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d030      	beq.n	800c97a <HAL_UART_IRQHandler+0x3e2>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a7f      	ldr	r2, [pc, #508]	; (800cb20 <HAL_UART_IRQHandler+0x588>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d029      	beq.n	800c97a <HAL_UART_IRQHandler+0x3e2>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4a7d      	ldr	r2, [pc, #500]	; (800cb24 <HAL_UART_IRQHandler+0x58c>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d022      	beq.n	800c97a <HAL_UART_IRQHandler+0x3e2>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4a7a      	ldr	r2, [pc, #488]	; (800cb28 <HAL_UART_IRQHandler+0x590>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d01b      	beq.n	800c97a <HAL_UART_IRQHandler+0x3e2>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4a78      	ldr	r2, [pc, #480]	; (800cb2c <HAL_UART_IRQHandler+0x594>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d014      	beq.n	800c97a <HAL_UART_IRQHandler+0x3e2>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a75      	ldr	r2, [pc, #468]	; (800cb30 <HAL_UART_IRQHandler+0x598>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d00d      	beq.n	800c97a <HAL_UART_IRQHandler+0x3e2>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4a73      	ldr	r2, [pc, #460]	; (800cb34 <HAL_UART_IRQHandler+0x59c>)
 800c968:	4293      	cmp	r3, r2
 800c96a:	d006      	beq.n	800c97a <HAL_UART_IRQHandler+0x3e2>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4a70      	ldr	r2, [pc, #448]	; (800cb38 <HAL_UART_IRQHandler+0x5a0>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d106      	bne.n	800c988 <HAL_UART_IRQHandler+0x3f0>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	b29b      	uxth	r3, r3
 800c986:	e005      	b.n	800c994 <HAL_UART_IRQHandler+0x3fc>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	685b      	ldr	r3, [r3, #4]
 800c992:	b29b      	uxth	r3, r3
 800c994:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c998:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	f000 81ab 	beq.w	800ccf8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c9a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	f080 81a3 	bcs.w	800ccf8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c9b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c9c2:	69db      	ldr	r3, [r3, #28]
 800c9c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9c8:	f000 8087 	beq.w	800cada <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c9d8:	e853 3f00 	ldrex	r3, [r3]
 800c9dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c9e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c9e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c9e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c9f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c9fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ca02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ca06:	e841 2300 	strex	r3, r2, [r1]
 800ca0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ca0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d1da      	bne.n	800c9cc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	3308      	adds	r3, #8
 800ca1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca20:	e853 3f00 	ldrex	r3, [r3]
 800ca24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ca26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca28:	f023 0301 	bic.w	r3, r3, #1
 800ca2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	3308      	adds	r3, #8
 800ca36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ca3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ca3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ca42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ca46:	e841 2300 	strex	r3, r2, [r1]
 800ca4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ca4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d1e1      	bne.n	800ca16 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	3308      	adds	r3, #8
 800ca58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca5c:	e853 3f00 	ldrex	r3, [r3]
 800ca60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ca62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	3308      	adds	r3, #8
 800ca72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ca76:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ca78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ca7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ca7e:	e841 2300 	strex	r3, r2, [r1]
 800ca82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ca84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d1e3      	bne.n	800ca52 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2220      	movs	r2, #32
 800ca8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2200      	movs	r2, #0
 800ca96:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caa0:	e853 3f00 	ldrex	r3, [r3]
 800caa4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800caa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800caa8:	f023 0310 	bic.w	r3, r3, #16
 800caac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	461a      	mov	r2, r3
 800cab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800caba:	65bb      	str	r3, [r7, #88]	; 0x58
 800cabc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cabe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cac0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cac2:	e841 2300 	strex	r3, r2, [r1]
 800cac6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d1e4      	bne.n	800ca98 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cad4:	4618      	mov	r0, r3
 800cad6:	f7f8 f9a5 	bl	8004e24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2202      	movs	r2, #2
 800cade:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800caec:	b29b      	uxth	r3, r3
 800caee:	1ad3      	subs	r3, r2, r3
 800caf0:	b29b      	uxth	r3, r3
 800caf2:	4619      	mov	r1, r3
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 f931 	bl	800cd5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cafa:	e0fd      	b.n	800ccf8 <HAL_UART_IRQHandler+0x760>
 800cafc:	40020010 	.word	0x40020010
 800cb00:	40020028 	.word	0x40020028
 800cb04:	40020040 	.word	0x40020040
 800cb08:	40020058 	.word	0x40020058
 800cb0c:	40020070 	.word	0x40020070
 800cb10:	40020088 	.word	0x40020088
 800cb14:	400200a0 	.word	0x400200a0
 800cb18:	400200b8 	.word	0x400200b8
 800cb1c:	40020410 	.word	0x40020410
 800cb20:	40020428 	.word	0x40020428
 800cb24:	40020440 	.word	0x40020440
 800cb28:	40020458 	.word	0x40020458
 800cb2c:	40020470 	.word	0x40020470
 800cb30:	40020488 	.word	0x40020488
 800cb34:	400204a0 	.word	0x400204a0
 800cb38:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	1ad3      	subs	r3, r2, r3
 800cb4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb56:	b29b      	uxth	r3, r3
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	f000 80cf 	beq.w	800ccfc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800cb5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	f000 80ca 	beq.w	800ccfc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb70:	e853 3f00 	ldrex	r3, [r3]
 800cb74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cb76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cb7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	461a      	mov	r2, r3
 800cb86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cb8a:	647b      	str	r3, [r7, #68]	; 0x44
 800cb8c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cb90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb92:	e841 2300 	strex	r3, r2, [r1]
 800cb96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cb98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d1e4      	bne.n	800cb68 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	3308      	adds	r3, #8
 800cba4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba8:	e853 3f00 	ldrex	r3, [r3]
 800cbac:	623b      	str	r3, [r7, #32]
   return(result);
 800cbae:	6a3a      	ldr	r2, [r7, #32]
 800cbb0:	4b55      	ldr	r3, [pc, #340]	; (800cd08 <HAL_UART_IRQHandler+0x770>)
 800cbb2:	4013      	ands	r3, r2
 800cbb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	3308      	adds	r3, #8
 800cbbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cbc2:	633a      	str	r2, [r7, #48]	; 0x30
 800cbc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cbc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbca:	e841 2300 	strex	r3, r2, [r1]
 800cbce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d1e3      	bne.n	800cb9e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2220      	movs	r2, #32
 800cbda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	e853 3f00 	ldrex	r3, [r3]
 800cbf6:	60fb      	str	r3, [r7, #12]
   return(result);
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f023 0310 	bic.w	r3, r3, #16
 800cbfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	461a      	mov	r2, r3
 800cc08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cc0c:	61fb      	str	r3, [r7, #28]
 800cc0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc10:	69b9      	ldr	r1, [r7, #24]
 800cc12:	69fa      	ldr	r2, [r7, #28]
 800cc14:	e841 2300 	strex	r3, r2, [r1]
 800cc18:	617b      	str	r3, [r7, #20]
   return(result);
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d1e4      	bne.n	800cbea <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2202      	movs	r2, #2
 800cc24:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cc26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f000 f895 	bl	800cd5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cc32:	e063      	b.n	800ccfc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cc34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d00e      	beq.n	800cc5e <HAL_UART_IRQHandler+0x6c6>
 800cc40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d008      	beq.n	800cc5e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800cc54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f001 fa83 	bl	800e162 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cc5c:	e051      	b.n	800cd02 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cc5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d014      	beq.n	800cc94 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cc6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d105      	bne.n	800cc82 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cc76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d008      	beq.n	800cc94 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d03a      	beq.n	800cd00 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	4798      	blx	r3
    }
    return;
 800cc92:	e035      	b.n	800cd00 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cc94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d009      	beq.n	800ccb4 <HAL_UART_IRQHandler+0x71c>
 800cca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d003      	beq.n	800ccb4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f001 fa2d 	bl	800e10c <UART_EndTransmit_IT>
    return;
 800ccb2:	e026      	b.n	800cd02 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ccb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d009      	beq.n	800ccd4 <HAL_UART_IRQHandler+0x73c>
 800ccc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ccc4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d003      	beq.n	800ccd4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f001 fa5c 	bl	800e18a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ccd2:	e016      	b.n	800cd02 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ccd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d010      	beq.n	800cd02 <HAL_UART_IRQHandler+0x76a>
 800cce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	da0c      	bge.n	800cd02 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f001 fa44 	bl	800e176 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ccee:	e008      	b.n	800cd02 <HAL_UART_IRQHandler+0x76a>
      return;
 800ccf0:	bf00      	nop
 800ccf2:	e006      	b.n	800cd02 <HAL_UART_IRQHandler+0x76a>
    return;
 800ccf4:	bf00      	nop
 800ccf6:	e004      	b.n	800cd02 <HAL_UART_IRQHandler+0x76a>
      return;
 800ccf8:	bf00      	nop
 800ccfa:	e002      	b.n	800cd02 <HAL_UART_IRQHandler+0x76a>
      return;
 800ccfc:	bf00      	nop
 800ccfe:	e000      	b.n	800cd02 <HAL_UART_IRQHandler+0x76a>
    return;
 800cd00:	bf00      	nop
  }
}
 800cd02:	37e8      	adds	r7, #232	; 0xe8
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}
 800cd08:	effffffe 	.word	0xeffffffe

0800cd0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b083      	sub	sp, #12
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cd14:	bf00      	nop
 800cd16:	370c      	adds	r7, #12
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr

0800cd20 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b083      	sub	sp, #12
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cd28:	bf00      	nop
 800cd2a:	370c      	adds	r7, #12
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr

0800cd34 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b083      	sub	sp, #12
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cd3c:	bf00      	nop
 800cd3e:	370c      	adds	r7, #12
 800cd40:	46bd      	mov	sp, r7
 800cd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd46:	4770      	bx	lr

0800cd48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b083      	sub	sp, #12
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cd50:	bf00      	nop
 800cd52:	370c      	adds	r7, #12
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr

0800cd5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b083      	sub	sp, #12
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	460b      	mov	r3, r1
 800cd66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cd68:	bf00      	nop
 800cd6a:	370c      	adds	r7, #12
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr

0800cd74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cd74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cd78:	b092      	sub	sp, #72	; 0x48
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	689a      	ldr	r2, [r3, #8]
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	691b      	ldr	r3, [r3, #16]
 800cd8c:	431a      	orrs	r2, r3
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	695b      	ldr	r3, [r3, #20]
 800cd92:	431a      	orrs	r2, r3
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	69db      	ldr	r3, [r3, #28]
 800cd98:	4313      	orrs	r3, r2
 800cd9a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	681a      	ldr	r2, [r3, #0]
 800cda2:	4bbe      	ldr	r3, [pc, #760]	; (800d09c <UART_SetConfig+0x328>)
 800cda4:	4013      	ands	r3, r2
 800cda6:	697a      	ldr	r2, [r7, #20]
 800cda8:	6812      	ldr	r2, [r2, #0]
 800cdaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cdac:	430b      	orrs	r3, r1
 800cdae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	68da      	ldr	r2, [r3, #12]
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	430a      	orrs	r2, r1
 800cdc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	699b      	ldr	r3, [r3, #24]
 800cdca:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4ab3      	ldr	r2, [pc, #716]	; (800d0a0 <UART_SetConfig+0x32c>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d004      	beq.n	800cde0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	6a1b      	ldr	r3, [r3, #32]
 800cdda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cddc:	4313      	orrs	r3, r2
 800cdde:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	689a      	ldr	r2, [r3, #8]
 800cde6:	4baf      	ldr	r3, [pc, #700]	; (800d0a4 <UART_SetConfig+0x330>)
 800cde8:	4013      	ands	r3, r2
 800cdea:	697a      	ldr	r2, [r7, #20]
 800cdec:	6812      	ldr	r2, [r2, #0]
 800cdee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cdf0:	430b      	orrs	r3, r1
 800cdf2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdfa:	f023 010f 	bic.w	r1, r3, #15
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	430a      	orrs	r2, r1
 800ce08:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4aa6      	ldr	r2, [pc, #664]	; (800d0a8 <UART_SetConfig+0x334>)
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d177      	bne.n	800cf04 <UART_SetConfig+0x190>
 800ce14:	4ba5      	ldr	r3, [pc, #660]	; (800d0ac <UART_SetConfig+0x338>)
 800ce16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ce1c:	2b28      	cmp	r3, #40	; 0x28
 800ce1e:	d86d      	bhi.n	800cefc <UART_SetConfig+0x188>
 800ce20:	a201      	add	r2, pc, #4	; (adr r2, 800ce28 <UART_SetConfig+0xb4>)
 800ce22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce26:	bf00      	nop
 800ce28:	0800cecd 	.word	0x0800cecd
 800ce2c:	0800cefd 	.word	0x0800cefd
 800ce30:	0800cefd 	.word	0x0800cefd
 800ce34:	0800cefd 	.word	0x0800cefd
 800ce38:	0800cefd 	.word	0x0800cefd
 800ce3c:	0800cefd 	.word	0x0800cefd
 800ce40:	0800cefd 	.word	0x0800cefd
 800ce44:	0800cefd 	.word	0x0800cefd
 800ce48:	0800ced5 	.word	0x0800ced5
 800ce4c:	0800cefd 	.word	0x0800cefd
 800ce50:	0800cefd 	.word	0x0800cefd
 800ce54:	0800cefd 	.word	0x0800cefd
 800ce58:	0800cefd 	.word	0x0800cefd
 800ce5c:	0800cefd 	.word	0x0800cefd
 800ce60:	0800cefd 	.word	0x0800cefd
 800ce64:	0800cefd 	.word	0x0800cefd
 800ce68:	0800cedd 	.word	0x0800cedd
 800ce6c:	0800cefd 	.word	0x0800cefd
 800ce70:	0800cefd 	.word	0x0800cefd
 800ce74:	0800cefd 	.word	0x0800cefd
 800ce78:	0800cefd 	.word	0x0800cefd
 800ce7c:	0800cefd 	.word	0x0800cefd
 800ce80:	0800cefd 	.word	0x0800cefd
 800ce84:	0800cefd 	.word	0x0800cefd
 800ce88:	0800cee5 	.word	0x0800cee5
 800ce8c:	0800cefd 	.word	0x0800cefd
 800ce90:	0800cefd 	.word	0x0800cefd
 800ce94:	0800cefd 	.word	0x0800cefd
 800ce98:	0800cefd 	.word	0x0800cefd
 800ce9c:	0800cefd 	.word	0x0800cefd
 800cea0:	0800cefd 	.word	0x0800cefd
 800cea4:	0800cefd 	.word	0x0800cefd
 800cea8:	0800ceed 	.word	0x0800ceed
 800ceac:	0800cefd 	.word	0x0800cefd
 800ceb0:	0800cefd 	.word	0x0800cefd
 800ceb4:	0800cefd 	.word	0x0800cefd
 800ceb8:	0800cefd 	.word	0x0800cefd
 800cebc:	0800cefd 	.word	0x0800cefd
 800cec0:	0800cefd 	.word	0x0800cefd
 800cec4:	0800cefd 	.word	0x0800cefd
 800cec8:	0800cef5 	.word	0x0800cef5
 800cecc:	2301      	movs	r3, #1
 800cece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ced2:	e222      	b.n	800d31a <UART_SetConfig+0x5a6>
 800ced4:	2304      	movs	r3, #4
 800ced6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceda:	e21e      	b.n	800d31a <UART_SetConfig+0x5a6>
 800cedc:	2308      	movs	r3, #8
 800cede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cee2:	e21a      	b.n	800d31a <UART_SetConfig+0x5a6>
 800cee4:	2310      	movs	r3, #16
 800cee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceea:	e216      	b.n	800d31a <UART_SetConfig+0x5a6>
 800ceec:	2320      	movs	r3, #32
 800ceee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cef2:	e212      	b.n	800d31a <UART_SetConfig+0x5a6>
 800cef4:	2340      	movs	r3, #64	; 0x40
 800cef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cefa:	e20e      	b.n	800d31a <UART_SetConfig+0x5a6>
 800cefc:	2380      	movs	r3, #128	; 0x80
 800cefe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf02:	e20a      	b.n	800d31a <UART_SetConfig+0x5a6>
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	4a69      	ldr	r2, [pc, #420]	; (800d0b0 <UART_SetConfig+0x33c>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d130      	bne.n	800cf70 <UART_SetConfig+0x1fc>
 800cf0e:	4b67      	ldr	r3, [pc, #412]	; (800d0ac <UART_SetConfig+0x338>)
 800cf10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf12:	f003 0307 	and.w	r3, r3, #7
 800cf16:	2b05      	cmp	r3, #5
 800cf18:	d826      	bhi.n	800cf68 <UART_SetConfig+0x1f4>
 800cf1a:	a201      	add	r2, pc, #4	; (adr r2, 800cf20 <UART_SetConfig+0x1ac>)
 800cf1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf20:	0800cf39 	.word	0x0800cf39
 800cf24:	0800cf41 	.word	0x0800cf41
 800cf28:	0800cf49 	.word	0x0800cf49
 800cf2c:	0800cf51 	.word	0x0800cf51
 800cf30:	0800cf59 	.word	0x0800cf59
 800cf34:	0800cf61 	.word	0x0800cf61
 800cf38:	2300      	movs	r3, #0
 800cf3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf3e:	e1ec      	b.n	800d31a <UART_SetConfig+0x5a6>
 800cf40:	2304      	movs	r3, #4
 800cf42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf46:	e1e8      	b.n	800d31a <UART_SetConfig+0x5a6>
 800cf48:	2308      	movs	r3, #8
 800cf4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf4e:	e1e4      	b.n	800d31a <UART_SetConfig+0x5a6>
 800cf50:	2310      	movs	r3, #16
 800cf52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf56:	e1e0      	b.n	800d31a <UART_SetConfig+0x5a6>
 800cf58:	2320      	movs	r3, #32
 800cf5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf5e:	e1dc      	b.n	800d31a <UART_SetConfig+0x5a6>
 800cf60:	2340      	movs	r3, #64	; 0x40
 800cf62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf66:	e1d8      	b.n	800d31a <UART_SetConfig+0x5a6>
 800cf68:	2380      	movs	r3, #128	; 0x80
 800cf6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf6e:	e1d4      	b.n	800d31a <UART_SetConfig+0x5a6>
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4a4f      	ldr	r2, [pc, #316]	; (800d0b4 <UART_SetConfig+0x340>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d130      	bne.n	800cfdc <UART_SetConfig+0x268>
 800cf7a:	4b4c      	ldr	r3, [pc, #304]	; (800d0ac <UART_SetConfig+0x338>)
 800cf7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf7e:	f003 0307 	and.w	r3, r3, #7
 800cf82:	2b05      	cmp	r3, #5
 800cf84:	d826      	bhi.n	800cfd4 <UART_SetConfig+0x260>
 800cf86:	a201      	add	r2, pc, #4	; (adr r2, 800cf8c <UART_SetConfig+0x218>)
 800cf88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf8c:	0800cfa5 	.word	0x0800cfa5
 800cf90:	0800cfad 	.word	0x0800cfad
 800cf94:	0800cfb5 	.word	0x0800cfb5
 800cf98:	0800cfbd 	.word	0x0800cfbd
 800cf9c:	0800cfc5 	.word	0x0800cfc5
 800cfa0:	0800cfcd 	.word	0x0800cfcd
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfaa:	e1b6      	b.n	800d31a <UART_SetConfig+0x5a6>
 800cfac:	2304      	movs	r3, #4
 800cfae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfb2:	e1b2      	b.n	800d31a <UART_SetConfig+0x5a6>
 800cfb4:	2308      	movs	r3, #8
 800cfb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfba:	e1ae      	b.n	800d31a <UART_SetConfig+0x5a6>
 800cfbc:	2310      	movs	r3, #16
 800cfbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfc2:	e1aa      	b.n	800d31a <UART_SetConfig+0x5a6>
 800cfc4:	2320      	movs	r3, #32
 800cfc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfca:	e1a6      	b.n	800d31a <UART_SetConfig+0x5a6>
 800cfcc:	2340      	movs	r3, #64	; 0x40
 800cfce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfd2:	e1a2      	b.n	800d31a <UART_SetConfig+0x5a6>
 800cfd4:	2380      	movs	r3, #128	; 0x80
 800cfd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfda:	e19e      	b.n	800d31a <UART_SetConfig+0x5a6>
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4a35      	ldr	r2, [pc, #212]	; (800d0b8 <UART_SetConfig+0x344>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d130      	bne.n	800d048 <UART_SetConfig+0x2d4>
 800cfe6:	4b31      	ldr	r3, [pc, #196]	; (800d0ac <UART_SetConfig+0x338>)
 800cfe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfea:	f003 0307 	and.w	r3, r3, #7
 800cfee:	2b05      	cmp	r3, #5
 800cff0:	d826      	bhi.n	800d040 <UART_SetConfig+0x2cc>
 800cff2:	a201      	add	r2, pc, #4	; (adr r2, 800cff8 <UART_SetConfig+0x284>)
 800cff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cff8:	0800d011 	.word	0x0800d011
 800cffc:	0800d019 	.word	0x0800d019
 800d000:	0800d021 	.word	0x0800d021
 800d004:	0800d029 	.word	0x0800d029
 800d008:	0800d031 	.word	0x0800d031
 800d00c:	0800d039 	.word	0x0800d039
 800d010:	2300      	movs	r3, #0
 800d012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d016:	e180      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d018:	2304      	movs	r3, #4
 800d01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d01e:	e17c      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d020:	2308      	movs	r3, #8
 800d022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d026:	e178      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d028:	2310      	movs	r3, #16
 800d02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d02e:	e174      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d030:	2320      	movs	r3, #32
 800d032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d036:	e170      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d038:	2340      	movs	r3, #64	; 0x40
 800d03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d03e:	e16c      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d040:	2380      	movs	r3, #128	; 0x80
 800d042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d046:	e168      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	4a1b      	ldr	r2, [pc, #108]	; (800d0bc <UART_SetConfig+0x348>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d142      	bne.n	800d0d8 <UART_SetConfig+0x364>
 800d052:	4b16      	ldr	r3, [pc, #88]	; (800d0ac <UART_SetConfig+0x338>)
 800d054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d056:	f003 0307 	and.w	r3, r3, #7
 800d05a:	2b05      	cmp	r3, #5
 800d05c:	d838      	bhi.n	800d0d0 <UART_SetConfig+0x35c>
 800d05e:	a201      	add	r2, pc, #4	; (adr r2, 800d064 <UART_SetConfig+0x2f0>)
 800d060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d064:	0800d07d 	.word	0x0800d07d
 800d068:	0800d085 	.word	0x0800d085
 800d06c:	0800d08d 	.word	0x0800d08d
 800d070:	0800d095 	.word	0x0800d095
 800d074:	0800d0c1 	.word	0x0800d0c1
 800d078:	0800d0c9 	.word	0x0800d0c9
 800d07c:	2300      	movs	r3, #0
 800d07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d082:	e14a      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d084:	2304      	movs	r3, #4
 800d086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d08a:	e146      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d08c:	2308      	movs	r3, #8
 800d08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d092:	e142      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d094:	2310      	movs	r3, #16
 800d096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d09a:	e13e      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d09c:	cfff69f3 	.word	0xcfff69f3
 800d0a0:	58000c00 	.word	0x58000c00
 800d0a4:	11fff4ff 	.word	0x11fff4ff
 800d0a8:	40011000 	.word	0x40011000
 800d0ac:	58024400 	.word	0x58024400
 800d0b0:	40004400 	.word	0x40004400
 800d0b4:	40004800 	.word	0x40004800
 800d0b8:	40004c00 	.word	0x40004c00
 800d0bc:	40005000 	.word	0x40005000
 800d0c0:	2320      	movs	r3, #32
 800d0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0c6:	e128      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d0c8:	2340      	movs	r3, #64	; 0x40
 800d0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0ce:	e124      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d0d0:	2380      	movs	r3, #128	; 0x80
 800d0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0d6:	e120      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4acb      	ldr	r2, [pc, #812]	; (800d40c <UART_SetConfig+0x698>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d176      	bne.n	800d1d0 <UART_SetConfig+0x45c>
 800d0e2:	4bcb      	ldr	r3, [pc, #812]	; (800d410 <UART_SetConfig+0x69c>)
 800d0e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d0ea:	2b28      	cmp	r3, #40	; 0x28
 800d0ec:	d86c      	bhi.n	800d1c8 <UART_SetConfig+0x454>
 800d0ee:	a201      	add	r2, pc, #4	; (adr r2, 800d0f4 <UART_SetConfig+0x380>)
 800d0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0f4:	0800d199 	.word	0x0800d199
 800d0f8:	0800d1c9 	.word	0x0800d1c9
 800d0fc:	0800d1c9 	.word	0x0800d1c9
 800d100:	0800d1c9 	.word	0x0800d1c9
 800d104:	0800d1c9 	.word	0x0800d1c9
 800d108:	0800d1c9 	.word	0x0800d1c9
 800d10c:	0800d1c9 	.word	0x0800d1c9
 800d110:	0800d1c9 	.word	0x0800d1c9
 800d114:	0800d1a1 	.word	0x0800d1a1
 800d118:	0800d1c9 	.word	0x0800d1c9
 800d11c:	0800d1c9 	.word	0x0800d1c9
 800d120:	0800d1c9 	.word	0x0800d1c9
 800d124:	0800d1c9 	.word	0x0800d1c9
 800d128:	0800d1c9 	.word	0x0800d1c9
 800d12c:	0800d1c9 	.word	0x0800d1c9
 800d130:	0800d1c9 	.word	0x0800d1c9
 800d134:	0800d1a9 	.word	0x0800d1a9
 800d138:	0800d1c9 	.word	0x0800d1c9
 800d13c:	0800d1c9 	.word	0x0800d1c9
 800d140:	0800d1c9 	.word	0x0800d1c9
 800d144:	0800d1c9 	.word	0x0800d1c9
 800d148:	0800d1c9 	.word	0x0800d1c9
 800d14c:	0800d1c9 	.word	0x0800d1c9
 800d150:	0800d1c9 	.word	0x0800d1c9
 800d154:	0800d1b1 	.word	0x0800d1b1
 800d158:	0800d1c9 	.word	0x0800d1c9
 800d15c:	0800d1c9 	.word	0x0800d1c9
 800d160:	0800d1c9 	.word	0x0800d1c9
 800d164:	0800d1c9 	.word	0x0800d1c9
 800d168:	0800d1c9 	.word	0x0800d1c9
 800d16c:	0800d1c9 	.word	0x0800d1c9
 800d170:	0800d1c9 	.word	0x0800d1c9
 800d174:	0800d1b9 	.word	0x0800d1b9
 800d178:	0800d1c9 	.word	0x0800d1c9
 800d17c:	0800d1c9 	.word	0x0800d1c9
 800d180:	0800d1c9 	.word	0x0800d1c9
 800d184:	0800d1c9 	.word	0x0800d1c9
 800d188:	0800d1c9 	.word	0x0800d1c9
 800d18c:	0800d1c9 	.word	0x0800d1c9
 800d190:	0800d1c9 	.word	0x0800d1c9
 800d194:	0800d1c1 	.word	0x0800d1c1
 800d198:	2301      	movs	r3, #1
 800d19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d19e:	e0bc      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d1a0:	2304      	movs	r3, #4
 800d1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1a6:	e0b8      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d1a8:	2308      	movs	r3, #8
 800d1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ae:	e0b4      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d1b0:	2310      	movs	r3, #16
 800d1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1b6:	e0b0      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d1b8:	2320      	movs	r3, #32
 800d1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1be:	e0ac      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d1c0:	2340      	movs	r3, #64	; 0x40
 800d1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1c6:	e0a8      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d1c8:	2380      	movs	r3, #128	; 0x80
 800d1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ce:	e0a4      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4a8f      	ldr	r2, [pc, #572]	; (800d414 <UART_SetConfig+0x6a0>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d130      	bne.n	800d23c <UART_SetConfig+0x4c8>
 800d1da:	4b8d      	ldr	r3, [pc, #564]	; (800d410 <UART_SetConfig+0x69c>)
 800d1dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1de:	f003 0307 	and.w	r3, r3, #7
 800d1e2:	2b05      	cmp	r3, #5
 800d1e4:	d826      	bhi.n	800d234 <UART_SetConfig+0x4c0>
 800d1e6:	a201      	add	r2, pc, #4	; (adr r2, 800d1ec <UART_SetConfig+0x478>)
 800d1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1ec:	0800d205 	.word	0x0800d205
 800d1f0:	0800d20d 	.word	0x0800d20d
 800d1f4:	0800d215 	.word	0x0800d215
 800d1f8:	0800d21d 	.word	0x0800d21d
 800d1fc:	0800d225 	.word	0x0800d225
 800d200:	0800d22d 	.word	0x0800d22d
 800d204:	2300      	movs	r3, #0
 800d206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d20a:	e086      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d20c:	2304      	movs	r3, #4
 800d20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d212:	e082      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d214:	2308      	movs	r3, #8
 800d216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d21a:	e07e      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d21c:	2310      	movs	r3, #16
 800d21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d222:	e07a      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d224:	2320      	movs	r3, #32
 800d226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d22a:	e076      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d22c:	2340      	movs	r3, #64	; 0x40
 800d22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d232:	e072      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d234:	2380      	movs	r3, #128	; 0x80
 800d236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d23a:	e06e      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4a75      	ldr	r2, [pc, #468]	; (800d418 <UART_SetConfig+0x6a4>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d130      	bne.n	800d2a8 <UART_SetConfig+0x534>
 800d246:	4b72      	ldr	r3, [pc, #456]	; (800d410 <UART_SetConfig+0x69c>)
 800d248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d24a:	f003 0307 	and.w	r3, r3, #7
 800d24e:	2b05      	cmp	r3, #5
 800d250:	d826      	bhi.n	800d2a0 <UART_SetConfig+0x52c>
 800d252:	a201      	add	r2, pc, #4	; (adr r2, 800d258 <UART_SetConfig+0x4e4>)
 800d254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d258:	0800d271 	.word	0x0800d271
 800d25c:	0800d279 	.word	0x0800d279
 800d260:	0800d281 	.word	0x0800d281
 800d264:	0800d289 	.word	0x0800d289
 800d268:	0800d291 	.word	0x0800d291
 800d26c:	0800d299 	.word	0x0800d299
 800d270:	2300      	movs	r3, #0
 800d272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d276:	e050      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d278:	2304      	movs	r3, #4
 800d27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d27e:	e04c      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d280:	2308      	movs	r3, #8
 800d282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d286:	e048      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d288:	2310      	movs	r3, #16
 800d28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d28e:	e044      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d290:	2320      	movs	r3, #32
 800d292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d296:	e040      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d298:	2340      	movs	r3, #64	; 0x40
 800d29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d29e:	e03c      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d2a0:	2380      	movs	r3, #128	; 0x80
 800d2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2a6:	e038      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4a5b      	ldr	r2, [pc, #364]	; (800d41c <UART_SetConfig+0x6a8>)
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d130      	bne.n	800d314 <UART_SetConfig+0x5a0>
 800d2b2:	4b57      	ldr	r3, [pc, #348]	; (800d410 <UART_SetConfig+0x69c>)
 800d2b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2b6:	f003 0307 	and.w	r3, r3, #7
 800d2ba:	2b05      	cmp	r3, #5
 800d2bc:	d826      	bhi.n	800d30c <UART_SetConfig+0x598>
 800d2be:	a201      	add	r2, pc, #4	; (adr r2, 800d2c4 <UART_SetConfig+0x550>)
 800d2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2c4:	0800d2dd 	.word	0x0800d2dd
 800d2c8:	0800d2e5 	.word	0x0800d2e5
 800d2cc:	0800d2ed 	.word	0x0800d2ed
 800d2d0:	0800d2f5 	.word	0x0800d2f5
 800d2d4:	0800d2fd 	.word	0x0800d2fd
 800d2d8:	0800d305 	.word	0x0800d305
 800d2dc:	2302      	movs	r3, #2
 800d2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2e2:	e01a      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d2e4:	2304      	movs	r3, #4
 800d2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ea:	e016      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d2ec:	2308      	movs	r3, #8
 800d2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2f2:	e012      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d2f4:	2310      	movs	r3, #16
 800d2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2fa:	e00e      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d2fc:	2320      	movs	r3, #32
 800d2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d302:	e00a      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d304:	2340      	movs	r3, #64	; 0x40
 800d306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d30a:	e006      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d30c:	2380      	movs	r3, #128	; 0x80
 800d30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d312:	e002      	b.n	800d31a <UART_SetConfig+0x5a6>
 800d314:	2380      	movs	r3, #128	; 0x80
 800d316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a3f      	ldr	r2, [pc, #252]	; (800d41c <UART_SetConfig+0x6a8>)
 800d320:	4293      	cmp	r3, r2
 800d322:	f040 80f8 	bne.w	800d516 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d326:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d32a:	2b20      	cmp	r3, #32
 800d32c:	dc46      	bgt.n	800d3bc <UART_SetConfig+0x648>
 800d32e:	2b02      	cmp	r3, #2
 800d330:	f2c0 8082 	blt.w	800d438 <UART_SetConfig+0x6c4>
 800d334:	3b02      	subs	r3, #2
 800d336:	2b1e      	cmp	r3, #30
 800d338:	d87e      	bhi.n	800d438 <UART_SetConfig+0x6c4>
 800d33a:	a201      	add	r2, pc, #4	; (adr r2, 800d340 <UART_SetConfig+0x5cc>)
 800d33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d340:	0800d3c3 	.word	0x0800d3c3
 800d344:	0800d439 	.word	0x0800d439
 800d348:	0800d3cb 	.word	0x0800d3cb
 800d34c:	0800d439 	.word	0x0800d439
 800d350:	0800d439 	.word	0x0800d439
 800d354:	0800d439 	.word	0x0800d439
 800d358:	0800d3db 	.word	0x0800d3db
 800d35c:	0800d439 	.word	0x0800d439
 800d360:	0800d439 	.word	0x0800d439
 800d364:	0800d439 	.word	0x0800d439
 800d368:	0800d439 	.word	0x0800d439
 800d36c:	0800d439 	.word	0x0800d439
 800d370:	0800d439 	.word	0x0800d439
 800d374:	0800d439 	.word	0x0800d439
 800d378:	0800d3eb 	.word	0x0800d3eb
 800d37c:	0800d439 	.word	0x0800d439
 800d380:	0800d439 	.word	0x0800d439
 800d384:	0800d439 	.word	0x0800d439
 800d388:	0800d439 	.word	0x0800d439
 800d38c:	0800d439 	.word	0x0800d439
 800d390:	0800d439 	.word	0x0800d439
 800d394:	0800d439 	.word	0x0800d439
 800d398:	0800d439 	.word	0x0800d439
 800d39c:	0800d439 	.word	0x0800d439
 800d3a0:	0800d439 	.word	0x0800d439
 800d3a4:	0800d439 	.word	0x0800d439
 800d3a8:	0800d439 	.word	0x0800d439
 800d3ac:	0800d439 	.word	0x0800d439
 800d3b0:	0800d439 	.word	0x0800d439
 800d3b4:	0800d439 	.word	0x0800d439
 800d3b8:	0800d42b 	.word	0x0800d42b
 800d3bc:	2b40      	cmp	r3, #64	; 0x40
 800d3be:	d037      	beq.n	800d430 <UART_SetConfig+0x6bc>
 800d3c0:	e03a      	b.n	800d438 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d3c2:	f7fd fc1b 	bl	800abfc <HAL_RCCEx_GetD3PCLK1Freq>
 800d3c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d3c8:	e03c      	b.n	800d444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7fd fc2a 	bl	800ac28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3d8:	e034      	b.n	800d444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d3da:	f107 0318 	add.w	r3, r7, #24
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7fd fd76 	bl	800aed0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d3e4:	69fb      	ldr	r3, [r7, #28]
 800d3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3e8:	e02c      	b.n	800d444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3ea:	4b09      	ldr	r3, [pc, #36]	; (800d410 <UART_SetConfig+0x69c>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f003 0320 	and.w	r3, r3, #32
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d016      	beq.n	800d424 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d3f6:	4b06      	ldr	r3, [pc, #24]	; (800d410 <UART_SetConfig+0x69c>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	08db      	lsrs	r3, r3, #3
 800d3fc:	f003 0303 	and.w	r3, r3, #3
 800d400:	4a07      	ldr	r2, [pc, #28]	; (800d420 <UART_SetConfig+0x6ac>)
 800d402:	fa22 f303 	lsr.w	r3, r2, r3
 800d406:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d408:	e01c      	b.n	800d444 <UART_SetConfig+0x6d0>
 800d40a:	bf00      	nop
 800d40c:	40011400 	.word	0x40011400
 800d410:	58024400 	.word	0x58024400
 800d414:	40007800 	.word	0x40007800
 800d418:	40007c00 	.word	0x40007c00
 800d41c:	58000c00 	.word	0x58000c00
 800d420:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d424:	4b9d      	ldr	r3, [pc, #628]	; (800d69c <UART_SetConfig+0x928>)
 800d426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d428:	e00c      	b.n	800d444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d42a:	4b9d      	ldr	r3, [pc, #628]	; (800d6a0 <UART_SetConfig+0x92c>)
 800d42c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d42e:	e009      	b.n	800d444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d430:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d434:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d436:	e005      	b.n	800d444 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d438:	2300      	movs	r3, #0
 800d43a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d43c:	2301      	movs	r3, #1
 800d43e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d442:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d446:	2b00      	cmp	r3, #0
 800d448:	f000 81de 	beq.w	800d808 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d450:	4a94      	ldr	r2, [pc, #592]	; (800d6a4 <UART_SetConfig+0x930>)
 800d452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d456:	461a      	mov	r2, r3
 800d458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d45a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d45e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	685a      	ldr	r2, [r3, #4]
 800d464:	4613      	mov	r3, r2
 800d466:	005b      	lsls	r3, r3, #1
 800d468:	4413      	add	r3, r2
 800d46a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d46c:	429a      	cmp	r2, r3
 800d46e:	d305      	bcc.n	800d47c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d478:	429a      	cmp	r2, r3
 800d47a:	d903      	bls.n	800d484 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d47c:	2301      	movs	r3, #1
 800d47e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d482:	e1c1      	b.n	800d808 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d486:	2200      	movs	r2, #0
 800d488:	60bb      	str	r3, [r7, #8]
 800d48a:	60fa      	str	r2, [r7, #12]
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d490:	4a84      	ldr	r2, [pc, #528]	; (800d6a4 <UART_SetConfig+0x930>)
 800d492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d496:	b29b      	uxth	r3, r3
 800d498:	2200      	movs	r2, #0
 800d49a:	603b      	str	r3, [r7, #0]
 800d49c:	607a      	str	r2, [r7, #4]
 800d49e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d4a6:	f7f2 ff73 	bl	8000390 <__aeabi_uldivmod>
 800d4aa:	4602      	mov	r2, r0
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	4610      	mov	r0, r2
 800d4b0:	4619      	mov	r1, r3
 800d4b2:	f04f 0200 	mov.w	r2, #0
 800d4b6:	f04f 0300 	mov.w	r3, #0
 800d4ba:	020b      	lsls	r3, r1, #8
 800d4bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d4c0:	0202      	lsls	r2, r0, #8
 800d4c2:	6979      	ldr	r1, [r7, #20]
 800d4c4:	6849      	ldr	r1, [r1, #4]
 800d4c6:	0849      	lsrs	r1, r1, #1
 800d4c8:	2000      	movs	r0, #0
 800d4ca:	460c      	mov	r4, r1
 800d4cc:	4605      	mov	r5, r0
 800d4ce:	eb12 0804 	adds.w	r8, r2, r4
 800d4d2:	eb43 0905 	adc.w	r9, r3, r5
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	469a      	mov	sl, r3
 800d4de:	4693      	mov	fp, r2
 800d4e0:	4652      	mov	r2, sl
 800d4e2:	465b      	mov	r3, fp
 800d4e4:	4640      	mov	r0, r8
 800d4e6:	4649      	mov	r1, r9
 800d4e8:	f7f2 ff52 	bl	8000390 <__aeabi_uldivmod>
 800d4ec:	4602      	mov	r2, r0
 800d4ee:	460b      	mov	r3, r1
 800d4f0:	4613      	mov	r3, r2
 800d4f2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d4fa:	d308      	bcc.n	800d50e <UART_SetConfig+0x79a>
 800d4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d502:	d204      	bcs.n	800d50e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d50a:	60da      	str	r2, [r3, #12]
 800d50c:	e17c      	b.n	800d808 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d50e:	2301      	movs	r3, #1
 800d510:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d514:	e178      	b.n	800d808 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	69db      	ldr	r3, [r3, #28]
 800d51a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d51e:	f040 80c5 	bne.w	800d6ac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d522:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d526:	2b20      	cmp	r3, #32
 800d528:	dc48      	bgt.n	800d5bc <UART_SetConfig+0x848>
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	db7b      	blt.n	800d626 <UART_SetConfig+0x8b2>
 800d52e:	2b20      	cmp	r3, #32
 800d530:	d879      	bhi.n	800d626 <UART_SetConfig+0x8b2>
 800d532:	a201      	add	r2, pc, #4	; (adr r2, 800d538 <UART_SetConfig+0x7c4>)
 800d534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d538:	0800d5c3 	.word	0x0800d5c3
 800d53c:	0800d5cb 	.word	0x0800d5cb
 800d540:	0800d627 	.word	0x0800d627
 800d544:	0800d627 	.word	0x0800d627
 800d548:	0800d5d3 	.word	0x0800d5d3
 800d54c:	0800d627 	.word	0x0800d627
 800d550:	0800d627 	.word	0x0800d627
 800d554:	0800d627 	.word	0x0800d627
 800d558:	0800d5e3 	.word	0x0800d5e3
 800d55c:	0800d627 	.word	0x0800d627
 800d560:	0800d627 	.word	0x0800d627
 800d564:	0800d627 	.word	0x0800d627
 800d568:	0800d627 	.word	0x0800d627
 800d56c:	0800d627 	.word	0x0800d627
 800d570:	0800d627 	.word	0x0800d627
 800d574:	0800d627 	.word	0x0800d627
 800d578:	0800d5f3 	.word	0x0800d5f3
 800d57c:	0800d627 	.word	0x0800d627
 800d580:	0800d627 	.word	0x0800d627
 800d584:	0800d627 	.word	0x0800d627
 800d588:	0800d627 	.word	0x0800d627
 800d58c:	0800d627 	.word	0x0800d627
 800d590:	0800d627 	.word	0x0800d627
 800d594:	0800d627 	.word	0x0800d627
 800d598:	0800d627 	.word	0x0800d627
 800d59c:	0800d627 	.word	0x0800d627
 800d5a0:	0800d627 	.word	0x0800d627
 800d5a4:	0800d627 	.word	0x0800d627
 800d5a8:	0800d627 	.word	0x0800d627
 800d5ac:	0800d627 	.word	0x0800d627
 800d5b0:	0800d627 	.word	0x0800d627
 800d5b4:	0800d627 	.word	0x0800d627
 800d5b8:	0800d619 	.word	0x0800d619
 800d5bc:	2b40      	cmp	r3, #64	; 0x40
 800d5be:	d02e      	beq.n	800d61e <UART_SetConfig+0x8aa>
 800d5c0:	e031      	b.n	800d626 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d5c2:	f7fc f8e5 	bl	8009790 <HAL_RCC_GetPCLK1Freq>
 800d5c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d5c8:	e033      	b.n	800d632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d5ca:	f7fc f8f7 	bl	80097bc <HAL_RCC_GetPCLK2Freq>
 800d5ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d5d0:	e02f      	b.n	800d632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7fd fb26 	bl	800ac28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5e0:	e027      	b.n	800d632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d5e2:	f107 0318 	add.w	r3, r7, #24
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7fd fc72 	bl	800aed0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d5ec:	69fb      	ldr	r3, [r7, #28]
 800d5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5f0:	e01f      	b.n	800d632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5f2:	4b2d      	ldr	r3, [pc, #180]	; (800d6a8 <UART_SetConfig+0x934>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f003 0320 	and.w	r3, r3, #32
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d009      	beq.n	800d612 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d5fe:	4b2a      	ldr	r3, [pc, #168]	; (800d6a8 <UART_SetConfig+0x934>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	08db      	lsrs	r3, r3, #3
 800d604:	f003 0303 	and.w	r3, r3, #3
 800d608:	4a24      	ldr	r2, [pc, #144]	; (800d69c <UART_SetConfig+0x928>)
 800d60a:	fa22 f303 	lsr.w	r3, r2, r3
 800d60e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d610:	e00f      	b.n	800d632 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d612:	4b22      	ldr	r3, [pc, #136]	; (800d69c <UART_SetConfig+0x928>)
 800d614:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d616:	e00c      	b.n	800d632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d618:	4b21      	ldr	r3, [pc, #132]	; (800d6a0 <UART_SetConfig+0x92c>)
 800d61a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d61c:	e009      	b.n	800d632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d61e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d624:	e005      	b.n	800d632 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d626:	2300      	movs	r3, #0
 800d628:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d62a:	2301      	movs	r3, #1
 800d62c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d630:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d634:	2b00      	cmp	r3, #0
 800d636:	f000 80e7 	beq.w	800d808 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d63e:	4a19      	ldr	r2, [pc, #100]	; (800d6a4 <UART_SetConfig+0x930>)
 800d640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d644:	461a      	mov	r2, r3
 800d646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d648:	fbb3 f3f2 	udiv	r3, r3, r2
 800d64c:	005a      	lsls	r2, r3, #1
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	085b      	lsrs	r3, r3, #1
 800d654:	441a      	add	r2, r3
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	685b      	ldr	r3, [r3, #4]
 800d65a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d65e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d662:	2b0f      	cmp	r3, #15
 800d664:	d916      	bls.n	800d694 <UART_SetConfig+0x920>
 800d666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d66c:	d212      	bcs.n	800d694 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d670:	b29b      	uxth	r3, r3
 800d672:	f023 030f 	bic.w	r3, r3, #15
 800d676:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67a:	085b      	lsrs	r3, r3, #1
 800d67c:	b29b      	uxth	r3, r3
 800d67e:	f003 0307 	and.w	r3, r3, #7
 800d682:	b29a      	uxth	r2, r3
 800d684:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d686:	4313      	orrs	r3, r2
 800d688:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d690:	60da      	str	r2, [r3, #12]
 800d692:	e0b9      	b.n	800d808 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d694:	2301      	movs	r3, #1
 800d696:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d69a:	e0b5      	b.n	800d808 <UART_SetConfig+0xa94>
 800d69c:	03d09000 	.word	0x03d09000
 800d6a0:	003d0900 	.word	0x003d0900
 800d6a4:	0800ed74 	.word	0x0800ed74
 800d6a8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d6ac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d6b0:	2b20      	cmp	r3, #32
 800d6b2:	dc49      	bgt.n	800d748 <UART_SetConfig+0x9d4>
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	db7c      	blt.n	800d7b2 <UART_SetConfig+0xa3e>
 800d6b8:	2b20      	cmp	r3, #32
 800d6ba:	d87a      	bhi.n	800d7b2 <UART_SetConfig+0xa3e>
 800d6bc:	a201      	add	r2, pc, #4	; (adr r2, 800d6c4 <UART_SetConfig+0x950>)
 800d6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6c2:	bf00      	nop
 800d6c4:	0800d74f 	.word	0x0800d74f
 800d6c8:	0800d757 	.word	0x0800d757
 800d6cc:	0800d7b3 	.word	0x0800d7b3
 800d6d0:	0800d7b3 	.word	0x0800d7b3
 800d6d4:	0800d75f 	.word	0x0800d75f
 800d6d8:	0800d7b3 	.word	0x0800d7b3
 800d6dc:	0800d7b3 	.word	0x0800d7b3
 800d6e0:	0800d7b3 	.word	0x0800d7b3
 800d6e4:	0800d76f 	.word	0x0800d76f
 800d6e8:	0800d7b3 	.word	0x0800d7b3
 800d6ec:	0800d7b3 	.word	0x0800d7b3
 800d6f0:	0800d7b3 	.word	0x0800d7b3
 800d6f4:	0800d7b3 	.word	0x0800d7b3
 800d6f8:	0800d7b3 	.word	0x0800d7b3
 800d6fc:	0800d7b3 	.word	0x0800d7b3
 800d700:	0800d7b3 	.word	0x0800d7b3
 800d704:	0800d77f 	.word	0x0800d77f
 800d708:	0800d7b3 	.word	0x0800d7b3
 800d70c:	0800d7b3 	.word	0x0800d7b3
 800d710:	0800d7b3 	.word	0x0800d7b3
 800d714:	0800d7b3 	.word	0x0800d7b3
 800d718:	0800d7b3 	.word	0x0800d7b3
 800d71c:	0800d7b3 	.word	0x0800d7b3
 800d720:	0800d7b3 	.word	0x0800d7b3
 800d724:	0800d7b3 	.word	0x0800d7b3
 800d728:	0800d7b3 	.word	0x0800d7b3
 800d72c:	0800d7b3 	.word	0x0800d7b3
 800d730:	0800d7b3 	.word	0x0800d7b3
 800d734:	0800d7b3 	.word	0x0800d7b3
 800d738:	0800d7b3 	.word	0x0800d7b3
 800d73c:	0800d7b3 	.word	0x0800d7b3
 800d740:	0800d7b3 	.word	0x0800d7b3
 800d744:	0800d7a5 	.word	0x0800d7a5
 800d748:	2b40      	cmp	r3, #64	; 0x40
 800d74a:	d02e      	beq.n	800d7aa <UART_SetConfig+0xa36>
 800d74c:	e031      	b.n	800d7b2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d74e:	f7fc f81f 	bl	8009790 <HAL_RCC_GetPCLK1Freq>
 800d752:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d754:	e033      	b.n	800d7be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d756:	f7fc f831 	bl	80097bc <HAL_RCC_GetPCLK2Freq>
 800d75a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d75c:	e02f      	b.n	800d7be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d75e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d762:	4618      	mov	r0, r3
 800d764:	f7fd fa60 	bl	800ac28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d76a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d76c:	e027      	b.n	800d7be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d76e:	f107 0318 	add.w	r3, r7, #24
 800d772:	4618      	mov	r0, r3
 800d774:	f7fd fbac 	bl	800aed0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d778:	69fb      	ldr	r3, [r7, #28]
 800d77a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d77c:	e01f      	b.n	800d7be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d77e:	4b2d      	ldr	r3, [pc, #180]	; (800d834 <UART_SetConfig+0xac0>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f003 0320 	and.w	r3, r3, #32
 800d786:	2b00      	cmp	r3, #0
 800d788:	d009      	beq.n	800d79e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d78a:	4b2a      	ldr	r3, [pc, #168]	; (800d834 <UART_SetConfig+0xac0>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	08db      	lsrs	r3, r3, #3
 800d790:	f003 0303 	and.w	r3, r3, #3
 800d794:	4a28      	ldr	r2, [pc, #160]	; (800d838 <UART_SetConfig+0xac4>)
 800d796:	fa22 f303 	lsr.w	r3, r2, r3
 800d79a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d79c:	e00f      	b.n	800d7be <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d79e:	4b26      	ldr	r3, [pc, #152]	; (800d838 <UART_SetConfig+0xac4>)
 800d7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7a2:	e00c      	b.n	800d7be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d7a4:	4b25      	ldr	r3, [pc, #148]	; (800d83c <UART_SetConfig+0xac8>)
 800d7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7a8:	e009      	b.n	800d7be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d7aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7b0:	e005      	b.n	800d7be <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d7bc:	bf00      	nop
    }

    if (pclk != 0U)
 800d7be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d021      	beq.n	800d808 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7c8:	4a1d      	ldr	r2, [pc, #116]	; (800d840 <UART_SetConfig+0xacc>)
 800d7ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7d2:	fbb3 f2f2 	udiv	r2, r3, r2
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	685b      	ldr	r3, [r3, #4]
 800d7da:	085b      	lsrs	r3, r3, #1
 800d7dc:	441a      	add	r2, r3
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	685b      	ldr	r3, [r3, #4]
 800d7e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7e6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ea:	2b0f      	cmp	r3, #15
 800d7ec:	d909      	bls.n	800d802 <UART_SetConfig+0xa8e>
 800d7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7f4:	d205      	bcs.n	800d802 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f8:	b29a      	uxth	r2, r3
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	60da      	str	r2, [r3, #12]
 800d800:	e002      	b.n	800d808 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d802:	2301      	movs	r3, #1
 800d804:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	2201      	movs	r2, #1
 800d80c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	2201      	movs	r2, #1
 800d814:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	2200      	movs	r2, #0
 800d81c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	2200      	movs	r2, #0
 800d822:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d824:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3748      	adds	r7, #72	; 0x48
 800d82c:	46bd      	mov	sp, r7
 800d82e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d832:	bf00      	nop
 800d834:	58024400 	.word	0x58024400
 800d838:	03d09000 	.word	0x03d09000
 800d83c:	003d0900 	.word	0x003d0900
 800d840:	0800ed74 	.word	0x0800ed74

0800d844 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d844:	b480      	push	{r7}
 800d846:	b083      	sub	sp, #12
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d850:	f003 0301 	and.w	r3, r3, #1
 800d854:	2b00      	cmp	r3, #0
 800d856:	d00a      	beq.n	800d86e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	430a      	orrs	r2, r1
 800d86c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d872:	f003 0302 	and.w	r3, r3, #2
 800d876:	2b00      	cmp	r3, #0
 800d878:	d00a      	beq.n	800d890 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	430a      	orrs	r2, r1
 800d88e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d894:	f003 0304 	and.w	r3, r3, #4
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d00a      	beq.n	800d8b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	685b      	ldr	r3, [r3, #4]
 800d8a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	430a      	orrs	r2, r1
 800d8b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8b6:	f003 0308 	and.w	r3, r3, #8
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d00a      	beq.n	800d8d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	685b      	ldr	r3, [r3, #4]
 800d8c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	430a      	orrs	r2, r1
 800d8d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8d8:	f003 0310 	and.w	r3, r3, #16
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d00a      	beq.n	800d8f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	689b      	ldr	r3, [r3, #8]
 800d8e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	430a      	orrs	r2, r1
 800d8f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8fa:	f003 0320 	and.w	r3, r3, #32
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d00a      	beq.n	800d918 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	689b      	ldr	r3, [r3, #8]
 800d908:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	430a      	orrs	r2, r1
 800d916:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d91c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d920:	2b00      	cmp	r3, #0
 800d922:	d01a      	beq.n	800d95a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	685b      	ldr	r3, [r3, #4]
 800d92a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	430a      	orrs	r2, r1
 800d938:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d93e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d942:	d10a      	bne.n	800d95a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	685b      	ldr	r3, [r3, #4]
 800d94a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	430a      	orrs	r2, r1
 800d958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d95e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d962:	2b00      	cmp	r3, #0
 800d964:	d00a      	beq.n	800d97c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	685b      	ldr	r3, [r3, #4]
 800d96c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	430a      	orrs	r2, r1
 800d97a:	605a      	str	r2, [r3, #4]
  }
}
 800d97c:	bf00      	nop
 800d97e:	370c      	adds	r7, #12
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr

0800d988 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b098      	sub	sp, #96	; 0x60
 800d98c:	af02      	add	r7, sp, #8
 800d98e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2200      	movs	r2, #0
 800d994:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d998:	f7f6 fb56 	bl	8004048 <HAL_GetTick>
 800d99c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	f003 0308 	and.w	r3, r3, #8
 800d9a8:	2b08      	cmp	r3, #8
 800d9aa:	d12f      	bne.n	800da0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d9ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d9b0:	9300      	str	r3, [sp, #0]
 800d9b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f000 f88e 	bl	800dadc <UART_WaitOnFlagUntilTimeout>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d022      	beq.n	800da0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ce:	e853 3f00 	ldrex	r3, [r3]
 800d9d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d9da:	653b      	str	r3, [r7, #80]	; 0x50
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9e4:	647b      	str	r3, [r7, #68]	; 0x44
 800d9e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d9ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d9ec:	e841 2300 	strex	r3, r2, [r1]
 800d9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d9f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d1e6      	bne.n	800d9c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2220      	movs	r2, #32
 800d9fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2200      	movs	r2, #0
 800da04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da08:	2303      	movs	r3, #3
 800da0a:	e063      	b.n	800dad4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f003 0304 	and.w	r3, r3, #4
 800da16:	2b04      	cmp	r3, #4
 800da18:	d149      	bne.n	800daae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800da1e:	9300      	str	r3, [sp, #0]
 800da20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da22:	2200      	movs	r2, #0
 800da24:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f000 f857 	bl	800dadc <UART_WaitOnFlagUntilTimeout>
 800da2e:	4603      	mov	r3, r0
 800da30:	2b00      	cmp	r3, #0
 800da32:	d03c      	beq.n	800daae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3c:	e853 3f00 	ldrex	r3, [r3]
 800da40:	623b      	str	r3, [r7, #32]
   return(result);
 800da42:	6a3b      	ldr	r3, [r7, #32]
 800da44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800da48:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	461a      	mov	r2, r3
 800da50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da52:	633b      	str	r3, [r7, #48]	; 0x30
 800da54:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da5a:	e841 2300 	strex	r3, r2, [r1]
 800da5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800da60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da62:	2b00      	cmp	r3, #0
 800da64:	d1e6      	bne.n	800da34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	3308      	adds	r3, #8
 800da6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	e853 3f00 	ldrex	r3, [r3]
 800da74:	60fb      	str	r3, [r7, #12]
   return(result);
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	f023 0301 	bic.w	r3, r3, #1
 800da7c:	64bb      	str	r3, [r7, #72]	; 0x48
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	3308      	adds	r3, #8
 800da84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da86:	61fa      	str	r2, [r7, #28]
 800da88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da8a:	69b9      	ldr	r1, [r7, #24]
 800da8c:	69fa      	ldr	r2, [r7, #28]
 800da8e:	e841 2300 	strex	r3, r2, [r1]
 800da92:	617b      	str	r3, [r7, #20]
   return(result);
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d1e5      	bne.n	800da66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2220      	movs	r2, #32
 800da9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2200      	movs	r2, #0
 800daa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800daaa:	2303      	movs	r3, #3
 800daac:	e012      	b.n	800dad4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2220      	movs	r2, #32
 800dab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2220      	movs	r2, #32
 800daba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2200      	movs	r2, #0
 800dac2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2200      	movs	r2, #0
 800dac8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2200      	movs	r2, #0
 800dace:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dad2:	2300      	movs	r3, #0
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3758      	adds	r7, #88	; 0x58
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b084      	sub	sp, #16
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	60f8      	str	r0, [r7, #12]
 800dae4:	60b9      	str	r1, [r7, #8]
 800dae6:	603b      	str	r3, [r7, #0]
 800dae8:	4613      	mov	r3, r2
 800daea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800daec:	e049      	b.n	800db82 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800daee:	69bb      	ldr	r3, [r7, #24]
 800daf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daf4:	d045      	beq.n	800db82 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800daf6:	f7f6 faa7 	bl	8004048 <HAL_GetTick>
 800dafa:	4602      	mov	r2, r0
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	1ad3      	subs	r3, r2, r3
 800db00:	69ba      	ldr	r2, [r7, #24]
 800db02:	429a      	cmp	r2, r3
 800db04:	d302      	bcc.n	800db0c <UART_WaitOnFlagUntilTimeout+0x30>
 800db06:	69bb      	ldr	r3, [r7, #24]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d101      	bne.n	800db10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800db0c:	2303      	movs	r3, #3
 800db0e:	e048      	b.n	800dba2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f003 0304 	and.w	r3, r3, #4
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d031      	beq.n	800db82 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	69db      	ldr	r3, [r3, #28]
 800db24:	f003 0308 	and.w	r3, r3, #8
 800db28:	2b08      	cmp	r3, #8
 800db2a:	d110      	bne.n	800db4e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	2208      	movs	r2, #8
 800db32:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800db34:	68f8      	ldr	r0, [r7, #12]
 800db36:	f000 f921 	bl	800dd7c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2208      	movs	r2, #8
 800db3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2200      	movs	r2, #0
 800db46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800db4a:	2301      	movs	r3, #1
 800db4c:	e029      	b.n	800dba2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	69db      	ldr	r3, [r3, #28]
 800db54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800db58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db5c:	d111      	bne.n	800db82 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800db66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db68:	68f8      	ldr	r0, [r7, #12]
 800db6a:	f000 f907 	bl	800dd7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	2220      	movs	r2, #32
 800db72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2200      	movs	r2, #0
 800db7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800db7e:	2303      	movs	r3, #3
 800db80:	e00f      	b.n	800dba2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	69da      	ldr	r2, [r3, #28]
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	4013      	ands	r3, r2
 800db8c:	68ba      	ldr	r2, [r7, #8]
 800db8e:	429a      	cmp	r2, r3
 800db90:	bf0c      	ite	eq
 800db92:	2301      	moveq	r3, #1
 800db94:	2300      	movne	r3, #0
 800db96:	b2db      	uxtb	r3, r3
 800db98:	461a      	mov	r2, r3
 800db9a:	79fb      	ldrb	r3, [r7, #7]
 800db9c:	429a      	cmp	r2, r3
 800db9e:	d0a6      	beq.n	800daee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dba0:	2300      	movs	r3, #0
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3710      	adds	r7, #16
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
	...

0800dbac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b096      	sub	sp, #88	; 0x58
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	60f8      	str	r0, [r7, #12]
 800dbb4:	60b9      	str	r1, [r7, #8]
 800dbb6:	4613      	mov	r3, r2
 800dbb8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	68ba      	ldr	r2, [r7, #8]
 800dbbe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	88fa      	ldrh	r2, [r7, #6]
 800dbc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	2222      	movs	r2, #34	; 0x22
 800dbd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d02d      	beq.n	800dc3e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbe8:	4a40      	ldr	r2, [pc, #256]	; (800dcec <UART_Start_Receive_DMA+0x140>)
 800dbea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbf2:	4a3f      	ldr	r2, [pc, #252]	; (800dcf0 <UART_Start_Receive_DMA+0x144>)
 800dbf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbfc:	4a3d      	ldr	r2, [pc, #244]	; (800dcf4 <UART_Start_Receive_DMA+0x148>)
 800dbfe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc06:	2200      	movs	r2, #0
 800dc08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	3324      	adds	r3, #36	; 0x24
 800dc16:	4619      	mov	r1, r3
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc1c:	461a      	mov	r2, r3
 800dc1e:	88fb      	ldrh	r3, [r7, #6]
 800dc20:	f7f6 fe96 	bl	8004950 <HAL_DMA_Start_IT>
 800dc24:	4603      	mov	r3, r0
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d009      	beq.n	800dc3e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2210      	movs	r2, #16
 800dc2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2220      	movs	r2, #32
 800dc36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	e051      	b.n	800dce2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	691b      	ldr	r3, [r3, #16]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d018      	beq.n	800dc78 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc4e:	e853 3f00 	ldrex	r3, [r3]
 800dc52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc5a:	657b      	str	r3, [r7, #84]	; 0x54
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	461a      	mov	r2, r3
 800dc62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc64:	64bb      	str	r3, [r7, #72]	; 0x48
 800dc66:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dc6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc6c:	e841 2300 	strex	r3, r2, [r1]
 800dc70:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dc72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d1e6      	bne.n	800dc46 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	3308      	adds	r3, #8
 800dc7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc82:	e853 3f00 	ldrex	r3, [r3]
 800dc86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8a:	f043 0301 	orr.w	r3, r3, #1
 800dc8e:	653b      	str	r3, [r7, #80]	; 0x50
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	3308      	adds	r3, #8
 800dc96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc98:	637a      	str	r2, [r7, #52]	; 0x34
 800dc9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dca0:	e841 2300 	strex	r3, r2, [r1]
 800dca4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d1e5      	bne.n	800dc78 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	3308      	adds	r3, #8
 800dcb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	e853 3f00 	ldrex	r3, [r3]
 800dcba:	613b      	str	r3, [r7, #16]
   return(result);
 800dcbc:	693b      	ldr	r3, [r7, #16]
 800dcbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	3308      	adds	r3, #8
 800dcca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dccc:	623a      	str	r2, [r7, #32]
 800dcce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcd0:	69f9      	ldr	r1, [r7, #28]
 800dcd2:	6a3a      	ldr	r2, [r7, #32]
 800dcd4:	e841 2300 	strex	r3, r2, [r1]
 800dcd8:	61bb      	str	r3, [r7, #24]
   return(result);
 800dcda:	69bb      	ldr	r3, [r7, #24]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d1e5      	bne.n	800dcac <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800dce0:	2300      	movs	r3, #0
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3758      	adds	r7, #88	; 0x58
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
 800dcea:	bf00      	nop
 800dcec:	0800defb 	.word	0x0800defb
 800dcf0:	0800e023 	.word	0x0800e023
 800dcf4:	0800e061 	.word	0x0800e061

0800dcf8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b08f      	sub	sp, #60	; 0x3c
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd06:	6a3b      	ldr	r3, [r7, #32]
 800dd08:	e853 3f00 	ldrex	r3, [r3]
 800dd0c:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd0e:	69fb      	ldr	r3, [r7, #28]
 800dd10:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800dd14:	637b      	str	r3, [r7, #52]	; 0x34
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd20:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dd24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd26:	e841 2300 	strex	r3, r2, [r1]
 800dd2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d1e6      	bne.n	800dd00 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	3308      	adds	r3, #8
 800dd38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	e853 3f00 	ldrex	r3, [r3]
 800dd40:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800dd48:	633b      	str	r3, [r7, #48]	; 0x30
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	3308      	adds	r3, #8
 800dd50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd52:	61ba      	str	r2, [r7, #24]
 800dd54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd56:	6979      	ldr	r1, [r7, #20]
 800dd58:	69ba      	ldr	r2, [r7, #24]
 800dd5a:	e841 2300 	strex	r3, r2, [r1]
 800dd5e:	613b      	str	r3, [r7, #16]
   return(result);
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d1e5      	bne.n	800dd32 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2220      	movs	r2, #32
 800dd6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800dd6e:	bf00      	nop
 800dd70:	373c      	adds	r7, #60	; 0x3c
 800dd72:	46bd      	mov	sp, r7
 800dd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd78:	4770      	bx	lr
	...

0800dd7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	b095      	sub	sp, #84	; 0x54
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd8c:	e853 3f00 	ldrex	r3, [r3]
 800dd90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dd98:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	461a      	mov	r2, r3
 800dda0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dda2:	643b      	str	r3, [r7, #64]	; 0x40
 800dda4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dda6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dda8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ddaa:	e841 2300 	strex	r3, r2, [r1]
 800ddae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ddb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d1e6      	bne.n	800dd84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	3308      	adds	r3, #8
 800ddbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddbe:	6a3b      	ldr	r3, [r7, #32]
 800ddc0:	e853 3f00 	ldrex	r3, [r3]
 800ddc4:	61fb      	str	r3, [r7, #28]
   return(result);
 800ddc6:	69fa      	ldr	r2, [r7, #28]
 800ddc8:	4b1e      	ldr	r3, [pc, #120]	; (800de44 <UART_EndRxTransfer+0xc8>)
 800ddca:	4013      	ands	r3, r2
 800ddcc:	64bb      	str	r3, [r7, #72]	; 0x48
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	3308      	adds	r3, #8
 800ddd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ddd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ddd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddde:	e841 2300 	strex	r3, r2, [r1]
 800dde2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d1e5      	bne.n	800ddb6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddee:	2b01      	cmp	r3, #1
 800ddf0:	d118      	bne.n	800de24 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	e853 3f00 	ldrex	r3, [r3]
 800ddfe:	60bb      	str	r3, [r7, #8]
   return(result);
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	f023 0310 	bic.w	r3, r3, #16
 800de06:	647b      	str	r3, [r7, #68]	; 0x44
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	461a      	mov	r2, r3
 800de0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de10:	61bb      	str	r3, [r7, #24]
 800de12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de14:	6979      	ldr	r1, [r7, #20]
 800de16:	69ba      	ldr	r2, [r7, #24]
 800de18:	e841 2300 	strex	r3, r2, [r1]
 800de1c:	613b      	str	r3, [r7, #16]
   return(result);
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d1e6      	bne.n	800ddf2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2220      	movs	r2, #32
 800de28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2200      	movs	r2, #0
 800de30:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2200      	movs	r2, #0
 800de36:	675a      	str	r2, [r3, #116]	; 0x74
}
 800de38:	bf00      	nop
 800de3a:	3754      	adds	r7, #84	; 0x54
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr
 800de44:	effffffe 	.word	0xeffffffe

0800de48 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b090      	sub	sp, #64	; 0x40
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de54:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	69db      	ldr	r3, [r3, #28]
 800de5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de5e:	d037      	beq.n	800ded0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800de60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de62:	2200      	movs	r2, #0
 800de64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800de68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	3308      	adds	r3, #8
 800de6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de72:	e853 3f00 	ldrex	r3, [r3]
 800de76:	623b      	str	r3, [r7, #32]
   return(result);
 800de78:	6a3b      	ldr	r3, [r7, #32]
 800de7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de7e:	63bb      	str	r3, [r7, #56]	; 0x38
 800de80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	3308      	adds	r3, #8
 800de86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de88:	633a      	str	r2, [r7, #48]	; 0x30
 800de8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de90:	e841 2300 	strex	r3, r2, [r1]
 800de94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800de96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d1e5      	bne.n	800de68 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800de9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	e853 3f00 	ldrex	r3, [r3]
 800dea8:	60fb      	str	r3, [r7, #12]
   return(result);
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800deb0:	637b      	str	r3, [r7, #52]	; 0x34
 800deb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	461a      	mov	r2, r3
 800deb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deba:	61fb      	str	r3, [r7, #28]
 800debc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800debe:	69b9      	ldr	r1, [r7, #24]
 800dec0:	69fa      	ldr	r2, [r7, #28]
 800dec2:	e841 2300 	strex	r3, r2, [r1]
 800dec6:	617b      	str	r3, [r7, #20]
   return(result);
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d1e6      	bne.n	800de9c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dece:	e002      	b.n	800ded6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800ded0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ded2:	f7fe ff1b 	bl	800cd0c <HAL_UART_TxCpltCallback>
}
 800ded6:	bf00      	nop
 800ded8:	3740      	adds	r7, #64	; 0x40
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}

0800dede <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dede:	b580      	push	{r7, lr}
 800dee0:	b084      	sub	sp, #16
 800dee2:	af00      	add	r7, sp, #0
 800dee4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800deec:	68f8      	ldr	r0, [r7, #12]
 800deee:	f7fe ff17 	bl	800cd20 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800def2:	bf00      	nop
 800def4:	3710      	adds	r7, #16
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}

0800defa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800defa:	b580      	push	{r7, lr}
 800defc:	b09c      	sub	sp, #112	; 0x70
 800defe:	af00      	add	r7, sp, #0
 800df00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df06:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	69db      	ldr	r3, [r3, #28]
 800df0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df10:	d071      	beq.n	800dff6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800df12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df14:	2200      	movs	r2, #0
 800df16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800df1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df22:	e853 3f00 	ldrex	r3, [r3]
 800df26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800df28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800df2e:	66bb      	str	r3, [r7, #104]	; 0x68
 800df30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	461a      	mov	r2, r3
 800df36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df38:	65bb      	str	r3, [r7, #88]	; 0x58
 800df3a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800df3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800df40:	e841 2300 	strex	r3, r2, [r1]
 800df44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800df46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d1e6      	bne.n	800df1a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	3308      	adds	r3, #8
 800df52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df56:	e853 3f00 	ldrex	r3, [r3]
 800df5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800df5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df5e:	f023 0301 	bic.w	r3, r3, #1
 800df62:	667b      	str	r3, [r7, #100]	; 0x64
 800df64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	3308      	adds	r3, #8
 800df6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800df6c:	647a      	str	r2, [r7, #68]	; 0x44
 800df6e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800df72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df74:	e841 2300 	strex	r3, r2, [r1]
 800df78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800df7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d1e5      	bne.n	800df4c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	3308      	adds	r3, #8
 800df86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8a:	e853 3f00 	ldrex	r3, [r3]
 800df8e:	623b      	str	r3, [r7, #32]
   return(result);
 800df90:	6a3b      	ldr	r3, [r7, #32]
 800df92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df96:	663b      	str	r3, [r7, #96]	; 0x60
 800df98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	3308      	adds	r3, #8
 800df9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dfa0:	633a      	str	r2, [r7, #48]	; 0x30
 800dfa2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dfa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfa8:	e841 2300 	strex	r3, r2, [r1]
 800dfac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d1e5      	bne.n	800df80 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dfb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfb6:	2220      	movs	r2, #32
 800dfb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfc0:	2b01      	cmp	r3, #1
 800dfc2:	d118      	bne.n	800dff6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dfc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	e853 3f00 	ldrex	r3, [r3]
 800dfd0:	60fb      	str	r3, [r7, #12]
   return(result);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	f023 0310 	bic.w	r3, r3, #16
 800dfd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dfda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	461a      	mov	r2, r3
 800dfe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfe2:	61fb      	str	r3, [r7, #28]
 800dfe4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfe6:	69b9      	ldr	r1, [r7, #24]
 800dfe8:	69fa      	ldr	r2, [r7, #28]
 800dfea:	e841 2300 	strex	r3, r2, [r1]
 800dfee:	617b      	str	r3, [r7, #20]
   return(result);
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d1e6      	bne.n	800dfc4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dff8:	2200      	movs	r2, #0
 800dffa:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e000:	2b01      	cmp	r3, #1
 800e002:	d107      	bne.n	800e014 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e006:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e00a:	4619      	mov	r1, r3
 800e00c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e00e:	f7fe fea5 	bl	800cd5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e012:	e002      	b.n	800e01a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800e014:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e016:	f7f3 fc3b 	bl	8001890 <HAL_UART_RxCpltCallback>
}
 800e01a:	bf00      	nop
 800e01c:	3770      	adds	r7, #112	; 0x70
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}

0800e022 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e022:	b580      	push	{r7, lr}
 800e024:	b084      	sub	sp, #16
 800e026:	af00      	add	r7, sp, #0
 800e028:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e02e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2201      	movs	r2, #1
 800e034:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	d109      	bne.n	800e052 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e044:	085b      	lsrs	r3, r3, #1
 800e046:	b29b      	uxth	r3, r3
 800e048:	4619      	mov	r1, r3
 800e04a:	68f8      	ldr	r0, [r7, #12]
 800e04c:	f7fe fe86 	bl	800cd5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e050:	e002      	b.n	800e058 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800e052:	68f8      	ldr	r0, [r7, #12]
 800e054:	f7fe fe6e 	bl	800cd34 <HAL_UART_RxHalfCpltCallback>
}
 800e058:	bf00      	nop
 800e05a:	3710      	adds	r7, #16
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}

0800e060 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b086      	sub	sp, #24
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e06c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e074:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e07c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	689b      	ldr	r3, [r3, #8]
 800e084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e088:	2b80      	cmp	r3, #128	; 0x80
 800e08a:	d109      	bne.n	800e0a0 <UART_DMAError+0x40>
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	2b21      	cmp	r3, #33	; 0x21
 800e090:	d106      	bne.n	800e0a0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	2200      	movs	r2, #0
 800e096:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e09a:	6978      	ldr	r0, [r7, #20]
 800e09c:	f7ff fe2c 	bl	800dcf8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	689b      	ldr	r3, [r3, #8]
 800e0a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0aa:	2b40      	cmp	r3, #64	; 0x40
 800e0ac:	d109      	bne.n	800e0c2 <UART_DMAError+0x62>
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2b22      	cmp	r3, #34	; 0x22
 800e0b2:	d106      	bne.n	800e0c2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e0bc:	6978      	ldr	r0, [r7, #20]
 800e0be:	f7ff fe5d 	bl	800dd7c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0c8:	f043 0210 	orr.w	r2, r3, #16
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e0d2:	6978      	ldr	r0, [r7, #20]
 800e0d4:	f7fe fe38 	bl	800cd48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0d8:	bf00      	nop
 800e0da:	3718      	adds	r7, #24
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b084      	sub	sp, #16
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e0fe:	68f8      	ldr	r0, [r7, #12]
 800e100:	f7fe fe22 	bl	800cd48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e104:	bf00      	nop
 800e106:	3710      	adds	r7, #16
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b088      	sub	sp, #32
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	e853 3f00 	ldrex	r3, [r3]
 800e120:	60bb      	str	r3, [r7, #8]
   return(result);
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e128:	61fb      	str	r3, [r7, #28]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	461a      	mov	r2, r3
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	61bb      	str	r3, [r7, #24]
 800e134:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e136:	6979      	ldr	r1, [r7, #20]
 800e138:	69ba      	ldr	r2, [r7, #24]
 800e13a:	e841 2300 	strex	r3, r2, [r1]
 800e13e:	613b      	str	r3, [r7, #16]
   return(result);
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d1e6      	bne.n	800e114 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2220      	movs	r2, #32
 800e14a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2200      	movs	r2, #0
 800e152:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f7fe fdd9 	bl	800cd0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e15a:	bf00      	nop
 800e15c:	3720      	adds	r7, #32
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}

0800e162 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e162:	b480      	push	{r7}
 800e164:	b083      	sub	sp, #12
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e16a:	bf00      	nop
 800e16c:	370c      	adds	r7, #12
 800e16e:	46bd      	mov	sp, r7
 800e170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e174:	4770      	bx	lr

0800e176 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e176:	b480      	push	{r7}
 800e178:	b083      	sub	sp, #12
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e17e:	bf00      	nop
 800e180:	370c      	adds	r7, #12
 800e182:	46bd      	mov	sp, r7
 800e184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e188:	4770      	bx	lr

0800e18a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e18a:	b480      	push	{r7}
 800e18c:	b083      	sub	sp, #12
 800e18e:	af00      	add	r7, sp, #0
 800e190:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e192:	bf00      	nop
 800e194:	370c      	adds	r7, #12
 800e196:	46bd      	mov	sp, r7
 800e198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19c:	4770      	bx	lr

0800e19e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e19e:	b480      	push	{r7}
 800e1a0:	b085      	sub	sp, #20
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d101      	bne.n	800e1b4 <HAL_UARTEx_DisableFifoMode+0x16>
 800e1b0:	2302      	movs	r3, #2
 800e1b2:	e027      	b.n	800e204 <HAL_UARTEx_DisableFifoMode+0x66>
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2224      	movs	r2, #36	; 0x24
 800e1c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	681a      	ldr	r2, [r3, #0]
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f022 0201 	bic.w	r2, r2, #1
 800e1da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e1e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	68fa      	ldr	r2, [r7, #12]
 800e1f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2220      	movs	r2, #32
 800e1f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e202:	2300      	movs	r3, #0
}
 800e204:	4618      	mov	r0, r3
 800e206:	3714      	adds	r7, #20
 800e208:	46bd      	mov	sp, r7
 800e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20e:	4770      	bx	lr

0800e210 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b084      	sub	sp, #16
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
 800e218:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e220:	2b01      	cmp	r3, #1
 800e222:	d101      	bne.n	800e228 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e224:	2302      	movs	r3, #2
 800e226:	e02d      	b.n	800e284 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2201      	movs	r2, #1
 800e22c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2224      	movs	r2, #36	; 0x24
 800e234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	681a      	ldr	r2, [r3, #0]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	f022 0201 	bic.w	r2, r2, #1
 800e24e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	689b      	ldr	r3, [r3, #8]
 800e256:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	683a      	ldr	r2, [r7, #0]
 800e260:	430a      	orrs	r2, r1
 800e262:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f000 f84f 	bl	800e308 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	68fa      	ldr	r2, [r7, #12]
 800e270:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2220      	movs	r2, #32
 800e276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2200      	movs	r2, #0
 800e27e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e282:	2300      	movs	r3, #0
}
 800e284:	4618      	mov	r0, r3
 800e286:	3710      	adds	r7, #16
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}

0800e28c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b084      	sub	sp, #16
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e29c:	2b01      	cmp	r3, #1
 800e29e:	d101      	bne.n	800e2a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e2a0:	2302      	movs	r3, #2
 800e2a2:	e02d      	b.n	800e300 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2224      	movs	r2, #36	; 0x24
 800e2b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	681a      	ldr	r2, [r3, #0]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f022 0201 	bic.w	r2, r2, #1
 800e2ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	689b      	ldr	r3, [r3, #8]
 800e2d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	683a      	ldr	r2, [r7, #0]
 800e2dc:	430a      	orrs	r2, r1
 800e2de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f000 f811 	bl	800e308 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	68fa      	ldr	r2, [r7, #12]
 800e2ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2220      	movs	r2, #32
 800e2f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e2fe:	2300      	movs	r3, #0
}
 800e300:	4618      	mov	r0, r3
 800e302:	3710      	adds	r7, #16
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}

0800e308 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e308:	b480      	push	{r7}
 800e30a:	b085      	sub	sp, #20
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e314:	2b00      	cmp	r3, #0
 800e316:	d108      	bne.n	800e32a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2201      	movs	r2, #1
 800e31c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2201      	movs	r2, #1
 800e324:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e328:	e031      	b.n	800e38e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e32a:	2310      	movs	r3, #16
 800e32c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e32e:	2310      	movs	r3, #16
 800e330:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	689b      	ldr	r3, [r3, #8]
 800e338:	0e5b      	lsrs	r3, r3, #25
 800e33a:	b2db      	uxtb	r3, r3
 800e33c:	f003 0307 	and.w	r3, r3, #7
 800e340:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	689b      	ldr	r3, [r3, #8]
 800e348:	0f5b      	lsrs	r3, r3, #29
 800e34a:	b2db      	uxtb	r3, r3
 800e34c:	f003 0307 	and.w	r3, r3, #7
 800e350:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e352:	7bbb      	ldrb	r3, [r7, #14]
 800e354:	7b3a      	ldrb	r2, [r7, #12]
 800e356:	4911      	ldr	r1, [pc, #68]	; (800e39c <UARTEx_SetNbDataToProcess+0x94>)
 800e358:	5c8a      	ldrb	r2, [r1, r2]
 800e35a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e35e:	7b3a      	ldrb	r2, [r7, #12]
 800e360:	490f      	ldr	r1, [pc, #60]	; (800e3a0 <UARTEx_SetNbDataToProcess+0x98>)
 800e362:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e364:	fb93 f3f2 	sdiv	r3, r3, r2
 800e368:	b29a      	uxth	r2, r3
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e370:	7bfb      	ldrb	r3, [r7, #15]
 800e372:	7b7a      	ldrb	r2, [r7, #13]
 800e374:	4909      	ldr	r1, [pc, #36]	; (800e39c <UARTEx_SetNbDataToProcess+0x94>)
 800e376:	5c8a      	ldrb	r2, [r1, r2]
 800e378:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e37c:	7b7a      	ldrb	r2, [r7, #13]
 800e37e:	4908      	ldr	r1, [pc, #32]	; (800e3a0 <UARTEx_SetNbDataToProcess+0x98>)
 800e380:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e382:	fb93 f3f2 	sdiv	r3, r3, r2
 800e386:	b29a      	uxth	r2, r3
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e38e:	bf00      	nop
 800e390:	3714      	adds	r7, #20
 800e392:	46bd      	mov	sp, r7
 800e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e398:	4770      	bx	lr
 800e39a:	bf00      	nop
 800e39c:	0800ed8c 	.word	0x0800ed8c
 800e3a0:	0800ed94 	.word	0x0800ed94

0800e3a4 <__errno>:
 800e3a4:	4b01      	ldr	r3, [pc, #4]	; (800e3ac <__errno+0x8>)
 800e3a6:	6818      	ldr	r0, [r3, #0]
 800e3a8:	4770      	bx	lr
 800e3aa:	bf00      	nop
 800e3ac:	2400002c 	.word	0x2400002c

0800e3b0 <__libc_init_array>:
 800e3b0:	b570      	push	{r4, r5, r6, lr}
 800e3b2:	4d0d      	ldr	r5, [pc, #52]	; (800e3e8 <__libc_init_array+0x38>)
 800e3b4:	4c0d      	ldr	r4, [pc, #52]	; (800e3ec <__libc_init_array+0x3c>)
 800e3b6:	1b64      	subs	r4, r4, r5
 800e3b8:	10a4      	asrs	r4, r4, #2
 800e3ba:	2600      	movs	r6, #0
 800e3bc:	42a6      	cmp	r6, r4
 800e3be:	d109      	bne.n	800e3d4 <__libc_init_array+0x24>
 800e3c0:	4d0b      	ldr	r5, [pc, #44]	; (800e3f0 <__libc_init_array+0x40>)
 800e3c2:	4c0c      	ldr	r4, [pc, #48]	; (800e3f4 <__libc_init_array+0x44>)
 800e3c4:	f000 fc8e 	bl	800ece4 <_init>
 800e3c8:	1b64      	subs	r4, r4, r5
 800e3ca:	10a4      	asrs	r4, r4, #2
 800e3cc:	2600      	movs	r6, #0
 800e3ce:	42a6      	cmp	r6, r4
 800e3d0:	d105      	bne.n	800e3de <__libc_init_array+0x2e>
 800e3d2:	bd70      	pop	{r4, r5, r6, pc}
 800e3d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3d8:	4798      	blx	r3
 800e3da:	3601      	adds	r6, #1
 800e3dc:	e7ee      	b.n	800e3bc <__libc_init_array+0xc>
 800e3de:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3e2:	4798      	blx	r3
 800e3e4:	3601      	adds	r6, #1
 800e3e6:	e7f2      	b.n	800e3ce <__libc_init_array+0x1e>
 800e3e8:	0800edd8 	.word	0x0800edd8
 800e3ec:	0800edd8 	.word	0x0800edd8
 800e3f0:	0800edd8 	.word	0x0800edd8
 800e3f4:	0800eddc 	.word	0x0800eddc

0800e3f8 <memcpy>:
 800e3f8:	440a      	add	r2, r1
 800e3fa:	4291      	cmp	r1, r2
 800e3fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800e400:	d100      	bne.n	800e404 <memcpy+0xc>
 800e402:	4770      	bx	lr
 800e404:	b510      	push	{r4, lr}
 800e406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e40a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e40e:	4291      	cmp	r1, r2
 800e410:	d1f9      	bne.n	800e406 <memcpy+0xe>
 800e412:	bd10      	pop	{r4, pc}

0800e414 <memset>:
 800e414:	4402      	add	r2, r0
 800e416:	4603      	mov	r3, r0
 800e418:	4293      	cmp	r3, r2
 800e41a:	d100      	bne.n	800e41e <memset+0xa>
 800e41c:	4770      	bx	lr
 800e41e:	f803 1b01 	strb.w	r1, [r3], #1
 800e422:	e7f9      	b.n	800e418 <memset+0x4>

0800e424 <siprintf>:
 800e424:	b40e      	push	{r1, r2, r3}
 800e426:	b500      	push	{lr}
 800e428:	b09c      	sub	sp, #112	; 0x70
 800e42a:	ab1d      	add	r3, sp, #116	; 0x74
 800e42c:	9002      	str	r0, [sp, #8]
 800e42e:	9006      	str	r0, [sp, #24]
 800e430:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e434:	4809      	ldr	r0, [pc, #36]	; (800e45c <siprintf+0x38>)
 800e436:	9107      	str	r1, [sp, #28]
 800e438:	9104      	str	r1, [sp, #16]
 800e43a:	4909      	ldr	r1, [pc, #36]	; (800e460 <siprintf+0x3c>)
 800e43c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e440:	9105      	str	r1, [sp, #20]
 800e442:	6800      	ldr	r0, [r0, #0]
 800e444:	9301      	str	r3, [sp, #4]
 800e446:	a902      	add	r1, sp, #8
 800e448:	f000 f868 	bl	800e51c <_svfiprintf_r>
 800e44c:	9b02      	ldr	r3, [sp, #8]
 800e44e:	2200      	movs	r2, #0
 800e450:	701a      	strb	r2, [r3, #0]
 800e452:	b01c      	add	sp, #112	; 0x70
 800e454:	f85d eb04 	ldr.w	lr, [sp], #4
 800e458:	b003      	add	sp, #12
 800e45a:	4770      	bx	lr
 800e45c:	2400002c 	.word	0x2400002c
 800e460:	ffff0208 	.word	0xffff0208

0800e464 <__ssputs_r>:
 800e464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e468:	688e      	ldr	r6, [r1, #8]
 800e46a:	429e      	cmp	r6, r3
 800e46c:	4682      	mov	sl, r0
 800e46e:	460c      	mov	r4, r1
 800e470:	4690      	mov	r8, r2
 800e472:	461f      	mov	r7, r3
 800e474:	d838      	bhi.n	800e4e8 <__ssputs_r+0x84>
 800e476:	898a      	ldrh	r2, [r1, #12]
 800e478:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e47c:	d032      	beq.n	800e4e4 <__ssputs_r+0x80>
 800e47e:	6825      	ldr	r5, [r4, #0]
 800e480:	6909      	ldr	r1, [r1, #16]
 800e482:	eba5 0901 	sub.w	r9, r5, r1
 800e486:	6965      	ldr	r5, [r4, #20]
 800e488:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e48c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e490:	3301      	adds	r3, #1
 800e492:	444b      	add	r3, r9
 800e494:	106d      	asrs	r5, r5, #1
 800e496:	429d      	cmp	r5, r3
 800e498:	bf38      	it	cc
 800e49a:	461d      	movcc	r5, r3
 800e49c:	0553      	lsls	r3, r2, #21
 800e49e:	d531      	bpl.n	800e504 <__ssputs_r+0xa0>
 800e4a0:	4629      	mov	r1, r5
 800e4a2:	f000 fb55 	bl	800eb50 <_malloc_r>
 800e4a6:	4606      	mov	r6, r0
 800e4a8:	b950      	cbnz	r0, 800e4c0 <__ssputs_r+0x5c>
 800e4aa:	230c      	movs	r3, #12
 800e4ac:	f8ca 3000 	str.w	r3, [sl]
 800e4b0:	89a3      	ldrh	r3, [r4, #12]
 800e4b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4b6:	81a3      	strh	r3, [r4, #12]
 800e4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e4bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4c0:	6921      	ldr	r1, [r4, #16]
 800e4c2:	464a      	mov	r2, r9
 800e4c4:	f7ff ff98 	bl	800e3f8 <memcpy>
 800e4c8:	89a3      	ldrh	r3, [r4, #12]
 800e4ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e4ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4d2:	81a3      	strh	r3, [r4, #12]
 800e4d4:	6126      	str	r6, [r4, #16]
 800e4d6:	6165      	str	r5, [r4, #20]
 800e4d8:	444e      	add	r6, r9
 800e4da:	eba5 0509 	sub.w	r5, r5, r9
 800e4de:	6026      	str	r6, [r4, #0]
 800e4e0:	60a5      	str	r5, [r4, #8]
 800e4e2:	463e      	mov	r6, r7
 800e4e4:	42be      	cmp	r6, r7
 800e4e6:	d900      	bls.n	800e4ea <__ssputs_r+0x86>
 800e4e8:	463e      	mov	r6, r7
 800e4ea:	6820      	ldr	r0, [r4, #0]
 800e4ec:	4632      	mov	r2, r6
 800e4ee:	4641      	mov	r1, r8
 800e4f0:	f000 faa8 	bl	800ea44 <memmove>
 800e4f4:	68a3      	ldr	r3, [r4, #8]
 800e4f6:	1b9b      	subs	r3, r3, r6
 800e4f8:	60a3      	str	r3, [r4, #8]
 800e4fa:	6823      	ldr	r3, [r4, #0]
 800e4fc:	4433      	add	r3, r6
 800e4fe:	6023      	str	r3, [r4, #0]
 800e500:	2000      	movs	r0, #0
 800e502:	e7db      	b.n	800e4bc <__ssputs_r+0x58>
 800e504:	462a      	mov	r2, r5
 800e506:	f000 fb97 	bl	800ec38 <_realloc_r>
 800e50a:	4606      	mov	r6, r0
 800e50c:	2800      	cmp	r0, #0
 800e50e:	d1e1      	bne.n	800e4d4 <__ssputs_r+0x70>
 800e510:	6921      	ldr	r1, [r4, #16]
 800e512:	4650      	mov	r0, sl
 800e514:	f000 fab0 	bl	800ea78 <_free_r>
 800e518:	e7c7      	b.n	800e4aa <__ssputs_r+0x46>
	...

0800e51c <_svfiprintf_r>:
 800e51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e520:	4698      	mov	r8, r3
 800e522:	898b      	ldrh	r3, [r1, #12]
 800e524:	061b      	lsls	r3, r3, #24
 800e526:	b09d      	sub	sp, #116	; 0x74
 800e528:	4607      	mov	r7, r0
 800e52a:	460d      	mov	r5, r1
 800e52c:	4614      	mov	r4, r2
 800e52e:	d50e      	bpl.n	800e54e <_svfiprintf_r+0x32>
 800e530:	690b      	ldr	r3, [r1, #16]
 800e532:	b963      	cbnz	r3, 800e54e <_svfiprintf_r+0x32>
 800e534:	2140      	movs	r1, #64	; 0x40
 800e536:	f000 fb0b 	bl	800eb50 <_malloc_r>
 800e53a:	6028      	str	r0, [r5, #0]
 800e53c:	6128      	str	r0, [r5, #16]
 800e53e:	b920      	cbnz	r0, 800e54a <_svfiprintf_r+0x2e>
 800e540:	230c      	movs	r3, #12
 800e542:	603b      	str	r3, [r7, #0]
 800e544:	f04f 30ff 	mov.w	r0, #4294967295
 800e548:	e0d1      	b.n	800e6ee <_svfiprintf_r+0x1d2>
 800e54a:	2340      	movs	r3, #64	; 0x40
 800e54c:	616b      	str	r3, [r5, #20]
 800e54e:	2300      	movs	r3, #0
 800e550:	9309      	str	r3, [sp, #36]	; 0x24
 800e552:	2320      	movs	r3, #32
 800e554:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e558:	f8cd 800c 	str.w	r8, [sp, #12]
 800e55c:	2330      	movs	r3, #48	; 0x30
 800e55e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e708 <_svfiprintf_r+0x1ec>
 800e562:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e566:	f04f 0901 	mov.w	r9, #1
 800e56a:	4623      	mov	r3, r4
 800e56c:	469a      	mov	sl, r3
 800e56e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e572:	b10a      	cbz	r2, 800e578 <_svfiprintf_r+0x5c>
 800e574:	2a25      	cmp	r2, #37	; 0x25
 800e576:	d1f9      	bne.n	800e56c <_svfiprintf_r+0x50>
 800e578:	ebba 0b04 	subs.w	fp, sl, r4
 800e57c:	d00b      	beq.n	800e596 <_svfiprintf_r+0x7a>
 800e57e:	465b      	mov	r3, fp
 800e580:	4622      	mov	r2, r4
 800e582:	4629      	mov	r1, r5
 800e584:	4638      	mov	r0, r7
 800e586:	f7ff ff6d 	bl	800e464 <__ssputs_r>
 800e58a:	3001      	adds	r0, #1
 800e58c:	f000 80aa 	beq.w	800e6e4 <_svfiprintf_r+0x1c8>
 800e590:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e592:	445a      	add	r2, fp
 800e594:	9209      	str	r2, [sp, #36]	; 0x24
 800e596:	f89a 3000 	ldrb.w	r3, [sl]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	f000 80a2 	beq.w	800e6e4 <_svfiprintf_r+0x1c8>
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e5a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5aa:	f10a 0a01 	add.w	sl, sl, #1
 800e5ae:	9304      	str	r3, [sp, #16]
 800e5b0:	9307      	str	r3, [sp, #28]
 800e5b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e5b6:	931a      	str	r3, [sp, #104]	; 0x68
 800e5b8:	4654      	mov	r4, sl
 800e5ba:	2205      	movs	r2, #5
 800e5bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5c0:	4851      	ldr	r0, [pc, #324]	; (800e708 <_svfiprintf_r+0x1ec>)
 800e5c2:	f7f1 fe95 	bl	80002f0 <memchr>
 800e5c6:	9a04      	ldr	r2, [sp, #16]
 800e5c8:	b9d8      	cbnz	r0, 800e602 <_svfiprintf_r+0xe6>
 800e5ca:	06d0      	lsls	r0, r2, #27
 800e5cc:	bf44      	itt	mi
 800e5ce:	2320      	movmi	r3, #32
 800e5d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5d4:	0711      	lsls	r1, r2, #28
 800e5d6:	bf44      	itt	mi
 800e5d8:	232b      	movmi	r3, #43	; 0x2b
 800e5da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5de:	f89a 3000 	ldrb.w	r3, [sl]
 800e5e2:	2b2a      	cmp	r3, #42	; 0x2a
 800e5e4:	d015      	beq.n	800e612 <_svfiprintf_r+0xf6>
 800e5e6:	9a07      	ldr	r2, [sp, #28]
 800e5e8:	4654      	mov	r4, sl
 800e5ea:	2000      	movs	r0, #0
 800e5ec:	f04f 0c0a 	mov.w	ip, #10
 800e5f0:	4621      	mov	r1, r4
 800e5f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5f6:	3b30      	subs	r3, #48	; 0x30
 800e5f8:	2b09      	cmp	r3, #9
 800e5fa:	d94e      	bls.n	800e69a <_svfiprintf_r+0x17e>
 800e5fc:	b1b0      	cbz	r0, 800e62c <_svfiprintf_r+0x110>
 800e5fe:	9207      	str	r2, [sp, #28]
 800e600:	e014      	b.n	800e62c <_svfiprintf_r+0x110>
 800e602:	eba0 0308 	sub.w	r3, r0, r8
 800e606:	fa09 f303 	lsl.w	r3, r9, r3
 800e60a:	4313      	orrs	r3, r2
 800e60c:	9304      	str	r3, [sp, #16]
 800e60e:	46a2      	mov	sl, r4
 800e610:	e7d2      	b.n	800e5b8 <_svfiprintf_r+0x9c>
 800e612:	9b03      	ldr	r3, [sp, #12]
 800e614:	1d19      	adds	r1, r3, #4
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	9103      	str	r1, [sp, #12]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	bfbb      	ittet	lt
 800e61e:	425b      	neglt	r3, r3
 800e620:	f042 0202 	orrlt.w	r2, r2, #2
 800e624:	9307      	strge	r3, [sp, #28]
 800e626:	9307      	strlt	r3, [sp, #28]
 800e628:	bfb8      	it	lt
 800e62a:	9204      	strlt	r2, [sp, #16]
 800e62c:	7823      	ldrb	r3, [r4, #0]
 800e62e:	2b2e      	cmp	r3, #46	; 0x2e
 800e630:	d10c      	bne.n	800e64c <_svfiprintf_r+0x130>
 800e632:	7863      	ldrb	r3, [r4, #1]
 800e634:	2b2a      	cmp	r3, #42	; 0x2a
 800e636:	d135      	bne.n	800e6a4 <_svfiprintf_r+0x188>
 800e638:	9b03      	ldr	r3, [sp, #12]
 800e63a:	1d1a      	adds	r2, r3, #4
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	9203      	str	r2, [sp, #12]
 800e640:	2b00      	cmp	r3, #0
 800e642:	bfb8      	it	lt
 800e644:	f04f 33ff 	movlt.w	r3, #4294967295
 800e648:	3402      	adds	r4, #2
 800e64a:	9305      	str	r3, [sp, #20]
 800e64c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e718 <_svfiprintf_r+0x1fc>
 800e650:	7821      	ldrb	r1, [r4, #0]
 800e652:	2203      	movs	r2, #3
 800e654:	4650      	mov	r0, sl
 800e656:	f7f1 fe4b 	bl	80002f0 <memchr>
 800e65a:	b140      	cbz	r0, 800e66e <_svfiprintf_r+0x152>
 800e65c:	2340      	movs	r3, #64	; 0x40
 800e65e:	eba0 000a 	sub.w	r0, r0, sl
 800e662:	fa03 f000 	lsl.w	r0, r3, r0
 800e666:	9b04      	ldr	r3, [sp, #16]
 800e668:	4303      	orrs	r3, r0
 800e66a:	3401      	adds	r4, #1
 800e66c:	9304      	str	r3, [sp, #16]
 800e66e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e672:	4826      	ldr	r0, [pc, #152]	; (800e70c <_svfiprintf_r+0x1f0>)
 800e674:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e678:	2206      	movs	r2, #6
 800e67a:	f7f1 fe39 	bl	80002f0 <memchr>
 800e67e:	2800      	cmp	r0, #0
 800e680:	d038      	beq.n	800e6f4 <_svfiprintf_r+0x1d8>
 800e682:	4b23      	ldr	r3, [pc, #140]	; (800e710 <_svfiprintf_r+0x1f4>)
 800e684:	bb1b      	cbnz	r3, 800e6ce <_svfiprintf_r+0x1b2>
 800e686:	9b03      	ldr	r3, [sp, #12]
 800e688:	3307      	adds	r3, #7
 800e68a:	f023 0307 	bic.w	r3, r3, #7
 800e68e:	3308      	adds	r3, #8
 800e690:	9303      	str	r3, [sp, #12]
 800e692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e694:	4433      	add	r3, r6
 800e696:	9309      	str	r3, [sp, #36]	; 0x24
 800e698:	e767      	b.n	800e56a <_svfiprintf_r+0x4e>
 800e69a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e69e:	460c      	mov	r4, r1
 800e6a0:	2001      	movs	r0, #1
 800e6a2:	e7a5      	b.n	800e5f0 <_svfiprintf_r+0xd4>
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	3401      	adds	r4, #1
 800e6a8:	9305      	str	r3, [sp, #20]
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	f04f 0c0a 	mov.w	ip, #10
 800e6b0:	4620      	mov	r0, r4
 800e6b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6b6:	3a30      	subs	r2, #48	; 0x30
 800e6b8:	2a09      	cmp	r2, #9
 800e6ba:	d903      	bls.n	800e6c4 <_svfiprintf_r+0x1a8>
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d0c5      	beq.n	800e64c <_svfiprintf_r+0x130>
 800e6c0:	9105      	str	r1, [sp, #20]
 800e6c2:	e7c3      	b.n	800e64c <_svfiprintf_r+0x130>
 800e6c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6c8:	4604      	mov	r4, r0
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	e7f0      	b.n	800e6b0 <_svfiprintf_r+0x194>
 800e6ce:	ab03      	add	r3, sp, #12
 800e6d0:	9300      	str	r3, [sp, #0]
 800e6d2:	462a      	mov	r2, r5
 800e6d4:	4b0f      	ldr	r3, [pc, #60]	; (800e714 <_svfiprintf_r+0x1f8>)
 800e6d6:	a904      	add	r1, sp, #16
 800e6d8:	4638      	mov	r0, r7
 800e6da:	f3af 8000 	nop.w
 800e6de:	1c42      	adds	r2, r0, #1
 800e6e0:	4606      	mov	r6, r0
 800e6e2:	d1d6      	bne.n	800e692 <_svfiprintf_r+0x176>
 800e6e4:	89ab      	ldrh	r3, [r5, #12]
 800e6e6:	065b      	lsls	r3, r3, #25
 800e6e8:	f53f af2c 	bmi.w	800e544 <_svfiprintf_r+0x28>
 800e6ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e6ee:	b01d      	add	sp, #116	; 0x74
 800e6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6f4:	ab03      	add	r3, sp, #12
 800e6f6:	9300      	str	r3, [sp, #0]
 800e6f8:	462a      	mov	r2, r5
 800e6fa:	4b06      	ldr	r3, [pc, #24]	; (800e714 <_svfiprintf_r+0x1f8>)
 800e6fc:	a904      	add	r1, sp, #16
 800e6fe:	4638      	mov	r0, r7
 800e700:	f000 f87a 	bl	800e7f8 <_printf_i>
 800e704:	e7eb      	b.n	800e6de <_svfiprintf_r+0x1c2>
 800e706:	bf00      	nop
 800e708:	0800ed9c 	.word	0x0800ed9c
 800e70c:	0800eda6 	.word	0x0800eda6
 800e710:	00000000 	.word	0x00000000
 800e714:	0800e465 	.word	0x0800e465
 800e718:	0800eda2 	.word	0x0800eda2

0800e71c <_printf_common>:
 800e71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e720:	4616      	mov	r6, r2
 800e722:	4699      	mov	r9, r3
 800e724:	688a      	ldr	r2, [r1, #8]
 800e726:	690b      	ldr	r3, [r1, #16]
 800e728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e72c:	4293      	cmp	r3, r2
 800e72e:	bfb8      	it	lt
 800e730:	4613      	movlt	r3, r2
 800e732:	6033      	str	r3, [r6, #0]
 800e734:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e738:	4607      	mov	r7, r0
 800e73a:	460c      	mov	r4, r1
 800e73c:	b10a      	cbz	r2, 800e742 <_printf_common+0x26>
 800e73e:	3301      	adds	r3, #1
 800e740:	6033      	str	r3, [r6, #0]
 800e742:	6823      	ldr	r3, [r4, #0]
 800e744:	0699      	lsls	r1, r3, #26
 800e746:	bf42      	ittt	mi
 800e748:	6833      	ldrmi	r3, [r6, #0]
 800e74a:	3302      	addmi	r3, #2
 800e74c:	6033      	strmi	r3, [r6, #0]
 800e74e:	6825      	ldr	r5, [r4, #0]
 800e750:	f015 0506 	ands.w	r5, r5, #6
 800e754:	d106      	bne.n	800e764 <_printf_common+0x48>
 800e756:	f104 0a19 	add.w	sl, r4, #25
 800e75a:	68e3      	ldr	r3, [r4, #12]
 800e75c:	6832      	ldr	r2, [r6, #0]
 800e75e:	1a9b      	subs	r3, r3, r2
 800e760:	42ab      	cmp	r3, r5
 800e762:	dc26      	bgt.n	800e7b2 <_printf_common+0x96>
 800e764:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e768:	1e13      	subs	r3, r2, #0
 800e76a:	6822      	ldr	r2, [r4, #0]
 800e76c:	bf18      	it	ne
 800e76e:	2301      	movne	r3, #1
 800e770:	0692      	lsls	r2, r2, #26
 800e772:	d42b      	bmi.n	800e7cc <_printf_common+0xb0>
 800e774:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e778:	4649      	mov	r1, r9
 800e77a:	4638      	mov	r0, r7
 800e77c:	47c0      	blx	r8
 800e77e:	3001      	adds	r0, #1
 800e780:	d01e      	beq.n	800e7c0 <_printf_common+0xa4>
 800e782:	6823      	ldr	r3, [r4, #0]
 800e784:	68e5      	ldr	r5, [r4, #12]
 800e786:	6832      	ldr	r2, [r6, #0]
 800e788:	f003 0306 	and.w	r3, r3, #6
 800e78c:	2b04      	cmp	r3, #4
 800e78e:	bf08      	it	eq
 800e790:	1aad      	subeq	r5, r5, r2
 800e792:	68a3      	ldr	r3, [r4, #8]
 800e794:	6922      	ldr	r2, [r4, #16]
 800e796:	bf0c      	ite	eq
 800e798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e79c:	2500      	movne	r5, #0
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	bfc4      	itt	gt
 800e7a2:	1a9b      	subgt	r3, r3, r2
 800e7a4:	18ed      	addgt	r5, r5, r3
 800e7a6:	2600      	movs	r6, #0
 800e7a8:	341a      	adds	r4, #26
 800e7aa:	42b5      	cmp	r5, r6
 800e7ac:	d11a      	bne.n	800e7e4 <_printf_common+0xc8>
 800e7ae:	2000      	movs	r0, #0
 800e7b0:	e008      	b.n	800e7c4 <_printf_common+0xa8>
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	4652      	mov	r2, sl
 800e7b6:	4649      	mov	r1, r9
 800e7b8:	4638      	mov	r0, r7
 800e7ba:	47c0      	blx	r8
 800e7bc:	3001      	adds	r0, #1
 800e7be:	d103      	bne.n	800e7c8 <_printf_common+0xac>
 800e7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7c8:	3501      	adds	r5, #1
 800e7ca:	e7c6      	b.n	800e75a <_printf_common+0x3e>
 800e7cc:	18e1      	adds	r1, r4, r3
 800e7ce:	1c5a      	adds	r2, r3, #1
 800e7d0:	2030      	movs	r0, #48	; 0x30
 800e7d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e7d6:	4422      	add	r2, r4
 800e7d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e7dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e7e0:	3302      	adds	r3, #2
 800e7e2:	e7c7      	b.n	800e774 <_printf_common+0x58>
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	4622      	mov	r2, r4
 800e7e8:	4649      	mov	r1, r9
 800e7ea:	4638      	mov	r0, r7
 800e7ec:	47c0      	blx	r8
 800e7ee:	3001      	adds	r0, #1
 800e7f0:	d0e6      	beq.n	800e7c0 <_printf_common+0xa4>
 800e7f2:	3601      	adds	r6, #1
 800e7f4:	e7d9      	b.n	800e7aa <_printf_common+0x8e>
	...

0800e7f8 <_printf_i>:
 800e7f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e7fc:	7e0f      	ldrb	r7, [r1, #24]
 800e7fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e800:	2f78      	cmp	r7, #120	; 0x78
 800e802:	4691      	mov	r9, r2
 800e804:	4680      	mov	r8, r0
 800e806:	460c      	mov	r4, r1
 800e808:	469a      	mov	sl, r3
 800e80a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e80e:	d807      	bhi.n	800e820 <_printf_i+0x28>
 800e810:	2f62      	cmp	r7, #98	; 0x62
 800e812:	d80a      	bhi.n	800e82a <_printf_i+0x32>
 800e814:	2f00      	cmp	r7, #0
 800e816:	f000 80d8 	beq.w	800e9ca <_printf_i+0x1d2>
 800e81a:	2f58      	cmp	r7, #88	; 0x58
 800e81c:	f000 80a3 	beq.w	800e966 <_printf_i+0x16e>
 800e820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e824:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e828:	e03a      	b.n	800e8a0 <_printf_i+0xa8>
 800e82a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e82e:	2b15      	cmp	r3, #21
 800e830:	d8f6      	bhi.n	800e820 <_printf_i+0x28>
 800e832:	a101      	add	r1, pc, #4	; (adr r1, 800e838 <_printf_i+0x40>)
 800e834:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e838:	0800e891 	.word	0x0800e891
 800e83c:	0800e8a5 	.word	0x0800e8a5
 800e840:	0800e821 	.word	0x0800e821
 800e844:	0800e821 	.word	0x0800e821
 800e848:	0800e821 	.word	0x0800e821
 800e84c:	0800e821 	.word	0x0800e821
 800e850:	0800e8a5 	.word	0x0800e8a5
 800e854:	0800e821 	.word	0x0800e821
 800e858:	0800e821 	.word	0x0800e821
 800e85c:	0800e821 	.word	0x0800e821
 800e860:	0800e821 	.word	0x0800e821
 800e864:	0800e9b1 	.word	0x0800e9b1
 800e868:	0800e8d5 	.word	0x0800e8d5
 800e86c:	0800e993 	.word	0x0800e993
 800e870:	0800e821 	.word	0x0800e821
 800e874:	0800e821 	.word	0x0800e821
 800e878:	0800e9d3 	.word	0x0800e9d3
 800e87c:	0800e821 	.word	0x0800e821
 800e880:	0800e8d5 	.word	0x0800e8d5
 800e884:	0800e821 	.word	0x0800e821
 800e888:	0800e821 	.word	0x0800e821
 800e88c:	0800e99b 	.word	0x0800e99b
 800e890:	682b      	ldr	r3, [r5, #0]
 800e892:	1d1a      	adds	r2, r3, #4
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	602a      	str	r2, [r5, #0]
 800e898:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e89c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	e0a3      	b.n	800e9ec <_printf_i+0x1f4>
 800e8a4:	6820      	ldr	r0, [r4, #0]
 800e8a6:	6829      	ldr	r1, [r5, #0]
 800e8a8:	0606      	lsls	r6, r0, #24
 800e8aa:	f101 0304 	add.w	r3, r1, #4
 800e8ae:	d50a      	bpl.n	800e8c6 <_printf_i+0xce>
 800e8b0:	680e      	ldr	r6, [r1, #0]
 800e8b2:	602b      	str	r3, [r5, #0]
 800e8b4:	2e00      	cmp	r6, #0
 800e8b6:	da03      	bge.n	800e8c0 <_printf_i+0xc8>
 800e8b8:	232d      	movs	r3, #45	; 0x2d
 800e8ba:	4276      	negs	r6, r6
 800e8bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8c0:	485e      	ldr	r0, [pc, #376]	; (800ea3c <_printf_i+0x244>)
 800e8c2:	230a      	movs	r3, #10
 800e8c4:	e019      	b.n	800e8fa <_printf_i+0x102>
 800e8c6:	680e      	ldr	r6, [r1, #0]
 800e8c8:	602b      	str	r3, [r5, #0]
 800e8ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e8ce:	bf18      	it	ne
 800e8d0:	b236      	sxthne	r6, r6
 800e8d2:	e7ef      	b.n	800e8b4 <_printf_i+0xbc>
 800e8d4:	682b      	ldr	r3, [r5, #0]
 800e8d6:	6820      	ldr	r0, [r4, #0]
 800e8d8:	1d19      	adds	r1, r3, #4
 800e8da:	6029      	str	r1, [r5, #0]
 800e8dc:	0601      	lsls	r1, r0, #24
 800e8de:	d501      	bpl.n	800e8e4 <_printf_i+0xec>
 800e8e0:	681e      	ldr	r6, [r3, #0]
 800e8e2:	e002      	b.n	800e8ea <_printf_i+0xf2>
 800e8e4:	0646      	lsls	r6, r0, #25
 800e8e6:	d5fb      	bpl.n	800e8e0 <_printf_i+0xe8>
 800e8e8:	881e      	ldrh	r6, [r3, #0]
 800e8ea:	4854      	ldr	r0, [pc, #336]	; (800ea3c <_printf_i+0x244>)
 800e8ec:	2f6f      	cmp	r7, #111	; 0x6f
 800e8ee:	bf0c      	ite	eq
 800e8f0:	2308      	moveq	r3, #8
 800e8f2:	230a      	movne	r3, #10
 800e8f4:	2100      	movs	r1, #0
 800e8f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e8fa:	6865      	ldr	r5, [r4, #4]
 800e8fc:	60a5      	str	r5, [r4, #8]
 800e8fe:	2d00      	cmp	r5, #0
 800e900:	bfa2      	ittt	ge
 800e902:	6821      	ldrge	r1, [r4, #0]
 800e904:	f021 0104 	bicge.w	r1, r1, #4
 800e908:	6021      	strge	r1, [r4, #0]
 800e90a:	b90e      	cbnz	r6, 800e910 <_printf_i+0x118>
 800e90c:	2d00      	cmp	r5, #0
 800e90e:	d04d      	beq.n	800e9ac <_printf_i+0x1b4>
 800e910:	4615      	mov	r5, r2
 800e912:	fbb6 f1f3 	udiv	r1, r6, r3
 800e916:	fb03 6711 	mls	r7, r3, r1, r6
 800e91a:	5dc7      	ldrb	r7, [r0, r7]
 800e91c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e920:	4637      	mov	r7, r6
 800e922:	42bb      	cmp	r3, r7
 800e924:	460e      	mov	r6, r1
 800e926:	d9f4      	bls.n	800e912 <_printf_i+0x11a>
 800e928:	2b08      	cmp	r3, #8
 800e92a:	d10b      	bne.n	800e944 <_printf_i+0x14c>
 800e92c:	6823      	ldr	r3, [r4, #0]
 800e92e:	07de      	lsls	r6, r3, #31
 800e930:	d508      	bpl.n	800e944 <_printf_i+0x14c>
 800e932:	6923      	ldr	r3, [r4, #16]
 800e934:	6861      	ldr	r1, [r4, #4]
 800e936:	4299      	cmp	r1, r3
 800e938:	bfde      	ittt	le
 800e93a:	2330      	movle	r3, #48	; 0x30
 800e93c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e940:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e944:	1b52      	subs	r2, r2, r5
 800e946:	6122      	str	r2, [r4, #16]
 800e948:	f8cd a000 	str.w	sl, [sp]
 800e94c:	464b      	mov	r3, r9
 800e94e:	aa03      	add	r2, sp, #12
 800e950:	4621      	mov	r1, r4
 800e952:	4640      	mov	r0, r8
 800e954:	f7ff fee2 	bl	800e71c <_printf_common>
 800e958:	3001      	adds	r0, #1
 800e95a:	d14c      	bne.n	800e9f6 <_printf_i+0x1fe>
 800e95c:	f04f 30ff 	mov.w	r0, #4294967295
 800e960:	b004      	add	sp, #16
 800e962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e966:	4835      	ldr	r0, [pc, #212]	; (800ea3c <_printf_i+0x244>)
 800e968:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e96c:	6829      	ldr	r1, [r5, #0]
 800e96e:	6823      	ldr	r3, [r4, #0]
 800e970:	f851 6b04 	ldr.w	r6, [r1], #4
 800e974:	6029      	str	r1, [r5, #0]
 800e976:	061d      	lsls	r5, r3, #24
 800e978:	d514      	bpl.n	800e9a4 <_printf_i+0x1ac>
 800e97a:	07df      	lsls	r7, r3, #31
 800e97c:	bf44      	itt	mi
 800e97e:	f043 0320 	orrmi.w	r3, r3, #32
 800e982:	6023      	strmi	r3, [r4, #0]
 800e984:	b91e      	cbnz	r6, 800e98e <_printf_i+0x196>
 800e986:	6823      	ldr	r3, [r4, #0]
 800e988:	f023 0320 	bic.w	r3, r3, #32
 800e98c:	6023      	str	r3, [r4, #0]
 800e98e:	2310      	movs	r3, #16
 800e990:	e7b0      	b.n	800e8f4 <_printf_i+0xfc>
 800e992:	6823      	ldr	r3, [r4, #0]
 800e994:	f043 0320 	orr.w	r3, r3, #32
 800e998:	6023      	str	r3, [r4, #0]
 800e99a:	2378      	movs	r3, #120	; 0x78
 800e99c:	4828      	ldr	r0, [pc, #160]	; (800ea40 <_printf_i+0x248>)
 800e99e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e9a2:	e7e3      	b.n	800e96c <_printf_i+0x174>
 800e9a4:	0659      	lsls	r1, r3, #25
 800e9a6:	bf48      	it	mi
 800e9a8:	b2b6      	uxthmi	r6, r6
 800e9aa:	e7e6      	b.n	800e97a <_printf_i+0x182>
 800e9ac:	4615      	mov	r5, r2
 800e9ae:	e7bb      	b.n	800e928 <_printf_i+0x130>
 800e9b0:	682b      	ldr	r3, [r5, #0]
 800e9b2:	6826      	ldr	r6, [r4, #0]
 800e9b4:	6961      	ldr	r1, [r4, #20]
 800e9b6:	1d18      	adds	r0, r3, #4
 800e9b8:	6028      	str	r0, [r5, #0]
 800e9ba:	0635      	lsls	r5, r6, #24
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	d501      	bpl.n	800e9c4 <_printf_i+0x1cc>
 800e9c0:	6019      	str	r1, [r3, #0]
 800e9c2:	e002      	b.n	800e9ca <_printf_i+0x1d2>
 800e9c4:	0670      	lsls	r0, r6, #25
 800e9c6:	d5fb      	bpl.n	800e9c0 <_printf_i+0x1c8>
 800e9c8:	8019      	strh	r1, [r3, #0]
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	6123      	str	r3, [r4, #16]
 800e9ce:	4615      	mov	r5, r2
 800e9d0:	e7ba      	b.n	800e948 <_printf_i+0x150>
 800e9d2:	682b      	ldr	r3, [r5, #0]
 800e9d4:	1d1a      	adds	r2, r3, #4
 800e9d6:	602a      	str	r2, [r5, #0]
 800e9d8:	681d      	ldr	r5, [r3, #0]
 800e9da:	6862      	ldr	r2, [r4, #4]
 800e9dc:	2100      	movs	r1, #0
 800e9de:	4628      	mov	r0, r5
 800e9e0:	f7f1 fc86 	bl	80002f0 <memchr>
 800e9e4:	b108      	cbz	r0, 800e9ea <_printf_i+0x1f2>
 800e9e6:	1b40      	subs	r0, r0, r5
 800e9e8:	6060      	str	r0, [r4, #4]
 800e9ea:	6863      	ldr	r3, [r4, #4]
 800e9ec:	6123      	str	r3, [r4, #16]
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9f4:	e7a8      	b.n	800e948 <_printf_i+0x150>
 800e9f6:	6923      	ldr	r3, [r4, #16]
 800e9f8:	462a      	mov	r2, r5
 800e9fa:	4649      	mov	r1, r9
 800e9fc:	4640      	mov	r0, r8
 800e9fe:	47d0      	blx	sl
 800ea00:	3001      	adds	r0, #1
 800ea02:	d0ab      	beq.n	800e95c <_printf_i+0x164>
 800ea04:	6823      	ldr	r3, [r4, #0]
 800ea06:	079b      	lsls	r3, r3, #30
 800ea08:	d413      	bmi.n	800ea32 <_printf_i+0x23a>
 800ea0a:	68e0      	ldr	r0, [r4, #12]
 800ea0c:	9b03      	ldr	r3, [sp, #12]
 800ea0e:	4298      	cmp	r0, r3
 800ea10:	bfb8      	it	lt
 800ea12:	4618      	movlt	r0, r3
 800ea14:	e7a4      	b.n	800e960 <_printf_i+0x168>
 800ea16:	2301      	movs	r3, #1
 800ea18:	4632      	mov	r2, r6
 800ea1a:	4649      	mov	r1, r9
 800ea1c:	4640      	mov	r0, r8
 800ea1e:	47d0      	blx	sl
 800ea20:	3001      	adds	r0, #1
 800ea22:	d09b      	beq.n	800e95c <_printf_i+0x164>
 800ea24:	3501      	adds	r5, #1
 800ea26:	68e3      	ldr	r3, [r4, #12]
 800ea28:	9903      	ldr	r1, [sp, #12]
 800ea2a:	1a5b      	subs	r3, r3, r1
 800ea2c:	42ab      	cmp	r3, r5
 800ea2e:	dcf2      	bgt.n	800ea16 <_printf_i+0x21e>
 800ea30:	e7eb      	b.n	800ea0a <_printf_i+0x212>
 800ea32:	2500      	movs	r5, #0
 800ea34:	f104 0619 	add.w	r6, r4, #25
 800ea38:	e7f5      	b.n	800ea26 <_printf_i+0x22e>
 800ea3a:	bf00      	nop
 800ea3c:	0800edad 	.word	0x0800edad
 800ea40:	0800edbe 	.word	0x0800edbe

0800ea44 <memmove>:
 800ea44:	4288      	cmp	r0, r1
 800ea46:	b510      	push	{r4, lr}
 800ea48:	eb01 0402 	add.w	r4, r1, r2
 800ea4c:	d902      	bls.n	800ea54 <memmove+0x10>
 800ea4e:	4284      	cmp	r4, r0
 800ea50:	4623      	mov	r3, r4
 800ea52:	d807      	bhi.n	800ea64 <memmove+0x20>
 800ea54:	1e43      	subs	r3, r0, #1
 800ea56:	42a1      	cmp	r1, r4
 800ea58:	d008      	beq.n	800ea6c <memmove+0x28>
 800ea5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea62:	e7f8      	b.n	800ea56 <memmove+0x12>
 800ea64:	4402      	add	r2, r0
 800ea66:	4601      	mov	r1, r0
 800ea68:	428a      	cmp	r2, r1
 800ea6a:	d100      	bne.n	800ea6e <memmove+0x2a>
 800ea6c:	bd10      	pop	{r4, pc}
 800ea6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea76:	e7f7      	b.n	800ea68 <memmove+0x24>

0800ea78 <_free_r>:
 800ea78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea7a:	2900      	cmp	r1, #0
 800ea7c:	d044      	beq.n	800eb08 <_free_r+0x90>
 800ea7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea82:	9001      	str	r0, [sp, #4]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	f1a1 0404 	sub.w	r4, r1, #4
 800ea8a:	bfb8      	it	lt
 800ea8c:	18e4      	addlt	r4, r4, r3
 800ea8e:	f000 f913 	bl	800ecb8 <__malloc_lock>
 800ea92:	4a1e      	ldr	r2, [pc, #120]	; (800eb0c <_free_r+0x94>)
 800ea94:	9801      	ldr	r0, [sp, #4]
 800ea96:	6813      	ldr	r3, [r2, #0]
 800ea98:	b933      	cbnz	r3, 800eaa8 <_free_r+0x30>
 800ea9a:	6063      	str	r3, [r4, #4]
 800ea9c:	6014      	str	r4, [r2, #0]
 800ea9e:	b003      	add	sp, #12
 800eaa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eaa4:	f000 b90e 	b.w	800ecc4 <__malloc_unlock>
 800eaa8:	42a3      	cmp	r3, r4
 800eaaa:	d908      	bls.n	800eabe <_free_r+0x46>
 800eaac:	6825      	ldr	r5, [r4, #0]
 800eaae:	1961      	adds	r1, r4, r5
 800eab0:	428b      	cmp	r3, r1
 800eab2:	bf01      	itttt	eq
 800eab4:	6819      	ldreq	r1, [r3, #0]
 800eab6:	685b      	ldreq	r3, [r3, #4]
 800eab8:	1949      	addeq	r1, r1, r5
 800eaba:	6021      	streq	r1, [r4, #0]
 800eabc:	e7ed      	b.n	800ea9a <_free_r+0x22>
 800eabe:	461a      	mov	r2, r3
 800eac0:	685b      	ldr	r3, [r3, #4]
 800eac2:	b10b      	cbz	r3, 800eac8 <_free_r+0x50>
 800eac4:	42a3      	cmp	r3, r4
 800eac6:	d9fa      	bls.n	800eabe <_free_r+0x46>
 800eac8:	6811      	ldr	r1, [r2, #0]
 800eaca:	1855      	adds	r5, r2, r1
 800eacc:	42a5      	cmp	r5, r4
 800eace:	d10b      	bne.n	800eae8 <_free_r+0x70>
 800ead0:	6824      	ldr	r4, [r4, #0]
 800ead2:	4421      	add	r1, r4
 800ead4:	1854      	adds	r4, r2, r1
 800ead6:	42a3      	cmp	r3, r4
 800ead8:	6011      	str	r1, [r2, #0]
 800eada:	d1e0      	bne.n	800ea9e <_free_r+0x26>
 800eadc:	681c      	ldr	r4, [r3, #0]
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	6053      	str	r3, [r2, #4]
 800eae2:	4421      	add	r1, r4
 800eae4:	6011      	str	r1, [r2, #0]
 800eae6:	e7da      	b.n	800ea9e <_free_r+0x26>
 800eae8:	d902      	bls.n	800eaf0 <_free_r+0x78>
 800eaea:	230c      	movs	r3, #12
 800eaec:	6003      	str	r3, [r0, #0]
 800eaee:	e7d6      	b.n	800ea9e <_free_r+0x26>
 800eaf0:	6825      	ldr	r5, [r4, #0]
 800eaf2:	1961      	adds	r1, r4, r5
 800eaf4:	428b      	cmp	r3, r1
 800eaf6:	bf04      	itt	eq
 800eaf8:	6819      	ldreq	r1, [r3, #0]
 800eafa:	685b      	ldreq	r3, [r3, #4]
 800eafc:	6063      	str	r3, [r4, #4]
 800eafe:	bf04      	itt	eq
 800eb00:	1949      	addeq	r1, r1, r5
 800eb02:	6021      	streq	r1, [r4, #0]
 800eb04:	6054      	str	r4, [r2, #4]
 800eb06:	e7ca      	b.n	800ea9e <_free_r+0x26>
 800eb08:	b003      	add	sp, #12
 800eb0a:	bd30      	pop	{r4, r5, pc}
 800eb0c:	24000ea4 	.word	0x24000ea4

0800eb10 <sbrk_aligned>:
 800eb10:	b570      	push	{r4, r5, r6, lr}
 800eb12:	4e0e      	ldr	r6, [pc, #56]	; (800eb4c <sbrk_aligned+0x3c>)
 800eb14:	460c      	mov	r4, r1
 800eb16:	6831      	ldr	r1, [r6, #0]
 800eb18:	4605      	mov	r5, r0
 800eb1a:	b911      	cbnz	r1, 800eb22 <sbrk_aligned+0x12>
 800eb1c:	f000 f8bc 	bl	800ec98 <_sbrk_r>
 800eb20:	6030      	str	r0, [r6, #0]
 800eb22:	4621      	mov	r1, r4
 800eb24:	4628      	mov	r0, r5
 800eb26:	f000 f8b7 	bl	800ec98 <_sbrk_r>
 800eb2a:	1c43      	adds	r3, r0, #1
 800eb2c:	d00a      	beq.n	800eb44 <sbrk_aligned+0x34>
 800eb2e:	1cc4      	adds	r4, r0, #3
 800eb30:	f024 0403 	bic.w	r4, r4, #3
 800eb34:	42a0      	cmp	r0, r4
 800eb36:	d007      	beq.n	800eb48 <sbrk_aligned+0x38>
 800eb38:	1a21      	subs	r1, r4, r0
 800eb3a:	4628      	mov	r0, r5
 800eb3c:	f000 f8ac 	bl	800ec98 <_sbrk_r>
 800eb40:	3001      	adds	r0, #1
 800eb42:	d101      	bne.n	800eb48 <sbrk_aligned+0x38>
 800eb44:	f04f 34ff 	mov.w	r4, #4294967295
 800eb48:	4620      	mov	r0, r4
 800eb4a:	bd70      	pop	{r4, r5, r6, pc}
 800eb4c:	24000ea8 	.word	0x24000ea8

0800eb50 <_malloc_r>:
 800eb50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb54:	1ccd      	adds	r5, r1, #3
 800eb56:	f025 0503 	bic.w	r5, r5, #3
 800eb5a:	3508      	adds	r5, #8
 800eb5c:	2d0c      	cmp	r5, #12
 800eb5e:	bf38      	it	cc
 800eb60:	250c      	movcc	r5, #12
 800eb62:	2d00      	cmp	r5, #0
 800eb64:	4607      	mov	r7, r0
 800eb66:	db01      	blt.n	800eb6c <_malloc_r+0x1c>
 800eb68:	42a9      	cmp	r1, r5
 800eb6a:	d905      	bls.n	800eb78 <_malloc_r+0x28>
 800eb6c:	230c      	movs	r3, #12
 800eb6e:	603b      	str	r3, [r7, #0]
 800eb70:	2600      	movs	r6, #0
 800eb72:	4630      	mov	r0, r6
 800eb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb78:	4e2e      	ldr	r6, [pc, #184]	; (800ec34 <_malloc_r+0xe4>)
 800eb7a:	f000 f89d 	bl	800ecb8 <__malloc_lock>
 800eb7e:	6833      	ldr	r3, [r6, #0]
 800eb80:	461c      	mov	r4, r3
 800eb82:	bb34      	cbnz	r4, 800ebd2 <_malloc_r+0x82>
 800eb84:	4629      	mov	r1, r5
 800eb86:	4638      	mov	r0, r7
 800eb88:	f7ff ffc2 	bl	800eb10 <sbrk_aligned>
 800eb8c:	1c43      	adds	r3, r0, #1
 800eb8e:	4604      	mov	r4, r0
 800eb90:	d14d      	bne.n	800ec2e <_malloc_r+0xde>
 800eb92:	6834      	ldr	r4, [r6, #0]
 800eb94:	4626      	mov	r6, r4
 800eb96:	2e00      	cmp	r6, #0
 800eb98:	d140      	bne.n	800ec1c <_malloc_r+0xcc>
 800eb9a:	6823      	ldr	r3, [r4, #0]
 800eb9c:	4631      	mov	r1, r6
 800eb9e:	4638      	mov	r0, r7
 800eba0:	eb04 0803 	add.w	r8, r4, r3
 800eba4:	f000 f878 	bl	800ec98 <_sbrk_r>
 800eba8:	4580      	cmp	r8, r0
 800ebaa:	d13a      	bne.n	800ec22 <_malloc_r+0xd2>
 800ebac:	6821      	ldr	r1, [r4, #0]
 800ebae:	3503      	adds	r5, #3
 800ebb0:	1a6d      	subs	r5, r5, r1
 800ebb2:	f025 0503 	bic.w	r5, r5, #3
 800ebb6:	3508      	adds	r5, #8
 800ebb8:	2d0c      	cmp	r5, #12
 800ebba:	bf38      	it	cc
 800ebbc:	250c      	movcc	r5, #12
 800ebbe:	4629      	mov	r1, r5
 800ebc0:	4638      	mov	r0, r7
 800ebc2:	f7ff ffa5 	bl	800eb10 <sbrk_aligned>
 800ebc6:	3001      	adds	r0, #1
 800ebc8:	d02b      	beq.n	800ec22 <_malloc_r+0xd2>
 800ebca:	6823      	ldr	r3, [r4, #0]
 800ebcc:	442b      	add	r3, r5
 800ebce:	6023      	str	r3, [r4, #0]
 800ebd0:	e00e      	b.n	800ebf0 <_malloc_r+0xa0>
 800ebd2:	6822      	ldr	r2, [r4, #0]
 800ebd4:	1b52      	subs	r2, r2, r5
 800ebd6:	d41e      	bmi.n	800ec16 <_malloc_r+0xc6>
 800ebd8:	2a0b      	cmp	r2, #11
 800ebda:	d916      	bls.n	800ec0a <_malloc_r+0xba>
 800ebdc:	1961      	adds	r1, r4, r5
 800ebde:	42a3      	cmp	r3, r4
 800ebe0:	6025      	str	r5, [r4, #0]
 800ebe2:	bf18      	it	ne
 800ebe4:	6059      	strne	r1, [r3, #4]
 800ebe6:	6863      	ldr	r3, [r4, #4]
 800ebe8:	bf08      	it	eq
 800ebea:	6031      	streq	r1, [r6, #0]
 800ebec:	5162      	str	r2, [r4, r5]
 800ebee:	604b      	str	r3, [r1, #4]
 800ebf0:	4638      	mov	r0, r7
 800ebf2:	f104 060b 	add.w	r6, r4, #11
 800ebf6:	f000 f865 	bl	800ecc4 <__malloc_unlock>
 800ebfa:	f026 0607 	bic.w	r6, r6, #7
 800ebfe:	1d23      	adds	r3, r4, #4
 800ec00:	1af2      	subs	r2, r6, r3
 800ec02:	d0b6      	beq.n	800eb72 <_malloc_r+0x22>
 800ec04:	1b9b      	subs	r3, r3, r6
 800ec06:	50a3      	str	r3, [r4, r2]
 800ec08:	e7b3      	b.n	800eb72 <_malloc_r+0x22>
 800ec0a:	6862      	ldr	r2, [r4, #4]
 800ec0c:	42a3      	cmp	r3, r4
 800ec0e:	bf0c      	ite	eq
 800ec10:	6032      	streq	r2, [r6, #0]
 800ec12:	605a      	strne	r2, [r3, #4]
 800ec14:	e7ec      	b.n	800ebf0 <_malloc_r+0xa0>
 800ec16:	4623      	mov	r3, r4
 800ec18:	6864      	ldr	r4, [r4, #4]
 800ec1a:	e7b2      	b.n	800eb82 <_malloc_r+0x32>
 800ec1c:	4634      	mov	r4, r6
 800ec1e:	6876      	ldr	r6, [r6, #4]
 800ec20:	e7b9      	b.n	800eb96 <_malloc_r+0x46>
 800ec22:	230c      	movs	r3, #12
 800ec24:	603b      	str	r3, [r7, #0]
 800ec26:	4638      	mov	r0, r7
 800ec28:	f000 f84c 	bl	800ecc4 <__malloc_unlock>
 800ec2c:	e7a1      	b.n	800eb72 <_malloc_r+0x22>
 800ec2e:	6025      	str	r5, [r4, #0]
 800ec30:	e7de      	b.n	800ebf0 <_malloc_r+0xa0>
 800ec32:	bf00      	nop
 800ec34:	24000ea4 	.word	0x24000ea4

0800ec38 <_realloc_r>:
 800ec38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec3c:	4680      	mov	r8, r0
 800ec3e:	4614      	mov	r4, r2
 800ec40:	460e      	mov	r6, r1
 800ec42:	b921      	cbnz	r1, 800ec4e <_realloc_r+0x16>
 800ec44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec48:	4611      	mov	r1, r2
 800ec4a:	f7ff bf81 	b.w	800eb50 <_malloc_r>
 800ec4e:	b92a      	cbnz	r2, 800ec5c <_realloc_r+0x24>
 800ec50:	f7ff ff12 	bl	800ea78 <_free_r>
 800ec54:	4625      	mov	r5, r4
 800ec56:	4628      	mov	r0, r5
 800ec58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec5c:	f000 f838 	bl	800ecd0 <_malloc_usable_size_r>
 800ec60:	4284      	cmp	r4, r0
 800ec62:	4607      	mov	r7, r0
 800ec64:	d802      	bhi.n	800ec6c <_realloc_r+0x34>
 800ec66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ec6a:	d812      	bhi.n	800ec92 <_realloc_r+0x5a>
 800ec6c:	4621      	mov	r1, r4
 800ec6e:	4640      	mov	r0, r8
 800ec70:	f7ff ff6e 	bl	800eb50 <_malloc_r>
 800ec74:	4605      	mov	r5, r0
 800ec76:	2800      	cmp	r0, #0
 800ec78:	d0ed      	beq.n	800ec56 <_realloc_r+0x1e>
 800ec7a:	42bc      	cmp	r4, r7
 800ec7c:	4622      	mov	r2, r4
 800ec7e:	4631      	mov	r1, r6
 800ec80:	bf28      	it	cs
 800ec82:	463a      	movcs	r2, r7
 800ec84:	f7ff fbb8 	bl	800e3f8 <memcpy>
 800ec88:	4631      	mov	r1, r6
 800ec8a:	4640      	mov	r0, r8
 800ec8c:	f7ff fef4 	bl	800ea78 <_free_r>
 800ec90:	e7e1      	b.n	800ec56 <_realloc_r+0x1e>
 800ec92:	4635      	mov	r5, r6
 800ec94:	e7df      	b.n	800ec56 <_realloc_r+0x1e>
	...

0800ec98 <_sbrk_r>:
 800ec98:	b538      	push	{r3, r4, r5, lr}
 800ec9a:	4d06      	ldr	r5, [pc, #24]	; (800ecb4 <_sbrk_r+0x1c>)
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	4604      	mov	r4, r0
 800eca0:	4608      	mov	r0, r1
 800eca2:	602b      	str	r3, [r5, #0]
 800eca4:	f7f4 fe46 	bl	8003934 <_sbrk>
 800eca8:	1c43      	adds	r3, r0, #1
 800ecaa:	d102      	bne.n	800ecb2 <_sbrk_r+0x1a>
 800ecac:	682b      	ldr	r3, [r5, #0]
 800ecae:	b103      	cbz	r3, 800ecb2 <_sbrk_r+0x1a>
 800ecb0:	6023      	str	r3, [r4, #0]
 800ecb2:	bd38      	pop	{r3, r4, r5, pc}
 800ecb4:	24000eac 	.word	0x24000eac

0800ecb8 <__malloc_lock>:
 800ecb8:	4801      	ldr	r0, [pc, #4]	; (800ecc0 <__malloc_lock+0x8>)
 800ecba:	f000 b811 	b.w	800ece0 <__retarget_lock_acquire_recursive>
 800ecbe:	bf00      	nop
 800ecc0:	24000eb0 	.word	0x24000eb0

0800ecc4 <__malloc_unlock>:
 800ecc4:	4801      	ldr	r0, [pc, #4]	; (800eccc <__malloc_unlock+0x8>)
 800ecc6:	f000 b80c 	b.w	800ece2 <__retarget_lock_release_recursive>
 800ecca:	bf00      	nop
 800eccc:	24000eb0 	.word	0x24000eb0

0800ecd0 <_malloc_usable_size_r>:
 800ecd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecd4:	1f18      	subs	r0, r3, #4
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	bfbc      	itt	lt
 800ecda:	580b      	ldrlt	r3, [r1, r0]
 800ecdc:	18c0      	addlt	r0, r0, r3
 800ecde:	4770      	bx	lr

0800ece0 <__retarget_lock_acquire_recursive>:
 800ece0:	4770      	bx	lr

0800ece2 <__retarget_lock_release_recursive>:
 800ece2:	4770      	bx	lr

0800ece4 <_init>:
 800ece4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ece6:	bf00      	nop
 800ece8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecea:	bc08      	pop	{r3}
 800ecec:	469e      	mov	lr, r3
 800ecee:	4770      	bx	lr

0800ecf0 <_fini>:
 800ecf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecf2:	bf00      	nop
 800ecf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecf6:	bc08      	pop	{r3}
 800ecf8:	469e      	mov	lr, r3
 800ecfa:	4770      	bx	lr
